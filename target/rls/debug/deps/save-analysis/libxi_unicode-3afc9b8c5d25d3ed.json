{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0","program":"C:\\Users\\user\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","xi_unicode","C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=3afc9b8c5d25d3ed","-C","extra-filename=-3afc9b8c5d25d3ed","--out-dir","c:\\Users\\user\\Desktop\\Patnic-CLI\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\user\\Desktop\\Patnic-CLI\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\user\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\user\\Desktop\\Patnic-CLI\\target\\rls\\debug\\deps\\libxi_unicode-3afc9b8c5d25d3ed.rmeta"},"prelude":{"crate_id":{"name":"xi_unicode","disambiguator":[11944284750035908766,0]},"crate_root":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src","external_crates":[{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[5748888646060736057,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[11647781593125135854,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13810207351280985286,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10856308035441163175,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15195352194256834944,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[8936219983177082535,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9514052684633617057,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11173665669995955307,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[11489992985031151541,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16828784558795307081,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[10060143980449217236,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[14817981415011782061,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16087529398371340149,0]}}],"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":610,"byte_end":25296,"line_start":15,"line_end":515,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":610,"byte_end":25296,"line_start":15,"line_end":515,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":34},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":22},{"krate":0,"index":26},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":29},{"krate":0,"index":31}],"decl_id":null,"docs":" Unicode utilities useful for text editing, including a line breaking iterator.\n","sig":null,"attributes":[{"value":"/ Unicode utilities useful for text editing, including a line breaking iterator.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":610,"byte_end":692,"line_start":15,"line_end":15,"column_start":1,"column_end":83}}]},{"kind":"Function","id":{"krate":0,"index":20},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":730,"byte_end":748,"line_start":21,"line_end":21,"column_start":8,"column_end":26},"name":"linebreak_property","qualname":"::linebreak_property","value":"pub fn linebreak_property(char) -> u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":21},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":1295,"byte_end":1317,"line_start":37,"line_end":37,"column_start":8,"column_end":30},"name":"linebreak_property_str","qualname":"::linebreak_property_str","value":"pub fn linebreak_property_str(&str, usize) -> (u8, usize)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":2573,"byte_end":2590,"line_start":64,"line_end":64,"column_start":12,"column_end":29},"name":"LineBreakIterator","qualname":"::LineBreakIterator","value":"LineBreakIterator {  }","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38}],"decl_id":null,"docs":" An iterator which produces line breaks according to the UAX 14 line\n breaking algorithm. For each break, return a tuple consisting of the offset\n within the source string and a bool indicating whether it's a hard break.\n","sig":null,"attributes":[{"value":"/ An iterator which produces line breaks according to the UAX 14 line","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":2309,"byte_end":2380,"line_start":60,"line_end":60,"column_start":1,"column_end":72}},{"value":"/ breaking algorithm. For each break, return a tuple consisting of the offset","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":2381,"byte_end":2460,"line_start":61,"line_end":61,"column_start":1,"column_end":80}},{"value":"/ within the source string and a bool indicating whether it's a hard break.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":2461,"byte_end":2538,"line_start":62,"line_end":62,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":3816,"byte_end":3819,"line_start":102,"line_end":102,"column_start":12,"column_end":15},"name":"new","qualname":"<LineBreakIterator>::new","value":"pub fn new(&str) -> LineBreakIterator","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator for the given string slice.\n","sig":null,"attributes":[{"value":"/ Create a new iterator for the given string slice.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":3751,"byte_end":3804,"line_start":101,"line_end":101,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":4865,"byte_end":4882,"line_start":129,"line_end":129,"column_start":12,"column_end":29},"name":"LineBreakLeafIter","qualname":"::LineBreakLeafIter","value":"LineBreakLeafIter {  }","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46}],"decl_id":null,"docs":" A class (TODO, not right word) useful for computing line breaks in a rope or\n other non-contiguous string representation. This is a trickier problem than\n iterating in a string for a few reasons, the trickiest of which is that in\n the general case, line breaks require an indeterminate amount of look-behind.","sig":null,"attributes":[{"value":"/ A class (TODO, not right word) useful for computing line breaks in a rope or","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":4267,"byte_end":4347,"line_start":120,"line_end":120,"column_start":1,"column_end":81}},{"value":"/ other non-contiguous string representation. This is a trickier problem than","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":4348,"byte_end":4427,"line_start":121,"line_end":121,"column_start":1,"column_end":80}},{"value":"/ iterating in a string for a few reasons, the trickiest of which is that in","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":4428,"byte_end":4506,"line_start":122,"line_end":122,"column_start":1,"column_end":79}},{"value":"/ the general case, line breaks require an indeterminate amount of look-behind.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":4507,"byte_end":4588,"line_start":123,"line_end":123,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":4589,"byte_end":4592,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ This is something of an \"expert-level\" interface, and should only be used if","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":4593,"byte_end":4673,"line_start":125,"line_end":125,"column_start":1,"column_end":81}},{"value":"/ the caller is prepared to respect all the invariants. Otherwise, you might","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":4674,"byte_end":4752,"line_start":126,"line_end":126,"column_start":1,"column_end":79}},{"value":"/ get inconsistent breaks depending on start positiona and leaf boundaries.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":4753,"byte_end":4830,"line_start":127,"line_end":127,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":5401,"byte_end":5404,"line_start":148,"line_end":148,"column_start":12,"column_end":15},"name":"new","qualname":"<LineBreakLeafIter>::new","value":"pub fn new(&str, usize) -> LineBreakLeafIter","parent":null,"children":[],"decl_id":null,"docs":" Create a new line break iterator suitable for leaves in a rope.\n Precondition: ix references a codepoint in s (implies s is not empty).\n","sig":null,"attributes":[{"value":"/ Create a new line break iterator suitable for leaves in a rope.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":5243,"byte_end":5310,"line_start":146,"line_end":146,"column_start":5,"column_end":72}},{"value":"/ Precondition: ix references a codepoint in s (implies s is not empty).","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":5315,"byte_end":5389,"line_start":147,"line_end":147,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":6250,"byte_end":6254,"line_start":166,"line_end":166,"column_start":12,"column_end":16},"name":"next","qualname":"<LineBreakLeafIter>::next","value":"pub fn next(&mut Self, &str) -> (usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Return break pos and whether it's a hard break. Note: hard break\n indication may go away, this may not be useful in actual application.\n If end of leaf is found, return leaf's len. This does not indicate\n a break, as that requires at least one more codepoint of context.\n If it is a break, then subsequent next call will return an offset of\n 0. EOT is always a break, so in the EOT case it's up to the caller\n to figure that out.","sig":null,"attributes":[{"value":"/ Return break pos and whether it's a hard break. Note: hard break","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":5601,"byte_end":5669,"line_start":156,"line_end":156,"column_start":5,"column_end":73}},{"value":"/ indication may go away, this may not be useful in actual application.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":5674,"byte_end":5747,"line_start":157,"line_end":157,"column_start":5,"column_end":78}},{"value":"/ If end of leaf is found, return leaf's len. This does not indicate","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":5752,"byte_end":5822,"line_start":158,"line_end":158,"column_start":5,"column_end":75}},{"value":"/ a break, as that requires at least one more codepoint of context.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":5827,"byte_end":5896,"line_start":159,"line_end":159,"column_start":5,"column_end":74}},{"value":"/ If it is a break, then subsequent next call will return an offset of","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":5901,"byte_end":5973,"line_start":160,"line_end":160,"column_start":5,"column_end":77}},{"value":"/ 0. EOT is always a break, so in the EOT case it's up to the caller","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":5978,"byte_end":6048,"line_start":161,"line_end":161,"column_start":5,"column_end":75}},{"value":"/ to figure that out.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":6053,"byte_end":6076,"line_start":162,"line_end":162,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":6081,"byte_end":6084,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ For consistent results, always supply same `s` until end of leaf is","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":6089,"byte_end":6160,"line_start":164,"line_end":164,"column_start":5,"column_end":76}},{"value":"/ reached (and initially this should be the same as in the `new` call).","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":6165,"byte_end":6238,"line_start":165,"line_end":165,"column_start":5,"column_end":78}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":2668,"byte_end":2685,"line_start":70,"line_end":70,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":3723,"byte_end":3740,"line_start":100,"line_end":100,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":4935,"byte_end":4952,"line_start":134,"line_end":134,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":5219,"byte_end":5236,"line_start":145,"line_end":145,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":2668,"byte_end":2685,"line_start":70,"line_end":70,"column_start":23,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":34},"to":{"krate":2,"index":7653}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":3723,"byte_end":3740,"line_start":100,"line_end":100,"column_start":10,"column_end":27},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":34},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":4935,"byte_end":4952,"line_start":134,"line_end":134,"column_start":18,"column_end":35},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":44},"to":{"krate":2,"index":2994}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xi-unicode-0.1.0\\src\\lib.rs","byte_start":5219,"byte_end":5236,"line_start":145,"line_end":145,"column_start":6,"column_end":23},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":44},"to":{"krate":4294967295,"index":4294967295}}]}
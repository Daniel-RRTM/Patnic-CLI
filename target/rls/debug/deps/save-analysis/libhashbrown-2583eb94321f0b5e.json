{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2","program":"C:\\Users\\user\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","hashbrown","--edition=2018","C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=2583eb94321f0b5e","-C","extra-filename=-2583eb94321f0b5e","--out-dir","c:\\Users\\user\\Desktop\\PatnicRoom Env\\Workspace\\CLI\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\user\\Desktop\\PatnicRoom Env\\Workspace\\CLI\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\user\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\user\\Desktop\\PatnicRoom Env\\Workspace\\CLI\\target\\rls\\debug\\deps\\libhashbrown-2583eb94321f0b5e.rmeta"},"prelude":{"crate_id":{"name":"hashbrown","disambiguator":[6037891546158607561,0]},"crate_root":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src","external_crates":[{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[11647781593125135854,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13810207351280985286,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[10856308035441163175,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","num":4,"id":{"name":"std","disambiguator":[5748888646060736057,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15195352194256834944,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[8936219983177082535,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9514052684633617057,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11173665669995955307,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[11489992985031151541,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16828784558795307081,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[10060143980449217236,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[14817981415011782061,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16087529398371340149,0]}}],"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":0,"byte_end":2639,"line_start":1,"line_end":93,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":1314,"byte_end":1315,"line_start":52,"line_end":52,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1349}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":1867,"byte_end":1868,"line_start":69,"line_end":69,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1351}},{"kind":"Use","ref_id":{"krate":0,"index":1359},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":2250,"byte_end":2257,"line_start":82,"line_end":82,"column_start":21,"column_end":28},"alias_span":null,"name":"HashMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1423},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":2279,"byte_end":2286,"line_start":83,"line_end":83,"column_start":21,"column_end":28},"alias_span":null,"name":"HashSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":0,"byte_end":2639,"line_start":1,"line_end":93,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":42},{"krate":0,"index":688},{"krate":0,"index":975},{"krate":0,"index":1004},{"krate":0,"index":1349},{"krate":0,"index":1351},{"krate":0,"index":1353},{"krate":0,"index":1356},{"krate":0,"index":1431},{"krate":0,"index":1436},{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1444}],"decl_id":null,"docs":" This crate is a Rust port of Google's high-performance [SwissTable] hash\n map, adapted to make it a drop-in replacement for Rust's standard `HashMap`\n and `HashSet` types.","sig":null,"attributes":[{"value":"/ This crate is a Rust port of Google's high-performance [SwissTable] hash","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":0,"byte_end":76,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"/ map, adapted to make it a drop-in replacement for Rust's standard `HashMap`","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":77,"byte_end":156,"line_start":2,"line_end":2,"column_start":1,"column_end":80}},{"value":"/ and `HashSet` types.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":157,"byte_end":181,"line_start":3,"line_end":3,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":182,"byte_end":185,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The original C++ version of [SwissTable] can be found [here], and this","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":186,"byte_end":260,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"/ [CppCon talk] gives an overview of how the algorithm works.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":261,"byte_end":324,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":325,"byte_end":328,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [SwissTable]: https://abseil.io/blog/20180927-swisstables","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":329,"byte_end":390,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"/ [here]: https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":391,"byte_end":490,"line_start":9,"line_end":9,"column_start":1,"column_end":100}},{"value":"/ [CppCon talk]: https://www.youtube.com/watch?v=ncHmEUmJZf4","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":491,"byte_end":553,"line_start":10,"line_end":10,"column_start":1,"column_end":63}},{"value":"no_std","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":555,"byte_end":565,"line_start":12,"line_end":12,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":765,"byte_end":787,"line_start":24,"line_end":24,"column_start":1,"column_end":23}},{"value":"allow(clippy :: module_name_repetitions)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":788,"byte_end":830,"line_start":25,"line_end":25,"column_start":1,"column_end":43}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":831,"byte_end":857,"line_start":26,"line_end":26,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\fx.rs","byte_start":4766,"byte_end":4779,"line_start":9,"line_end":9,"column_start":10,"column_end":23},"name":"FxHashBuilder","qualname":"::fx::FxHashBuilder","value":"BuildHasherDefault<FxHasher>","parent":null,"children":[],"decl_id":null,"docs":" Type alias for a `HashBuilder` using the `fx` hash algorithm.\n","sig":null,"attributes":[{"value":"/ Type alias for a `HashBuilder` using the `fx` hash algorithm.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\fx.rs","byte_start":4691,"byte_end":4756,"line_start":8,"line_end":8,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":26},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\fx.rs","byte_start":5531,"byte_end":5539,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"FxHasher","qualname":"::fx::FxHasher","value":"FxHasher {  }","parent":null,"children":[{"krate":0,"index":27}],"decl_id":null,"docs":" A speedy hash algorithm for use within rustc. The hashmap in liballoc\n by default uses SipHash which isn't quite as speedy as we want. In the\n compiler we're not really worried about DOS attempts, so we use a fast\n non-cryptographic hash.","sig":null,"attributes":[{"value":"/ A speedy hash algorithm for use within rustc. The hashmap in liballoc","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\fx.rs","byte_start":4813,"byte_end":4886,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ by default uses SipHash which isn't quite as speedy as we want. In the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\fx.rs","byte_start":4887,"byte_end":4961,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ compiler we're not really worried about DOS attempts, so we use a fast","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\fx.rs","byte_start":4962,"byte_end":5036,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/ non-cryptographic hash.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\fx.rs","byte_start":5037,"byte_end":5064,"line_start":14,"line_end":14,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\fx.rs","byte_start":5065,"byte_end":5068,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This is the same as the algorithm used by Firefox -- which is a homespun","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\fx.rs","byte_start":5069,"byte_end":5145,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ one not based on any widely-known algorithm -- though modified to produce","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\fx.rs","byte_start":5146,"byte_end":5223,"line_start":17,"line_end":17,"column_start":1,"column_end":78}},{"value":"/ 64-bit hash values instead of 32-bit hash values. It consistently","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\fx.rs","byte_start":5224,"byte_end":5293,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"/ out-performs an FNV-based hash within rustc itself -- the collision rate is","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\fx.rs","byte_start":5294,"byte_end":5373,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ similar or slightly worse than FNV, but the speed of the hash function","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\fx.rs","byte_start":5374,"byte_end":5448,"line_start":20,"line_end":20,"column_start":1,"column_end":75}},{"value":"/ itself is much higher because it works on up to 8 bytes at a time.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\fx.rs","byte_start":5449,"byte_end":5519,"line_start":21,"line_end":21,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":1359},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14731,"byte_end":14738,"line_start":188,"line_end":188,"column_start":12,"column_end":19},"name":"HashMap","qualname":"::map::HashMap","value":"HashMap {  }","parent":null,"children":[{"krate":0,"index":1363},{"krate":0,"index":1364}],"decl_id":null,"docs":" A hash map implemented with quadratic probing and SIMD lookup.","sig":null,"attributes":[{"value":"/ A hash map implemented with quadratic probing and SIMD lookup.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":8441,"byte_end":8507,"line_start":13,"line_end":13,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":8508,"byte_end":8511,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The default hashing algorithm is currently `fx`, though this is","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":8512,"byte_end":8579,"line_start":15,"line_end":15,"column_start":1,"column_end":68}},{"value":"/ subject to change at any point in the future. This hash function is very","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":8580,"byte_end":8656,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ fast for all types of keys, but this algorithm will typically *not* protect","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":8657,"byte_end":8736,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ against attacks such as HashDoS.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":8737,"byte_end":8773,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":8774,"byte_end":8777,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The hashing algorithm can be replaced on a per-`HashMap` basis using the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":8778,"byte_end":8854,"line_start":20,"line_end":20,"column_start":1,"column_end":77}},{"value":"/ [`default`], [`with_hasher`], and [`with_capacity_and_hasher`] methods. Many","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":8855,"byte_end":8935,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/ alternative algorithms are available on crates.io, such as the [`fnv`] crate.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":8936,"byte_end":9017,"line_start":22,"line_end":22,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":9018,"byte_end":9021,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ It is required that the keys implement the [`Eq`] and [`Hash`] traits, although","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":9022,"byte_end":9105,"line_start":24,"line_end":24,"column_start":1,"column_end":84}},{"value":"/ this can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":9106,"byte_end":9184,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/ If you implement these yourself, it is important that the following","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":9185,"byte_end":9256,"line_start":26,"line_end":26,"column_start":1,"column_end":72}},{"value":"/ property holds:","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":9257,"byte_end":9276,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":9277,"byte_end":9280,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":9281,"byte_end":9292,"line_start":29,"line_end":29,"column_start":1,"column_end":12}},{"value":"/ k1 == k2 -> hash(k1) == hash(k2)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":9293,"byte_end":9329,"line_start":30,"line_end":30,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":9330,"byte_end":9337,"line_start":31,"line_end":31,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":9338,"byte_end":9341,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ In other words, if two keys are equal, their hashes must be equal.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":9342,"byte_end":9412,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":9413,"byte_end":9416,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for a key to be modified in such a way that the key's","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":9417,"byte_end":9494,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/ hash, as determined by the [`Hash`] trait, or its equality, as determined by","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":9495,"byte_end":9575,"line_start":36,"line_end":36,"column_start":1,"column_end":81}},{"value":"/ the [`Eq`] trait, changes while it is in the map. This is normally only","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":9576,"byte_end":9651,"line_start":37,"line_end":37,"column_start":1,"column_end":76}},{"value":"/ possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":9652,"byte_end":9730,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":9731,"byte_end":9734,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ It is also a logic error for the [`Hash`] implementation of a key to panic.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":9735,"byte_end":9814,"line_start":40,"line_end":40,"column_start":1,"column_end":80}},{"value":"/ This is generally only possible if the trait is implemented manually. If a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":9815,"byte_end":9893,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/ panic does occur then the contents of the `HashMap` may become corrupted and","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":9894,"byte_end":9974,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/ some items may be dropped from the table.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":9975,"byte_end":10020,"line_start":43,"line_end":43,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10021,"byte_end":10024,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10025,"byte_end":10039,"line_start":45,"line_end":45,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10040,"byte_end":10043,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10044,"byte_end":10051,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10052,"byte_end":10079,"line_start":48,"line_end":48,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10080,"byte_end":10083,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10084,"byte_end":10152,"line_start":50,"line_end":50,"column_start":1,"column_end":69}},{"value":"/ // would be `HashMap<String, String>` in this example).","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10153,"byte_end":10212,"line_start":51,"line_end":51,"column_start":1,"column_end":60}},{"value":"/ let mut book_reviews = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10213,"byte_end":10255,"line_start":52,"line_end":52,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10256,"byte_end":10259,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // Review some books.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10260,"byte_end":10285,"line_start":54,"line_end":54,"column_start":1,"column_end":26}},{"value":"/ book_reviews.insert(","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10286,"byte_end":10310,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/     \"Adventures of Huckleberry Finn\".to_string(),","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10311,"byte_end":10364,"line_start":56,"line_end":56,"column_start":1,"column_end":54}},{"value":"/     \"My favorite book.\".to_string(),","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10365,"byte_end":10405,"line_start":57,"line_end":57,"column_start":1,"column_end":41}},{"value":"/ );","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10406,"byte_end":10412,"line_start":58,"line_end":58,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10413,"byte_end":10437,"line_start":59,"line_end":59,"column_start":1,"column_end":25}},{"value":"/     \"Grimms' Fairy Tales\".to_string(),","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10438,"byte_end":10480,"line_start":60,"line_end":60,"column_start":1,"column_end":43}},{"value":"/     \"Masterpiece.\".to_string(),","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10481,"byte_end":10516,"line_start":61,"line_end":61,"column_start":1,"column_end":36}},{"value":"/ );","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10517,"byte_end":10523,"line_start":62,"line_end":62,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10524,"byte_end":10548,"line_start":63,"line_end":63,"column_start":1,"column_end":25}},{"value":"/     \"Pride and Prejudice\".to_string(),","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10549,"byte_end":10591,"line_start":64,"line_end":64,"column_start":1,"column_end":43}},{"value":"/     \"Very enjoyable.\".to_string(),","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10592,"byte_end":10630,"line_start":65,"line_end":65,"column_start":1,"column_end":39}},{"value":"/ );","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10631,"byte_end":10637,"line_start":66,"line_end":66,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10638,"byte_end":10662,"line_start":67,"line_end":67,"column_start":1,"column_end":25}},{"value":"/     \"The Adventures of Sherlock Holmes\".to_string(),","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10663,"byte_end":10719,"line_start":68,"line_end":68,"column_start":1,"column_end":57}},{"value":"/     \"Eye lyked it alot.\".to_string(),","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10720,"byte_end":10761,"line_start":69,"line_end":69,"column_start":1,"column_end":42}},{"value":"/ );","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10762,"byte_end":10768,"line_start":70,"line_end":70,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10769,"byte_end":10772,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10773,"byte_end":10805,"line_start":72,"line_end":72,"column_start":1,"column_end":33}},{"value":"/ // When collections store owned values (String), they can still be","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10806,"byte_end":10876,"line_start":73,"line_end":73,"column_start":1,"column_end":71}},{"value":"/ // queried using references (&str).","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10877,"byte_end":10916,"line_start":74,"line_end":74,"column_start":1,"column_end":40}},{"value":"/ if !book_reviews.contains_key(\"Les Misérables\") {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10917,"byte_end":10971,"line_start":75,"line_end":75,"column_start":1,"column_end":54}},{"value":"/     println!(\"We've got {} reviews, but Les Misérables ain't one.\",","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":10972,"byte_end":11044,"line_start":76,"line_end":76,"column_start":1,"column_end":72}},{"value":"/              book_reviews.len());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11045,"byte_end":11082,"line_start":77,"line_end":77,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11083,"byte_end":11088,"line_start":78,"line_end":78,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11089,"byte_end":11092,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ // oops, this review has a lot of spelling mistakes, let's delete it.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11093,"byte_end":11166,"line_start":80,"line_end":80,"column_start":1,"column_end":74}},{"value":"/ book_reviews.remove(\"The Adventures of Sherlock Holmes\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11167,"byte_end":11228,"line_start":81,"line_end":81,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11229,"byte_end":11232,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ // Look up the values associated with some keys.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11233,"byte_end":11285,"line_start":83,"line_end":83,"column_start":1,"column_end":53}},{"value":"/ let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11286,"byte_end":11363,"line_start":84,"line_end":84,"column_start":1,"column_end":78}},{"value":"/ for &book in &to_find {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11364,"byte_end":11391,"line_start":85,"line_end":85,"column_start":1,"column_end":28}},{"value":"/     match book_reviews.get(book) {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11392,"byte_end":11430,"line_start":86,"line_end":86,"column_start":1,"column_end":39}},{"value":"/         Some(review) => println!(\"{}: {}\", book, review),","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11431,"byte_end":11492,"line_start":87,"line_end":87,"column_start":1,"column_end":62}},{"value":"/         None => println!(\"{} is unreviewed.\", book)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11493,"byte_end":11548,"line_start":88,"line_end":88,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11549,"byte_end":11558,"line_start":89,"line_end":89,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11559,"byte_end":11564,"line_start":90,"line_end":90,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11565,"byte_end":11568,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ // Look up the value for a key (will panic if the key is not found).","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11569,"byte_end":11641,"line_start":92,"line_end":92,"column_start":1,"column_end":73}},{"value":"/ println!(\"Review for Jane: {}\", book_reviews[\"Pride and Prejudice\"]);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11642,"byte_end":11715,"line_start":93,"line_end":93,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11716,"byte_end":11719,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11720,"byte_end":11751,"line_start":95,"line_end":95,"column_start":1,"column_end":32}},{"value":"/ for (book, review) in &book_reviews {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11752,"byte_end":11793,"line_start":96,"line_end":96,"column_start":1,"column_end":42}},{"value":"/     println!(\"{}: \\\"{}\\\"\", book, review);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11794,"byte_end":11839,"line_start":97,"line_end":97,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11840,"byte_end":11845,"line_start":98,"line_end":98,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11846,"byte_end":11853,"line_start":99,"line_end":99,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11854,"byte_end":11857,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ `HashMap` also implements an [`Entry API`](#method.entry), which allows","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11858,"byte_end":11933,"line_start":101,"line_end":101,"column_start":1,"column_end":76}},{"value":"/ for more complex methods of getting, setting, updating and removing keys and","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":11934,"byte_end":12014,"line_start":102,"line_end":102,"column_start":1,"column_end":81}},{"value":"/ their values:","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12015,"byte_end":12032,"line_start":103,"line_end":103,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12033,"byte_end":12036,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12037,"byte_end":12044,"line_start":105,"line_end":105,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12045,"byte_end":12072,"line_start":106,"line_end":106,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12073,"byte_end":12076,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ // type inference lets us omit an explicit type signature (which","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12077,"byte_end":12145,"line_start":108,"line_end":108,"column_start":1,"column_end":69}},{"value":"/ // would be `HashMap<&str, u8>` in this example).","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12146,"byte_end":12199,"line_start":109,"line_end":109,"column_start":1,"column_end":54}},{"value":"/ let mut player_stats = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12200,"byte_end":12242,"line_start":110,"line_end":110,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12243,"byte_end":12246,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ fn random_stat_buff() -> u8 {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12247,"byte_end":12280,"line_start":112,"line_end":112,"column_start":1,"column_end":34}},{"value":"/     // could actually return some random value here - let's just return","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12281,"byte_end":12356,"line_start":113,"line_end":113,"column_start":1,"column_end":76}},{"value":"/     // some fixed value for now","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12357,"byte_end":12392,"line_start":114,"line_end":114,"column_start":1,"column_end":36}},{"value":"/     42","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12393,"byte_end":12403,"line_start":115,"line_end":115,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12404,"byte_end":12409,"line_start":116,"line_end":116,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12410,"byte_end":12413,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ // insert a key only if it doesn't already exist","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12414,"byte_end":12466,"line_start":118,"line_end":118,"column_start":1,"column_end":53}},{"value":"/ player_stats.entry(\"health\").or_insert(100);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12467,"byte_end":12515,"line_start":119,"line_end":119,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12516,"byte_end":12519,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ // insert a key using a function that provides a new value only if it","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12520,"byte_end":12593,"line_start":121,"line_end":121,"column_start":1,"column_end":74}},{"value":"/ // doesn't already exist","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12594,"byte_end":12622,"line_start":122,"line_end":122,"column_start":1,"column_end":29}},{"value":"/ player_stats.entry(\"defence\").or_insert_with(random_stat_buff);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12623,"byte_end":12690,"line_start":123,"line_end":123,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12691,"byte_end":12694,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ // update a key, guarding against the key possibly not being set","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12695,"byte_end":12763,"line_start":125,"line_end":125,"column_start":1,"column_end":69}},{"value":"/ let stat = player_stats.entry(\"attack\").or_insert(100);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12764,"byte_end":12823,"line_start":126,"line_end":126,"column_start":1,"column_end":60}},{"value":"/ *stat += random_stat_buff();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12824,"byte_end":12856,"line_start":127,"line_end":127,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12857,"byte_end":12864,"line_start":128,"line_end":128,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12865,"byte_end":12868,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ The easiest way to use `HashMap` with a custom key type is to derive [`Eq`] and [`Hash`].","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12869,"byte_end":12962,"line_start":130,"line_end":130,"column_start":1,"column_end":94}},{"value":"/ We must also derive [`PartialEq`].","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":12963,"byte_end":13001,"line_start":131,"line_end":131,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13002,"byte_end":13005,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13006,"byte_end":13065,"line_start":133,"line_end":133,"column_start":1,"column_end":60}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13066,"byte_end":13130,"line_start":134,"line_end":134,"column_start":1,"column_end":65}},{"value":"/ [`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13131,"byte_end":13204,"line_start":135,"line_end":135,"column_start":1,"column_end":74}},{"value":"/ [`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13205,"byte_end":13276,"line_start":136,"line_end":136,"column_start":1,"column_end":72}},{"value":"/ [`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13277,"byte_end":13342,"line_start":137,"line_end":137,"column_start":1,"column_end":66}},{"value":"/ [`default`]: #method.default","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13343,"byte_end":13375,"line_start":138,"line_end":138,"column_start":1,"column_end":33}},{"value":"/ [`with_hasher`]: #method.with_hasher","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13376,"byte_end":13416,"line_start":139,"line_end":139,"column_start":1,"column_end":41}},{"value":"/ [`with_capacity_and_hasher`]: #method.with_capacity_and_hasher","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13417,"byte_end":13483,"line_start":140,"line_end":140,"column_start":1,"column_end":67}},{"value":"/ [`fnv`]: https://crates.io/crates/fnv","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13484,"byte_end":13525,"line_start":141,"line_end":141,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13526,"byte_end":13529,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13530,"byte_end":13537,"line_start":143,"line_end":143,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13538,"byte_end":13565,"line_start":144,"line_end":144,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13566,"byte_end":13569,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ #[derive(Hash, Eq, PartialEq, Debug)]","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13570,"byte_end":13611,"line_start":146,"line_end":146,"column_start":1,"column_end":42}},{"value":"/ struct Viking {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13612,"byte_end":13631,"line_start":147,"line_end":147,"column_start":1,"column_end":20}},{"value":"/     name: String,","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13632,"byte_end":13653,"line_start":148,"line_end":148,"column_start":1,"column_end":22}},{"value":"/     country: String,","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13654,"byte_end":13678,"line_start":149,"line_end":149,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13679,"byte_end":13684,"line_start":150,"line_end":150,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13685,"byte_end":13688,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ impl Viking {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13689,"byte_end":13706,"line_start":152,"line_end":152,"column_start":1,"column_end":18}},{"value":"/     /// Creates a new Viking.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13707,"byte_end":13740,"line_start":153,"line_end":153,"column_start":1,"column_end":34}},{"value":"/     fn new(name: &str, country: &str) -> Viking {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13741,"byte_end":13794,"line_start":154,"line_end":154,"column_start":1,"column_end":54}},{"value":"/         Viking { name: name.to_string(), country: country.to_string() }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13795,"byte_end":13870,"line_start":155,"line_end":155,"column_start":1,"column_end":76}},{"value":"/     }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13871,"byte_end":13880,"line_start":156,"line_end":156,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13881,"byte_end":13886,"line_start":157,"line_end":157,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13887,"byte_end":13890,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ // Use a HashMap to store the vikings' health points.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13891,"byte_end":13948,"line_start":159,"line_end":159,"column_start":1,"column_end":58}},{"value":"/ let mut vikings = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13949,"byte_end":13986,"line_start":160,"line_end":160,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13987,"byte_end":13990,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ vikings.insert(Viking::new(\"Einar\", \"Norway\"), 25);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":13991,"byte_end":14046,"line_start":162,"line_end":162,"column_start":1,"column_end":56}},{"value":"/ vikings.insert(Viking::new(\"Olaf\", \"Denmark\"), 24);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14047,"byte_end":14102,"line_start":163,"line_end":163,"column_start":1,"column_end":56}},{"value":"/ vikings.insert(Viking::new(\"Harald\", \"Iceland\"), 12);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14103,"byte_end":14160,"line_start":164,"line_end":164,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14161,"byte_end":14164,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ // Use derived implementation to print the status of the vikings.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14165,"byte_end":14234,"line_start":166,"line_end":166,"column_start":1,"column_end":70}},{"value":"/ for (viking, health) in &vikings {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14235,"byte_end":14273,"line_start":167,"line_end":167,"column_start":1,"column_end":39}},{"value":"/     println!(\"{:?} has {} hp\", viking, health);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14274,"byte_end":14325,"line_start":168,"line_end":168,"column_start":1,"column_end":52}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14326,"byte_end":14331,"line_start":169,"line_end":169,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14332,"byte_end":14339,"line_start":170,"line_end":170,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14340,"byte_end":14343,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ A `HashMap` with fixed list of elements can be initialized from an array:","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14344,"byte_end":14421,"line_start":172,"line_end":172,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14422,"byte_end":14425,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14426,"byte_end":14433,"line_start":174,"line_end":174,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14434,"byte_end":14461,"line_start":175,"line_end":175,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14462,"byte_end":14465,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14466,"byte_end":14481,"line_start":177,"line_end":177,"column_start":1,"column_end":16}},{"value":"/     let timber_resources: HashMap<&str, i32> =","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14482,"byte_end":14532,"line_start":178,"line_end":178,"column_start":1,"column_end":51}},{"value":"/     [(\"Norway\", 100),","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14533,"byte_end":14558,"line_start":179,"line_end":179,"column_start":1,"column_end":26}},{"value":"/      (\"Denmark\", 50),","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14559,"byte_end":14584,"line_start":180,"line_end":180,"column_start":1,"column_end":26}},{"value":"/      (\"Iceland\", 10)]","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14585,"byte_end":14610,"line_start":181,"line_end":181,"column_start":1,"column_end":26}},{"value":"/      .iter().cloned().collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14611,"byte_end":14647,"line_start":182,"line_end":182,"column_start":1,"column_end":37}},{"value":"/     // use the values stored in map","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14648,"byte_end":14687,"line_start":183,"line_end":183,"column_start":1,"column_end":40}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14688,"byte_end":14693,"line_start":184,"line_end":184,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":14694,"byte_end":14701,"line_start":185,"line_end":185,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15440,"byte_end":15443,"line_start":213,"line_end":213,"column_start":12,"column_end":15},"name":"new","qualname":"<HashMap<K, V, DefaultHashBuilder>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap`.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15097,"byte_end":15128,"line_start":201,"line_end":201,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15133,"byte_end":15136,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ The hash map is initially created with a capacity of 0, so it will not allocate until it","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15141,"byte_end":15233,"line_start":203,"line_end":203,"column_start":5,"column_end":97}},{"value":"/ is first inserted into.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15238,"byte_end":15265,"line_start":204,"line_end":204,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15270,"byte_end":15273,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15278,"byte_end":15292,"line_start":206,"line_end":206,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15297,"byte_end":15300,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15305,"byte_end":15312,"line_start":208,"line_end":208,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15317,"byte_end":15344,"line_start":209,"line_end":209,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, i32> = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15349,"byte_end":15402,"line_start":210,"line_end":210,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15407,"byte_end":15414,"line_start":211,"line_end":211,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15419,"byte_end":15428,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15898,"byte_end":15911,"line_start":229,"line_end":229,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<HashMap<K, V, DefaultHashBuilder>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` with the specified capacity.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` with the specified capacity.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15491,"byte_end":15550,"line_start":217,"line_end":217,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15555,"byte_end":15558,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ The hash map will be able to hold at least `capacity` elements without","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15563,"byte_end":15637,"line_start":219,"line_end":219,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash map will not allocate.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15642,"byte_end":15711,"line_start":220,"line_end":220,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15716,"byte_end":15719,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15724,"byte_end":15738,"line_start":222,"line_end":222,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15743,"byte_end":15746,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15751,"byte_end":15758,"line_start":224,"line_end":224,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15763,"byte_end":15790,"line_start":225,"line_end":225,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, i32> = HashMap::with_capacity(10);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15795,"byte_end":15860,"line_start":226,"line_end":226,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15865,"byte_end":15872,"line_start":227,"line_end":227,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15877,"byte_end":15886,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16802,"byte_end":16813,"line_start":256,"line_end":256,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<HashMap<K, V, S>>::with_hasher","value":"pub fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` which will use the given hash builder to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` which will use the given hash builder to hash","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16065,"byte_end":16141,"line_start":235,"line_end":235,"column_start":5,"column_end":81}},{"value":"/ keys.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16146,"byte_end":16155,"line_start":236,"line_end":236,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16160,"byte_end":16163,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ The created map has the default initial capacity.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16168,"byte_end":16221,"line_start":238,"line_end":238,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16226,"byte_end":16229,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16234,"byte_end":16297,"line_start":240,"line_end":240,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16302,"byte_end":16367,"line_start":241,"line_end":241,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16372,"byte_end":16435,"line_start":242,"line_end":242,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16440,"byte_end":16504,"line_start":243,"line_end":243,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16509,"byte_end":16512,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16517,"byte_end":16531,"line_start":245,"line_end":245,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16536,"byte_end":16539,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16544,"byte_end":16551,"line_start":247,"line_end":247,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16556,"byte_end":16583,"line_start":248,"line_end":248,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16588,"byte_end":16636,"line_start":249,"line_end":249,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16641,"byte_end":16644,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16649,"byte_end":16691,"line_start":251,"line_end":251,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_hasher(s);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16696,"byte_end":16738,"line_start":252,"line_end":252,"column_start":5,"column_end":47}},{"value":"/ map.insert(1, 2);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16743,"byte_end":16764,"line_start":253,"line_end":253,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16769,"byte_end":16776,"line_start":254,"line_end":254,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16781,"byte_end":16790,"line_start":255,"line_end":255,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":17804,"byte_end":17828,"line_start":285,"line_end":285,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<HashMap<K, V, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` with the specified capacity, using `hash_builder`\n to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` with the specified capacity, using `hash_builder`","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16939,"byte_end":17019,"line_start":263,"line_end":263,"column_start":5,"column_end":85}},{"value":"/ to hash the keys.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":17024,"byte_end":17045,"line_start":264,"line_end":264,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":17050,"byte_end":17053,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ The hash map will be able to hold at least `capacity` elements without","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":17058,"byte_end":17132,"line_start":266,"line_end":266,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash map will not allocate.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":17137,"byte_end":17206,"line_start":267,"line_end":267,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":17211,"byte_end":17214,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":17219,"byte_end":17282,"line_start":269,"line_end":269,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":17287,"byte_end":17352,"line_start":270,"line_end":270,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":17357,"byte_end":17420,"line_start":271,"line_end":271,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":17425,"byte_end":17489,"line_start":272,"line_end":272,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":17494,"byte_end":17497,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":17502,"byte_end":17516,"line_start":274,"line_end":274,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":17521,"byte_end":17524,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":17529,"byte_end":17536,"line_start":276,"line_end":276,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":17541,"byte_end":17568,"line_start":277,"line_end":277,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":17573,"byte_end":17621,"line_start":278,"line_end":278,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":17626,"byte_end":17629,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":17634,"byte_end":17676,"line_start":280,"line_end":280,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_capacity_and_hasher(10, s);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":17681,"byte_end":17740,"line_start":281,"line_end":281,"column_start":5,"column_end":64}},{"value":"/ map.insert(1, 2);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":17745,"byte_end":17766,"line_start":282,"line_end":282,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":17771,"byte_end":17778,"line_start":283,"line_end":283,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":17783,"byte_end":17792,"line_start":284,"line_end":284,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18486,"byte_end":18492,"line_start":307,"line_end":307,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashMap<K, V, S>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the map's [`BuildHasher`].","sig":null,"attributes":[{"value":"/ Returns a reference to the map's [`BuildHasher`].","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":17989,"byte_end":18042,"line_start":292,"line_end":292,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18047,"byte_end":18050,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18055,"byte_end":18133,"line_start":294,"line_end":294,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18138,"byte_end":18141,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18146,"byte_end":18160,"line_start":296,"line_end":296,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18165,"byte_end":18168,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18173,"byte_end":18180,"line_start":298,"line_end":298,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18185,"byte_end":18212,"line_start":299,"line_end":299,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18217,"byte_end":18265,"line_start":300,"line_end":300,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18270,"byte_end":18273,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ let hasher = DefaultHashBuilder::default();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18278,"byte_end":18325,"line_start":302,"line_end":302,"column_start":5,"column_end":52}},{"value":"/ let map: HashMap<i32, i32> = HashMap::with_hasher(hasher);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18330,"byte_end":18392,"line_start":303,"line_end":303,"column_start":5,"column_end":67}},{"value":"/ let hasher: &DefaultHashBuilder = map.hasher();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18397,"byte_end":18448,"line_start":304,"line_end":304,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18453,"byte_end":18460,"line_start":305,"line_end":305,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18465,"byte_end":18474,"line_start":306,"line_end":306,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19001,"byte_end":19009,"line_start":324,"line_end":324,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HashMap<K, V, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the map can hold without reallocating.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18546,"byte_end":18619,"line_start":311,"line_end":311,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18624,"byte_end":18627,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ This number is a lower bound; the `HashMap<K, V>` might be able to hold","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18632,"byte_end":18707,"line_start":313,"line_end":313,"column_start":5,"column_end":80}},{"value":"/ more, but is guaranteed to be able to hold at least this many.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18712,"byte_end":18778,"line_start":314,"line_end":314,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18783,"byte_end":18786,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18791,"byte_end":18805,"line_start":316,"line_end":316,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18810,"byte_end":18813,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18818,"byte_end":18825,"line_start":318,"line_end":318,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18830,"byte_end":18857,"line_start":319,"line_end":319,"column_start":5,"column_end":32}},{"value":"/ let map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18862,"byte_end":18923,"line_start":320,"line_end":320,"column_start":5,"column_end":66}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18928,"byte_end":18963,"line_start":321,"line_end":321,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18968,"byte_end":18975,"line_start":322,"line_end":322,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":18980,"byte_end":18989,"line_start":323,"line_end":323,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19498,"byte_end":19502,"line_start":346,"line_end":346,"column_start":12,"column_end":16},"name":"keys","qualname":"<HashMap<K, V, S>>::keys","value":"pub fn keys(&Self) -> Keys<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all keys in arbitrary order.\n The iterator element type is `&'a K`.","sig":null,"attributes":[{"value":"/ An iterator visiting all keys in arbitrary order.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19069,"byte_end":19122,"line_start":328,"line_end":328,"column_start":5,"column_end":58}},{"value":"/ The iterator element type is `&'a K`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19127,"byte_end":19168,"line_start":329,"line_end":329,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19173,"byte_end":19176,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19181,"byte_end":19195,"line_start":331,"line_end":331,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19200,"byte_end":19203,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19208,"byte_end":19215,"line_start":333,"line_end":333,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19220,"byte_end":19247,"line_start":334,"line_end":334,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19252,"byte_end":19255,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19260,"byte_end":19293,"line_start":336,"line_end":336,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19298,"byte_end":19321,"line_start":337,"line_end":337,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19326,"byte_end":19349,"line_start":338,"line_end":338,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19354,"byte_end":19377,"line_start":339,"line_end":339,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19382,"byte_end":19385,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ for key in map.keys() {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19390,"byte_end":19417,"line_start":341,"line_end":341,"column_start":5,"column_end":32}},{"value":"/     println!(\"{}\", key);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19422,"byte_end":19450,"line_start":342,"line_end":342,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19455,"byte_end":19460,"line_start":343,"line_end":343,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19465,"byte_end":19472,"line_start":344,"line_end":344,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19477,"byte_end":19486,"line_start":345,"line_end":345,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20010,"byte_end":20016,"line_start":368,"line_end":368,"column_start":12,"column_end":18},"name":"values","qualname":"<HashMap<K, V, S>>::values","value":"pub fn values(&Self) -> Values<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values in arbitrary order.\n The iterator element type is `&'a V`.","sig":null,"attributes":[{"value":"/ An iterator visiting all values in arbitrary order.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19577,"byte_end":19632,"line_start":350,"line_end":350,"column_start":5,"column_end":60}},{"value":"/ The iterator element type is `&'a V`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19637,"byte_end":19678,"line_start":351,"line_end":351,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19683,"byte_end":19686,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19691,"byte_end":19705,"line_start":353,"line_end":353,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19710,"byte_end":19713,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19718,"byte_end":19725,"line_start":355,"line_end":355,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19730,"byte_end":19757,"line_start":356,"line_end":356,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19762,"byte_end":19765,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19770,"byte_end":19803,"line_start":358,"line_end":358,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19808,"byte_end":19831,"line_start":359,"line_end":359,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19836,"byte_end":19859,"line_start":360,"line_end":360,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19864,"byte_end":19887,"line_start":361,"line_end":361,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19892,"byte_end":19895,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19900,"byte_end":19929,"line_start":363,"line_end":363,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19934,"byte_end":19962,"line_start":364,"line_end":364,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19967,"byte_end":19972,"line_start":365,"line_end":365,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19977,"byte_end":19984,"line_start":366,"line_end":366,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":19989,"byte_end":19998,"line_start":367,"line_end":367,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20634,"byte_end":20644,"line_start":395,"line_end":395,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<HashMap<K, V, S>>::values_mut","value":"pub fn values_mut(&mut Self) -> ValuesMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values mutably in arbitrary order.\n The iterator element type is `&'a mut V`.","sig":null,"attributes":[{"value":"/ An iterator visiting all values mutably in arbitrary order.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20095,"byte_end":20158,"line_start":372,"line_end":372,"column_start":5,"column_end":68}},{"value":"/ The iterator element type is `&'a mut V`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20163,"byte_end":20208,"line_start":373,"line_end":373,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20213,"byte_end":20216,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20221,"byte_end":20235,"line_start":375,"line_end":375,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20240,"byte_end":20243,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20248,"byte_end":20255,"line_start":377,"line_end":377,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20260,"byte_end":20287,"line_start":378,"line_end":378,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20292,"byte_end":20295,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20300,"byte_end":20333,"line_start":380,"line_end":380,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20338,"byte_end":20341,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20346,"byte_end":20369,"line_start":382,"line_end":382,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20374,"byte_end":20397,"line_start":383,"line_end":383,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20402,"byte_end":20425,"line_start":384,"line_end":384,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20430,"byte_end":20433,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ for val in map.values_mut() {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20438,"byte_end":20471,"line_start":386,"line_end":386,"column_start":5,"column_end":38}},{"value":"/     *val = *val + 10;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20476,"byte_end":20501,"line_start":387,"line_end":387,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20506,"byte_end":20511,"line_start":388,"line_end":388,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20516,"byte_end":20519,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20524,"byte_end":20553,"line_start":390,"line_end":390,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20558,"byte_end":20586,"line_start":391,"line_end":391,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20591,"byte_end":20596,"line_start":392,"line_end":392,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20601,"byte_end":20608,"line_start":393,"line_end":393,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20613,"byte_end":20622,"line_start":394,"line_end":394,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21232,"byte_end":21236,"line_start":419,"line_end":419,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashMap<K, V, S>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order.\n The iterator element type is `(&'a K, &'a V)`.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20758,"byte_end":20822,"line_start":401,"line_end":401,"column_start":5,"column_end":69}},{"value":"/ The iterator element type is `(&'a K, &'a V)`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20827,"byte_end":20877,"line_start":402,"line_end":402,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20882,"byte_end":20885,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20890,"byte_end":20904,"line_start":404,"line_end":404,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20909,"byte_end":20912,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20917,"byte_end":20924,"line_start":406,"line_end":406,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20929,"byte_end":20956,"line_start":407,"line_end":407,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20961,"byte_end":20964,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":20969,"byte_end":21002,"line_start":409,"line_end":409,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21007,"byte_end":21030,"line_start":410,"line_end":410,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21035,"byte_end":21058,"line_start":411,"line_end":411,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21063,"byte_end":21086,"line_start":412,"line_end":412,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21091,"byte_end":21094,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in map.iter() {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21099,"byte_end":21133,"line_start":414,"line_end":414,"column_start":5,"column_end":39}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21138,"byte_end":21184,"line_start":415,"line_end":415,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21189,"byte_end":21194,"line_start":416,"line_end":416,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21199,"byte_end":21206,"line_start":417,"line_end":417,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21211,"byte_end":21220,"line_start":418,"line_end":418,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22101,"byte_end":22109,"line_start":453,"line_end":453,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<HashMap<K, V, S>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order,\n with mutable references to the values.\n The iterator element type is `(&'a K, &'a mut V)`.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order,","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21471,"byte_end":21535,"line_start":429,"line_end":429,"column_start":5,"column_end":69}},{"value":"/ with mutable references to the values.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21540,"byte_end":21582,"line_start":430,"line_end":430,"column_start":5,"column_end":47}},{"value":"/ The iterator element type is `(&'a K, &'a mut V)`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21587,"byte_end":21641,"line_start":431,"line_end":431,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21646,"byte_end":21649,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21654,"byte_end":21668,"line_start":433,"line_end":433,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21673,"byte_end":21676,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21681,"byte_end":21688,"line_start":435,"line_end":435,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21693,"byte_end":21720,"line_start":436,"line_end":436,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21725,"byte_end":21728,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21733,"byte_end":21766,"line_start":438,"line_end":438,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21771,"byte_end":21794,"line_start":439,"line_end":439,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21799,"byte_end":21822,"line_start":440,"line_end":440,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21827,"byte_end":21850,"line_start":441,"line_end":441,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21855,"byte_end":21858,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ // Update all values","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21863,"byte_end":21887,"line_start":443,"line_end":443,"column_start":5,"column_end":29}},{"value":"/ for (_, val) in map.iter_mut() {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21892,"byte_end":21928,"line_start":444,"line_end":444,"column_start":5,"column_end":41}},{"value":"/     *val *= 2;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21933,"byte_end":21951,"line_start":445,"line_end":445,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21956,"byte_end":21961,"line_start":446,"line_end":446,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21966,"byte_end":21969,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in &map {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":21974,"byte_end":22002,"line_start":448,"line_end":448,"column_start":5,"column_end":33}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22007,"byte_end":22053,"line_start":449,"line_end":449,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22058,"byte_end":22063,"line_start":450,"line_end":450,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22068,"byte_end":22075,"line_start":451,"line_end":451,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22080,"byte_end":22089,"line_start":452,"line_end":452,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22756,"byte_end":22759,"line_start":482,"line_end":482,"column_start":12,"column_end":15},"name":"len","qualname":"<HashMap<K, V, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the map.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the map.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22459,"byte_end":22505,"line_start":469,"line_end":469,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22510,"byte_end":22513,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22518,"byte_end":22532,"line_start":471,"line_end":471,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22537,"byte_end":22540,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22545,"byte_end":22552,"line_start":473,"line_end":473,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22557,"byte_end":22584,"line_start":474,"line_end":474,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22589,"byte_end":22592,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22597,"byte_end":22628,"line_start":476,"line_end":476,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.len(), 0);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22633,"byte_end":22660,"line_start":477,"line_end":477,"column_start":5,"column_end":32}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22665,"byte_end":22686,"line_start":478,"line_end":478,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(a.len(), 1);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22691,"byte_end":22718,"line_start":479,"line_end":479,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22723,"byte_end":22730,"line_start":480,"line_end":480,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22735,"byte_end":22744,"line_start":481,"line_end":481,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23115,"byte_end":23123,"line_start":499,"line_end":499,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashMap<K, V, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the map contains no elements.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22814,"byte_end":22865,"line_start":486,"line_end":486,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22870,"byte_end":22873,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22878,"byte_end":22892,"line_start":488,"line_end":488,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22897,"byte_end":22900,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22905,"byte_end":22912,"line_start":490,"line_end":490,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22917,"byte_end":22944,"line_start":491,"line_end":491,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22949,"byte_end":22952,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22957,"byte_end":22988,"line_start":493,"line_end":493,"column_start":5,"column_end":36}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":22993,"byte_end":23019,"line_start":494,"line_end":494,"column_start":5,"column_end":31}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23024,"byte_end":23045,"line_start":495,"line_end":495,"column_start":5,"column_end":26}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23050,"byte_end":23077,"line_start":496,"line_end":496,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23082,"byte_end":23089,"line_start":497,"line_end":497,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23094,"byte_end":23103,"line_start":498,"line_end":498,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23681,"byte_end":23686,"line_start":523,"line_end":523,"column_start":12,"column_end":17},"name":"drain","qualname":"<HashMap<K, V, S>>::drain","value":"pub fn drain(&mut Self) -> Drain<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, returning all key-value pairs as an iterator. Keeps the\n allocated memory for reuse.","sig":null,"attributes":[{"value":"/ Clears the map, returning all key-value pairs as an iterator. Keeps the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23176,"byte_end":23251,"line_start":503,"line_end":503,"column_start":5,"column_end":80}},{"value":"/ allocated memory for reuse.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23256,"byte_end":23287,"line_start":504,"line_end":504,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23292,"byte_end":23295,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23300,"byte_end":23314,"line_start":506,"line_end":506,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23319,"byte_end":23322,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23327,"byte_end":23334,"line_start":508,"line_end":508,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23339,"byte_end":23366,"line_start":509,"line_end":509,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23371,"byte_end":23374,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23379,"byte_end":23410,"line_start":511,"line_end":511,"column_start":5,"column_end":36}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23415,"byte_end":23436,"line_start":512,"line_end":512,"column_start":5,"column_end":26}},{"value":"/ a.insert(2, \"b\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23441,"byte_end":23462,"line_start":513,"line_end":513,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23467,"byte_end":23470,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ for (k, v) in a.drain().take(1) {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23475,"byte_end":23512,"line_start":515,"line_end":515,"column_start":5,"column_end":42}},{"value":"/     assert!(k == 1 || k == 2);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23517,"byte_end":23551,"line_start":516,"line_end":516,"column_start":5,"column_end":39}},{"value":"/     assert!(v == \"a\" || v == \"b\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23556,"byte_end":23594,"line_start":517,"line_end":517,"column_start":5,"column_end":43}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23599,"byte_end":23604,"line_start":518,"line_end":518,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23609,"byte_end":23612,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23617,"byte_end":23643,"line_start":520,"line_end":520,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23648,"byte_end":23655,"line_start":521,"line_end":521,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23660,"byte_end":23669,"line_start":522,"line_end":522,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24223,"byte_end":24228,"line_start":546,"line_end":546,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashMap<K, V, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all key-value pairs. Keeps the allocated memory\n for reuse.","sig":null,"attributes":[{"value":"/ Clears the map, removing all key-value pairs. Keeps the allocated memory","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23891,"byte_end":23967,"line_start":532,"line_end":532,"column_start":5,"column_end":81}},{"value":"/ for reuse.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23972,"byte_end":23986,"line_start":533,"line_end":533,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23991,"byte_end":23994,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":23999,"byte_end":24013,"line_start":535,"line_end":535,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24018,"byte_end":24021,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24026,"byte_end":24033,"line_start":537,"line_end":537,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24038,"byte_end":24065,"line_start":538,"line_end":538,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24070,"byte_end":24073,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24078,"byte_end":24109,"line_start":540,"line_end":540,"column_start":5,"column_end":36}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24114,"byte_end":24135,"line_start":541,"line_end":541,"column_start":5,"column_end":26}},{"value":"/ a.clear();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24140,"byte_end":24154,"line_start":542,"line_end":542,"column_start":5,"column_end":19}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24159,"byte_end":24185,"line_start":543,"line_end":543,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24190,"byte_end":24197,"line_start":544,"line_end":544,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24202,"byte_end":24211,"line_start":545,"line_end":545,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24915,"byte_end":24922,"line_start":574,"line_end":574,"column_start":12,"column_end":19},"name":"reserve","qualname":"<HashMap<K, V, S>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the `HashMap`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24360,"byte_end":24436,"line_start":556,"line_end":556,"column_start":5,"column_end":81}},{"value":"/ in the `HashMap`. The collection may reserve more space to avoid","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24441,"byte_end":24509,"line_start":557,"line_end":557,"column_start":5,"column_end":73}},{"value":"/ frequent reallocations.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24514,"byte_end":24541,"line_start":558,"line_end":558,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24546,"byte_end":24549,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24554,"byte_end":24566,"line_start":560,"line_end":560,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24571,"byte_end":24574,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ Panics if the new allocation size overflows [`usize`].","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24579,"byte_end":24637,"line_start":562,"line_end":562,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24642,"byte_end":24645,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ [`usize`]: https://doc.rust-lang.org/std/primitive.usize.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24650,"byte_end":24715,"line_start":564,"line_end":564,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24720,"byte_end":24723,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24728,"byte_end":24742,"line_start":566,"line_end":566,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24747,"byte_end":24750,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24755,"byte_end":24762,"line_start":568,"line_end":568,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24767,"byte_end":24794,"line_start":569,"line_end":569,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, i32> = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24799,"byte_end":24852,"line_start":570,"line_end":570,"column_start":5,"column_end":58}},{"value":"/ map.reserve(10);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24857,"byte_end":24877,"line_start":571,"line_end":571,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24882,"byte_end":24889,"line_start":572,"line_end":572,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24894,"byte_end":24903,"line_start":573,"line_end":573,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":25700,"byte_end":25711,"line_start":597,"line_end":597,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<HashMap<K, V, S>>::try_reserve","value":"pub fn try_reserve(&mut Self, usize) -> Result<(), CollectionAllocErr>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `HashMap<K,V>`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":25101,"byte_end":25185,"line_start":580,"line_end":580,"column_start":5,"column_end":89}},{"value":"/ in the given `HashMap<K,V>`. The collection may reserve more space to avoid","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":25190,"byte_end":25269,"line_start":581,"line_end":581,"column_start":5,"column_end":84}},{"value":"/ frequent reallocations.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":25274,"byte_end":25301,"line_start":582,"line_end":582,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":25306,"byte_end":25309,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":25314,"byte_end":25326,"line_start":584,"line_end":584,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":25331,"byte_end":25334,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":25339,"byte_end":25419,"line_start":586,"line_end":586,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":25424,"byte_end":25440,"line_start":587,"line_end":587,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":25445,"byte_end":25448,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":25453,"byte_end":25467,"line_start":589,"line_end":589,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":25472,"byte_end":25475,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":25480,"byte_end":25487,"line_start":591,"line_end":591,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":25492,"byte_end":25519,"line_start":592,"line_end":592,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, isize> = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":25524,"byte_end":25579,"line_start":593,"line_end":593,"column_start":5,"column_end":60}},{"value":"/ map.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":25584,"byte_end":25662,"line_start":594,"line_end":594,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":25667,"byte_end":25674,"line_start":595,"line_end":595,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":25679,"byte_end":25688,"line_start":596,"line_end":596,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26498,"byte_end":26511,"line_start":620,"line_end":620,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<HashMap<K, V, S>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the map as much as possible. It will drop\n down as much as possible while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the map as much as possible. It will drop","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":25927,"byte_end":25996,"line_start":603,"line_end":603,"column_start":5,"column_end":74}},{"value":"/ down as much as possible while maintaining the internal rules","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26001,"byte_end":26066,"line_start":604,"line_end":604,"column_start":5,"column_end":70}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26071,"byte_end":26144,"line_start":605,"line_end":605,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26149,"byte_end":26152,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26157,"byte_end":26171,"line_start":607,"line_end":607,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26176,"byte_end":26179,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26184,"byte_end":26191,"line_start":609,"line_end":609,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26196,"byte_end":26223,"line_start":610,"line_end":610,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26228,"byte_end":26231,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26236,"byte_end":26301,"line_start":612,"line_end":612,"column_start":5,"column_end":70}},{"value":"/ map.insert(1, 2);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26306,"byte_end":26327,"line_start":613,"line_end":613,"column_start":5,"column_end":26}},{"value":"/ map.insert(3, 4);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26332,"byte_end":26353,"line_start":614,"line_end":614,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26358,"byte_end":26393,"line_start":615,"line_end":615,"column_start":5,"column_end":40}},{"value":"/ map.shrink_to_fit();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26398,"byte_end":26422,"line_start":616,"line_end":616,"column_start":5,"column_end":29}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26427,"byte_end":26460,"line_start":617,"line_end":617,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26465,"byte_end":26472,"line_start":618,"line_end":618,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26477,"byte_end":26486,"line_start":619,"line_end":619,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27399,"byte_end":27408,"line_start":647,"line_end":647,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<HashMap<K, V, S>>::shrink_to","value":"pub fn shrink_to(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the map with a lower limit. It will drop\n down no lower than the supplied limit while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the map with a lower limit. It will drop","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26651,"byte_end":26719,"line_start":625,"line_end":625,"column_start":5,"column_end":73}},{"value":"/ down no lower than the supplied limit while maintaining the internal rules","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26724,"byte_end":26802,"line_start":626,"line_end":626,"column_start":5,"column_end":83}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26807,"byte_end":26880,"line_start":627,"line_end":627,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26885,"byte_end":26888,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ Panics if the current capacity is smaller than the supplied","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26893,"byte_end":26956,"line_start":629,"line_end":629,"column_start":5,"column_end":68}},{"value":"/ minimum capacity.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26961,"byte_end":26982,"line_start":630,"line_end":630,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26987,"byte_end":26990,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":26995,"byte_end":27009,"line_start":632,"line_end":632,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27014,"byte_end":27017,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27022,"byte_end":27029,"line_start":634,"line_end":634,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27034,"byte_end":27061,"line_start":635,"line_end":635,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27066,"byte_end":27069,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27074,"byte_end":27139,"line_start":637,"line_end":637,"column_start":5,"column_end":70}},{"value":"/ map.insert(1, 2);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27144,"byte_end":27165,"line_start":638,"line_end":638,"column_start":5,"column_end":26}},{"value":"/ map.insert(3, 4);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27170,"byte_end":27191,"line_start":639,"line_end":639,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27196,"byte_end":27231,"line_start":640,"line_end":640,"column_start":5,"column_end":40}},{"value":"/ map.shrink_to(10);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27236,"byte_end":27258,"line_start":641,"line_end":641,"column_start":5,"column_end":27}},{"value":"/ assert!(map.capacity() >= 10);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27263,"byte_end":27297,"line_start":642,"line_end":642,"column_start":5,"column_end":39}},{"value":"/ map.shrink_to(0);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27302,"byte_end":27323,"line_start":643,"line_end":643,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27328,"byte_end":27361,"line_start":644,"line_end":644,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27366,"byte_end":27373,"line_start":645,"line_end":645,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27378,"byte_end":27387,"line_start":646,"line_end":646,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":28293,"byte_end":28298,"line_start":678,"line_end":678,"column_start":12,"column_end":17},"name":"entry","qualname":"<HashMap<K, V, S>>::entry","value":"pub fn entry(&mut Self, K) -> Entry<, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Gets the given key's corresponding entry in the map for in-place manipulation.","sig":null,"attributes":[{"value":"/ Gets the given key's corresponding entry in the map for in-place manipulation.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27718,"byte_end":27800,"line_start":658,"line_end":658,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27805,"byte_end":27808,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27813,"byte_end":27827,"line_start":660,"line_end":660,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27832,"byte_end":27835,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27840,"byte_end":27847,"line_start":662,"line_end":662,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27852,"byte_end":27879,"line_start":663,"line_end":663,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27884,"byte_end":27887,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ let mut letters = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27892,"byte_end":27929,"line_start":665,"line_end":665,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27934,"byte_end":27937,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ for ch in \"a short treatise on fungi\".chars() {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27942,"byte_end":27993,"line_start":667,"line_end":667,"column_start":5,"column_end":56}},{"value":"/     let counter = letters.entry(ch).or_insert(0);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":27998,"byte_end":28051,"line_start":668,"line_end":668,"column_start":5,"column_end":58}},{"value":"/     *counter += 1;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":28056,"byte_end":28078,"line_start":669,"line_end":669,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":28083,"byte_end":28088,"line_start":670,"line_end":670,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":28093,"byte_end":28096,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(letters[&'s'], 2);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":28101,"byte_end":28134,"line_start":672,"line_end":672,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters[&'t'], 3);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":28139,"byte_end":28172,"line_start":673,"line_end":673,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters[&'u'], 1);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":28177,"byte_end":28210,"line_start":674,"line_end":674,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters.get(&'y'), None);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":28215,"byte_end":28255,"line_start":675,"line_end":675,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":28260,"byte_end":28267,"line_start":676,"line_end":676,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":28272,"byte_end":28281,"line_start":677,"line_end":677,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29423,"byte_end":29426,"line_start":715,"line_end":715,"column_start":12,"column_end":15},"name":"get","qualname":"<HashMap<K, V, S>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&V> where K: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":28775,"byte_end":28837,"line_start":695,"line_end":695,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":28842,"byte_end":28845,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":28850,"byte_end":28913,"line_start":697,"line_end":697,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":28918,"byte_end":28985,"line_start":698,"line_end":698,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":28990,"byte_end":29007,"line_start":699,"line_end":699,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29012,"byte_end":29015,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29020,"byte_end":29079,"line_start":701,"line_end":701,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29084,"byte_end":29148,"line_start":702,"line_end":702,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29153,"byte_end":29156,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29161,"byte_end":29175,"line_start":704,"line_end":704,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29180,"byte_end":29183,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29188,"byte_end":29195,"line_start":706,"line_end":706,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29200,"byte_end":29227,"line_start":707,"line_end":707,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29232,"byte_end":29235,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29240,"byte_end":29273,"line_start":709,"line_end":709,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29278,"byte_end":29301,"line_start":710,"line_end":710,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get(&1), Some(&\"a\"));","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29306,"byte_end":29346,"line_start":711,"line_end":711,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map.get(&2), None);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29351,"byte_end":29385,"line_start":712,"line_end":712,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29390,"byte_end":29397,"line_start":713,"line_end":713,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29402,"byte_end":29411,"line_start":714,"line_end":714,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":30269,"byte_end":30282,"line_start":743,"line_end":743,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<HashMap<K, V, S>>::get_key_value","value":"pub fn get_key_value<Q: ?Sized>(&Self, &Q) -> Option<(&K, &V)> where\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns the key-value pair corresponding to the supplied key.","sig":null,"attributes":[{"value":"/ Returns the key-value pair corresponding to the supplied key.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29583,"byte_end":29648,"line_start":723,"line_end":723,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29653,"byte_end":29656,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ The supplied key may be any borrowed form of the map's key type, but","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29661,"byte_end":29733,"line_start":725,"line_end":725,"column_start":5,"column_end":77}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29738,"byte_end":29805,"line_start":726,"line_end":726,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29810,"byte_end":29827,"line_start":727,"line_end":727,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29832,"byte_end":29835,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29840,"byte_end":29899,"line_start":729,"line_end":729,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29904,"byte_end":29968,"line_start":730,"line_end":730,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29973,"byte_end":29976,"line_start":731,"line_end":731,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":29981,"byte_end":29995,"line_start":732,"line_end":732,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":30000,"byte_end":30003,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":30008,"byte_end":30015,"line_start":734,"line_end":734,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":30020,"byte_end":30047,"line_start":735,"line_end":735,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":30052,"byte_end":30055,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":30060,"byte_end":30093,"line_start":737,"line_end":737,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":30098,"byte_end":30121,"line_start":738,"line_end":738,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":30126,"byte_end":30182,"line_start":739,"line_end":739,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(map.get_key_value(&2), None);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":30187,"byte_end":30231,"line_start":740,"line_end":740,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":30236,"byte_end":30243,"line_start":741,"line_end":741,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":30248,"byte_end":30257,"line_start":742,"line_end":742,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31323,"byte_end":31335,"line_start":777,"line_end":777,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<HashMap<K, V, S>>::contains_key","value":"pub fn contains_key<Q: ?Sized>(&Self, &Q) -> bool where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains a value for the specified key.","sig":null,"attributes":[{"value":"/ Returns `true` if the map contains a value for the specified key.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":30655,"byte_end":30724,"line_start":757,"line_end":757,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":30729,"byte_end":30732,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":30737,"byte_end":30800,"line_start":759,"line_end":759,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":30805,"byte_end":30872,"line_start":760,"line_end":760,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":30877,"byte_end":30894,"line_start":761,"line_end":761,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":30899,"byte_end":30902,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":30907,"byte_end":30966,"line_start":763,"line_end":763,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":30971,"byte_end":31035,"line_start":764,"line_end":764,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31040,"byte_end":31043,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31048,"byte_end":31062,"line_start":766,"line_end":766,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31067,"byte_end":31070,"line_start":767,"line_end":767,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31075,"byte_end":31082,"line_start":768,"line_end":768,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31087,"byte_end":31114,"line_start":769,"line_end":769,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31119,"byte_end":31122,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31127,"byte_end":31160,"line_start":771,"line_end":771,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31165,"byte_end":31188,"line_start":772,"line_end":772,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.contains_key(&1), true);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31193,"byte_end":31236,"line_start":773,"line_end":773,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(map.contains_key(&2), false);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31241,"byte_end":31285,"line_start":774,"line_end":774,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31290,"byte_end":31297,"line_start":775,"line_end":775,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31302,"byte_end":31311,"line_start":776,"line_end":776,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":32151,"byte_end":32158,"line_start":807,"line_end":807,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<HashMap<K, V, S>>::get_mut","value":"pub fn get_mut<Q: ?Sized>(&mut Self, &Q) -> Option<&mut V> where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31470,"byte_end":31540,"line_start":785,"line_end":785,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31545,"byte_end":31548,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31553,"byte_end":31616,"line_start":787,"line_end":787,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31621,"byte_end":31688,"line_start":788,"line_end":788,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31693,"byte_end":31710,"line_start":789,"line_end":789,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31715,"byte_end":31718,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31723,"byte_end":31782,"line_start":791,"line_end":791,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31787,"byte_end":31851,"line_start":792,"line_end":792,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31856,"byte_end":31859,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31864,"byte_end":31878,"line_start":794,"line_end":794,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31883,"byte_end":31886,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31891,"byte_end":31898,"line_start":796,"line_end":796,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31903,"byte_end":31930,"line_start":797,"line_end":797,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31935,"byte_end":31938,"line_start":798,"line_end":798,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31943,"byte_end":31976,"line_start":799,"line_end":799,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":31981,"byte_end":32004,"line_start":800,"line_end":800,"column_start":5,"column_end":28}},{"value":"/ if let Some(x) = map.get_mut(&1) {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":32009,"byte_end":32047,"line_start":801,"line_end":801,"column_start":5,"column_end":43}},{"value":"/     *x = \"b\";","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":32052,"byte_end":32069,"line_start":802,"line_end":802,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":32074,"byte_end":32079,"line_start":803,"line_end":803,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[&1], \"b\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":32084,"byte_end":32113,"line_start":804,"line_end":804,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":32118,"byte_end":32125,"line_start":805,"line_end":805,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":32130,"byte_end":32139,"line_start":806,"line_end":806,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":33394,"byte_end":33400,"line_start":844,"line_end":844,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashMap<K, V, S>>::insert","value":"pub fn insert(&mut Self, K, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":32454,"byte_end":32496,"line_start":818,"line_end":818,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":32501,"byte_end":32504,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ If the map did not have this key present, [`None`] is returned.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":32509,"byte_end":32576,"line_start":820,"line_end":820,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":32581,"byte_end":32584,"line_start":821,"line_end":821,"column_start":5,"column_end":8}},{"value":"/ If the map did have this key present, the value is updated, and the old","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":32589,"byte_end":32664,"line_start":822,"line_end":822,"column_start":5,"column_end":80}},{"value":"/ value is returned. The key is not updated, though; this matters for","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":32669,"byte_end":32740,"line_start":823,"line_end":823,"column_start":5,"column_end":76}},{"value":"/ types that can be `==` without being identical. See the [module-level","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":32745,"byte_end":32818,"line_start":824,"line_end":824,"column_start":5,"column_end":78}},{"value":"/ documentation] for more.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":32823,"byte_end":32851,"line_start":825,"line_end":825,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":32856,"byte_end":32859,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ [`None`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.None","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":32864,"byte_end":32944,"line_start":827,"line_end":827,"column_start":5,"column_end":85}},{"value":"/ [module-level documentation]: index.html#insert-and-complex-keys","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":32949,"byte_end":33017,"line_start":828,"line_end":828,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":33022,"byte_end":33025,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":33030,"byte_end":33044,"line_start":830,"line_end":830,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":33049,"byte_end":33052,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":33057,"byte_end":33064,"line_start":832,"line_end":832,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":33069,"byte_end":33096,"line_start":833,"line_end":833,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":33101,"byte_end":33104,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":33109,"byte_end":33142,"line_start":835,"line_end":835,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(map.insert(37, \"a\"), None);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":33147,"byte_end":33189,"line_start":836,"line_end":836,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.is_empty(), false);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":33194,"byte_end":33232,"line_start":837,"line_end":837,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":33237,"byte_end":33240,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ map.insert(37, \"b\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":33245,"byte_end":33269,"line_start":839,"line_end":839,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(map.insert(37, \"c\"), Some(\"b\"));","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":33274,"byte_end":33321,"line_start":840,"line_end":840,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[&37], \"c\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":33326,"byte_end":33356,"line_start":841,"line_end":841,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":33361,"byte_end":33368,"line_start":842,"line_end":842,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":33373,"byte_end":33382,"line_start":843,"line_end":843,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34582,"byte_end":34588,"line_start":879,"line_end":879,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashMap<K, V, S>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key\n was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the value at the key if the key","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":33883,"byte_end":33956,"line_start":858,"line_end":858,"column_start":5,"column_end":78}},{"value":"/ was previously in the map.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":33961,"byte_end":33991,"line_start":859,"line_end":859,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":33996,"byte_end":33999,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34004,"byte_end":34067,"line_start":861,"line_end":861,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34072,"byte_end":34139,"line_start":862,"line_end":862,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34144,"byte_end":34161,"line_start":863,"line_end":863,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34166,"byte_end":34169,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34174,"byte_end":34233,"line_start":865,"line_end":865,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34238,"byte_end":34302,"line_start":866,"line_end":866,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34307,"byte_end":34310,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34315,"byte_end":34329,"line_start":868,"line_end":868,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34334,"byte_end":34337,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34342,"byte_end":34349,"line_start":870,"line_end":870,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34354,"byte_end":34381,"line_start":871,"line_end":871,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34386,"byte_end":34389,"line_start":872,"line_end":872,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34394,"byte_end":34427,"line_start":873,"line_end":873,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34432,"byte_end":34455,"line_start":874,"line_end":874,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove(&1), Some(\"a\"));","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34460,"byte_end":34502,"line_start":875,"line_end":875,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34507,"byte_end":34544,"line_start":876,"line_end":876,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34549,"byte_end":34556,"line_start":877,"line_end":877,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34561,"byte_end":34570,"line_start":878,"line_end":878,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":35495,"byte_end":35507,"line_start":910,"line_end":910,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<HashMap<K, V, S>>::remove_entry","value":"pub fn remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the stored key and value if the\n key was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the stored key and value if the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34747,"byte_end":34820,"line_start":887,"line_end":887,"column_start":5,"column_end":78}},{"value":"/ key was previously in the map.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34825,"byte_end":34859,"line_start":888,"line_end":888,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34864,"byte_end":34867,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34872,"byte_end":34935,"line_start":890,"line_end":890,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":34940,"byte_end":35007,"line_start":891,"line_end":891,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":35012,"byte_end":35029,"line_start":892,"line_end":892,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":35034,"byte_end":35037,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":35042,"byte_end":35101,"line_start":894,"line_end":894,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":35106,"byte_end":35170,"line_start":895,"line_end":895,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":35175,"byte_end":35178,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":35183,"byte_end":35197,"line_start":897,"line_end":897,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":35202,"byte_end":35205,"line_start":898,"line_end":898,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":35210,"byte_end":35217,"line_start":899,"line_end":899,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":35222,"byte_end":35249,"line_start":900,"line_end":900,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":35254,"byte_end":35257,"line_start":901,"line_end":901,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":35262,"byte_end":35279,"line_start":902,"line_end":902,"column_start":5,"column_end":22}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":35284,"byte_end":35317,"line_start":903,"line_end":903,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":35322,"byte_end":35345,"line_start":904,"line_end":904,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove_entry(&1), Some((1, \"a\")));","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":35350,"byte_end":35403,"line_start":905,"line_end":905,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":35408,"byte_end":35445,"line_start":906,"line_end":906,"column_start":5,"column_end":42}},{"value":"/ # }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":35450,"byte_end":35457,"line_start":907,"line_end":907,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":35462,"byte_end":35469,"line_start":908,"line_end":908,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":35474,"byte_end":35483,"line_start":909,"line_end":909,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":36349,"byte_end":36355,"line_start":939,"line_end":939,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashMap<K, V, S>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&K, &mut V) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":35930,"byte_end":35987,"line_start":926,"line_end":926,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":35992,"byte_end":35995,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all pairs `(k, v)` such that `f(&k,&mut v)` returns `false`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":36000,"byte_end":36087,"line_start":928,"line_end":928,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":36092,"byte_end":36095,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":36100,"byte_end":36114,"line_start":930,"line_end":930,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":36119,"byte_end":36122,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":36127,"byte_end":36134,"line_start":932,"line_end":932,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":36139,"byte_end":36166,"line_start":933,"line_end":933,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":36171,"byte_end":36174,"line_start":934,"line_end":934,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = (0..8).map(|x|(x, x*10)).collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":36179,"byte_end":36251,"line_start":935,"line_end":935,"column_start":5,"column_end":77}},{"value":"/ map.retain(|&k, _| k % 2 == 0);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":36256,"byte_end":36291,"line_start":936,"line_end":936,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(map.len(), 4);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":36296,"byte_end":36325,"line_start":937,"line_end":937,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":36330,"byte_end":36337,"line_start":938,"line_end":938,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":38866,"byte_end":38879,"line_start":993,"line_end":993,"column_start":12,"column_end":25},"name":"raw_entry_mut","qualname":"<HashMap<K, V, S>>::raw_entry_mut","value":"pub fn raw_entry_mut(&mut Self) -> RawEntryBuilderMut<, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a raw entry builder for the HashMap.","sig":null,"attributes":[{"value":"/ Creates a raw entry builder for the HashMap.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":36961,"byte_end":37009,"line_start":961,"line_end":961,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":37014,"byte_end":37017,"line_start":962,"line_end":962,"column_start":5,"column_end":8}},{"value":"/ Raw entries provide the lowest level of control for searching and","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":37022,"byte_end":37091,"line_start":963,"line_end":963,"column_start":5,"column_end":74}},{"value":"/ manipulating a map. They must be manually initialized with a hash and","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":37096,"byte_end":37169,"line_start":964,"line_end":964,"column_start":5,"column_end":78}},{"value":"/ then manually searched. After this, insertions into a vacant entry","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":37174,"byte_end":37244,"line_start":965,"line_end":965,"column_start":5,"column_end":75}},{"value":"/ still require an owned key to be provided.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":37249,"byte_end":37295,"line_start":966,"line_end":966,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":37300,"byte_end":37303,"line_start":967,"line_end":967,"column_start":5,"column_end":8}},{"value":"/ Raw entries are useful for such exotic situations as:","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":37308,"byte_end":37365,"line_start":968,"line_end":968,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":37370,"byte_end":37373,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ * Hash memoization","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":37378,"byte_end":37400,"line_start":970,"line_end":970,"column_start":5,"column_end":27}},{"value":"/ * Deferring the creation of an owned key until it is known to be required","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":37405,"byte_end":37482,"line_start":971,"line_end":971,"column_start":5,"column_end":82}},{"value":"/ * Using a search key that doesn't work with the Borrow trait","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":37487,"byte_end":37551,"line_start":972,"line_end":972,"column_start":5,"column_end":69}},{"value":"/ * Using custom comparison logic without newtype wrappers","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":37556,"byte_end":37616,"line_start":973,"line_end":973,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":37621,"byte_end":37624,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ Because raw entries provide much more low-level control, it's much easier","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":37629,"byte_end":37706,"line_start":975,"line_end":975,"column_start":5,"column_end":82}},{"value":"/ to put the HashMap into an inconsistent state which, while memory-safe,","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":37711,"byte_end":37786,"line_start":976,"line_end":976,"column_start":5,"column_end":80}},{"value":"/ will cause the map to produce seemingly random results. Higher-level and","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":37791,"byte_end":37867,"line_start":977,"line_end":977,"column_start":5,"column_end":81}},{"value":"/ more foolproof APIs like `entry` should be preferred when possible.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":37872,"byte_end":37943,"line_start":978,"line_end":978,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":37948,"byte_end":37951,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ In particular, the hash used to initialized the raw entry must still be","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":37956,"byte_end":38031,"line_start":980,"line_end":980,"column_start":5,"column_end":80}},{"value":"/ consistent with the hash of the key that is ultimately stored in the entry.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":38036,"byte_end":38115,"line_start":981,"line_end":981,"column_start":5,"column_end":84}},{"value":"/ This is because implementations of HashMap may need to recompute hashes","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":38120,"byte_end":38195,"line_start":982,"line_end":982,"column_start":5,"column_end":80}},{"value":"/ when resizing, at which point only the keys are available.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":38200,"byte_end":38262,"line_start":983,"line_end":983,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":38267,"byte_end":38270,"line_start":984,"line_end":984,"column_start":5,"column_end":8}},{"value":"/ Raw entries give mutable access to the keys. This must not be used","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":38275,"byte_end":38345,"line_start":985,"line_end":985,"column_start":5,"column_end":75}},{"value":"/ to modify how the key would compare or hash, as the map will not re-evaluate","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":38350,"byte_end":38430,"line_start":986,"line_end":986,"column_start":5,"column_end":85}},{"value":"/ where the key should go, meaning the keys may become \"lost\" if their","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":38435,"byte_end":38507,"line_start":987,"line_end":987,"column_start":5,"column_end":77}},{"value":"/ location does not reflect their state. For instance, if you change a key","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":38512,"byte_end":38588,"line_start":988,"line_end":988,"column_start":5,"column_end":81}},{"value":"/ so that the map now contains keys which compare equal, search may start","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":38593,"byte_end":38668,"line_start":989,"line_end":989,"column_start":5,"column_end":80}},{"value":"/ acting erratically, with two keys randomly masking each other. Implementations","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":38673,"byte_end":38755,"line_start":990,"line_end":990,"column_start":5,"column_end":87}},{"value":"/ are free to assume this doesn't happen (within the limits of memory-safety).","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":38760,"byte_end":38840,"line_start":991,"line_end":991,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":38845,"byte_end":38854,"line_start":992,"line_end":992,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":39682,"byte_end":39691,"line_start":1013,"line_end":1013,"column_start":12,"column_end":21},"name":"raw_entry","qualname":"<HashMap<K, V, S>>::raw_entry","value":"pub fn raw_entry(&Self) -> RawEntryBuilder<, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a raw immutable entry builder for the HashMap.","sig":null,"attributes":[{"value":"/ Creates a raw immutable entry builder for the HashMap.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":38980,"byte_end":39038,"line_start":997,"line_end":997,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":39043,"byte_end":39046,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ Raw entries provide the lowest level of control for searching and","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":39051,"byte_end":39120,"line_start":999,"line_end":999,"column_start":5,"column_end":74}},{"value":"/ manipulating a map. They must be manually initialized with a hash and","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":39125,"byte_end":39198,"line_start":1000,"line_end":1000,"column_start":5,"column_end":78}},{"value":"/ then manually searched.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":39203,"byte_end":39230,"line_start":1001,"line_end":1001,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":39235,"byte_end":39238,"line_start":1002,"line_end":1002,"column_start":5,"column_end":8}},{"value":"/ This is useful for","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":39243,"byte_end":39265,"line_start":1003,"line_end":1003,"column_start":5,"column_end":27}},{"value":"/ * Hash memoization","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":39270,"byte_end":39292,"line_start":1004,"line_end":1004,"column_start":5,"column_end":27}},{"value":"/ * Using a search key that doesn't work with the Borrow trait","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":39297,"byte_end":39361,"line_start":1005,"line_end":1005,"column_start":5,"column_end":69}},{"value":"/ * Using custom comparison logic without newtype wrappers","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":39366,"byte_end":39426,"line_start":1006,"line_end":1006,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":39431,"byte_end":39434,"line_start":1007,"line_end":1007,"column_start":5,"column_end":8}},{"value":"/ Unless you are in such a situation, higher-level and more foolproof APIs like","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":39439,"byte_end":39520,"line_start":1008,"line_end":1008,"column_start":5,"column_end":86}},{"value":"/ `get` should be preferred.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":39525,"byte_end":39555,"line_start":1009,"line_end":1009,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":39560,"byte_end":39563,"line_start":1010,"line_end":1010,"column_start":5,"column_end":8}},{"value":"/ Immutable raw entries have very limited use; you might instead want `raw_entry_mut`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":39568,"byte_end":39656,"line_start":1011,"line_end":1011,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":39661,"byte_end":39670,"line_start":1012,"line_end":1012,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":41389,"byte_end":41393,"line_start":1090,"line_end":1090,"column_start":12,"column_end":16},"name":"Iter","qualname":"::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":203}],"decl_id":null,"docs":" An iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the entries of a `HashMap`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":41134,"byte_end":41182,"line_start":1083,"line_end":1083,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":41183,"byte_end":41186,"line_start":1084,"line_end":1084,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`HashMap`]. See its","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":41187,"byte_end":41262,"line_start":1085,"line_end":1085,"column_start":1,"column_end":76}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":41263,"byte_end":41290,"line_start":1086,"line_end":1086,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":41291,"byte_end":41294,"line_start":1087,"line_end":1087,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.HashMap.html#method.iter","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":41295,"byte_end":41340,"line_start":1088,"line_end":1088,"column_start":1,"column_end":46}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":41341,"byte_end":41377,"line_start":1089,"line_end":1089,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":212},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":42178,"byte_end":42185,"line_start":1119,"line_end":1119,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":216},{"krate":0,"index":217}],"decl_id":null,"docs":" A mutable iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the entries of a `HashMap`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":41904,"byte_end":41959,"line_start":1112,"line_end":1112,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":41960,"byte_end":41963,"line_start":1113,"line_end":1113,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`HashMap`]. See its","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":41964,"byte_end":42043,"line_start":1114,"line_end":1114,"column_start":1,"column_end":80}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":42044,"byte_end":42071,"line_start":1115,"line_end":1115,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":42072,"byte_end":42075,"line_start":1116,"line_end":1116,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.HashMap.html#method.iter_mut","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":42076,"byte_end":42129,"line_start":1117,"line_end":1117,"column_start":1,"column_end":54}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":42130,"byte_end":42166,"line_start":1118,"line_end":1118,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":222},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":42915,"byte_end":42923,"line_start":1143,"line_end":1143,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":225}],"decl_id":null,"docs":" An owning iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the entries of a `HashMap`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":42588,"byte_end":42643,"line_start":1136,"line_end":1136,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":42644,"byte_end":42647,"line_start":1137,"line_end":1137,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`HashMap`][`HashMap`]","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":42648,"byte_end":42730,"line_start":1138,"line_end":1138,"column_start":1,"column_end":83}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":42731,"byte_end":42806,"line_start":1139,"line_end":1139,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":42807,"byte_end":42810,"line_start":1140,"line_end":1140,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.HashMap.html#method.into_iter","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":42811,"byte_end":42866,"line_start":1141,"line_end":1141,"column_start":1,"column_end":56}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":42867,"byte_end":42903,"line_start":1142,"line_end":1142,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":43483,"byte_end":43487,"line_start":1165,"line_end":1165,"column_start":12,"column_end":16},"name":"Keys","qualname":"::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":234}],"decl_id":null,"docs":" An iterator over the keys of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the keys of a `HashMap`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":43231,"byte_end":43276,"line_start":1158,"line_end":1158,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":43277,"byte_end":43280,"line_start":1159,"line_end":1159,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`keys`] method on [`HashMap`]. See its","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":43281,"byte_end":43356,"line_start":1160,"line_end":1160,"column_start":1,"column_end":76}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":43357,"byte_end":43384,"line_start":1161,"line_end":1161,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":43385,"byte_end":43388,"line_start":1162,"line_end":1162,"column_start":1,"column_end":4}},{"value":"/ [`keys`]: struct.HashMap.html#method.keys","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":43389,"byte_end":43434,"line_start":1163,"line_end":1163,"column_start":1,"column_end":46}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":43435,"byte_end":43471,"line_start":1164,"line_end":1164,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":243},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":44176,"byte_end":44182,"line_start":1192,"line_end":1192,"column_start":12,"column_end":18},"name":"Values","qualname":"::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":247}],"decl_id":null,"docs":" An iterator over the values of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the values of a `HashMap`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":43916,"byte_end":43963,"line_start":1185,"line_end":1185,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":43964,"byte_end":43967,"line_start":1186,"line_end":1186,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values`] method on [`HashMap`]. See its","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":43968,"byte_end":44045,"line_start":1187,"line_end":1187,"column_start":1,"column_end":78}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":44046,"byte_end":44073,"line_start":1188,"line_end":1188,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":44074,"byte_end":44077,"line_start":1189,"line_end":1189,"column_start":1,"column_end":4}},{"value":"/ [`values`]: struct.HashMap.html#method.values","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":44078,"byte_end":44127,"line_start":1190,"line_end":1190,"column_start":1,"column_end":50}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":44128,"byte_end":44164,"line_start":1191,"line_end":1191,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":256},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":44883,"byte_end":44888,"line_start":1219,"line_end":1219,"column_start":12,"column_end":17},"name":"Drain","qualname":"::map::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":260}],"decl_id":null,"docs":" A draining iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ A draining iterator over the entries of a `HashMap`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":44617,"byte_end":44673,"line_start":1212,"line_end":1212,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":44674,"byte_end":44677,"line_start":1213,"line_end":1213,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`HashMap`]. See its","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":44678,"byte_end":44754,"line_start":1214,"line_end":1214,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":44755,"byte_end":44782,"line_start":1215,"line_end":1215,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":44783,"byte_end":44786,"line_start":1216,"line_end":1216,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.HashMap.html#method.drain","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":44787,"byte_end":44834,"line_start":1217,"line_end":1217,"column_start":1,"column_end":48}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":44835,"byte_end":44871,"line_start":1218,"line_end":1218,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":45481,"byte_end":45490,"line_start":1241,"line_end":1241,"column_start":12,"column_end":21},"name":"ValuesMut","qualname":"::map::ValuesMut","value":"ValuesMut {  }","parent":null,"children":[{"krate":0,"index":269}],"decl_id":null,"docs":" A mutable iterator over the values of a `HashMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the values of a `HashMap`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":45202,"byte_end":45256,"line_start":1234,"line_end":1234,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":45257,"byte_end":45260,"line_start":1235,"line_end":1235,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values_mut`] method on [`HashMap`]. See its","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":45261,"byte_end":45342,"line_start":1236,"line_end":1236,"column_start":1,"column_end":82}},{"value":"/ documentation for more.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":45343,"byte_end":45370,"line_start":1237,"line_end":1237,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":45371,"byte_end":45374,"line_start":1238,"line_end":1238,"column_start":1,"column_end":4}},{"value":"/ [`values_mut`]: struct.HashMap.html#method.values_mut","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":45375,"byte_end":45432,"line_start":1239,"line_end":1239,"column_start":1,"column_end":58}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":45433,"byte_end":45469,"line_start":1240,"line_end":1240,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":270},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":45777,"byte_end":45795,"line_start":1250,"line_end":1250,"column_start":12,"column_end":30},"name":"RawEntryBuilderMut","qualname":"::map::RawEntryBuilderMut","value":"RawEntryBuilderMut {  }","parent":null,"children":[{"krate":0,"index":275}],"decl_id":null,"docs":" A builder for computing where in a [`HashMap`] a key-value pair would be stored.","sig":null,"attributes":[{"value":"/ A builder for computing where in a [`HashMap`] a key-value pair would be stored.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":45536,"byte_end":45620,"line_start":1245,"line_end":1245,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":45621,"byte_end":45624,"line_start":1246,"line_end":1246,"column_start":1,"column_end":4}},{"value":"/ See the [`HashMap::raw_entry_mut`] docs for usage examples.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":45625,"byte_end":45688,"line_start":1247,"line_end":1247,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":45689,"byte_end":45692,"line_start":1248,"line_end":1248,"column_start":1,"column_end":4}},{"value":"/ [`HashMap::raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":45693,"byte_end":45765,"line_start":1249,"line_end":1249,"column_start":1,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":281},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":46270,"byte_end":46278,"line_start":1265,"line_end":1265,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::RawEntryMut::Occupied","value":"RawEntryMut::Occupied(RawOccupiedEntryMut)","parent":{"krate":0,"index":276},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":46243,"byte_end":46265,"line_start":1264,"line_end":1264,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":284},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":46339,"byte_end":46345,"line_start":1267,"line_end":1267,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::RawEntryMut::Vacant","value":"RawEntryMut::Vacant(RawVacantEntryMut)","parent":{"krate":0,"index":276},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":46315,"byte_end":46334,"line_start":1266,"line_end":1266,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":276},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":46200,"byte_end":46211,"line_start":1263,"line_end":1263,"column_start":10,"column_end":21},"name":"RawEntryMut","qualname":"::map::RawEntryMut","value":"pub enum RawEntryMut<'a, K: 'a, V: 'a, S: 'a> {\n    Occupied(RawOccupiedEntryMut),\n    Vacant(RawVacantEntryMut),\n}","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":284}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":45849,"byte_end":45929,"line_start":1254,"line_end":1254,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":45930,"byte_end":45933,"line_start":1255,"line_end":1255,"column_start":1,"column_end":4}},{"value":"/ This is a lower-level version of [`Entry`].","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":45934,"byte_end":45981,"line_start":1256,"line_end":1256,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":45982,"byte_end":45985,"line_start":1257,"line_end":1257,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed from the [`raw_entry`] method on [`HashMap`].","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":45986,"byte_end":46062,"line_start":1258,"line_end":1258,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":46063,"byte_end":46066,"line_start":1259,"line_end":1259,"column_start":1,"column_end":4}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":46067,"byte_end":46103,"line_start":1260,"line_end":1260,"column_start":1,"column_end":37}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":46104,"byte_end":46134,"line_start":1261,"line_end":1261,"column_start":1,"column_end":31}},{"value":"/ [`raw_entry`]: struct.HashMap.html#method.raw_entry","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":46135,"byte_end":46190,"line_start":1262,"line_end":1262,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":287},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":46534,"byte_end":46553,"line_start":1274,"line_end":1274,"column_start":12,"column_end":31},"name":"RawOccupiedEntryMut","qualname":"::map::RawOccupiedEntryMut","value":"RawOccupiedEntryMut {  }","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":292}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`RawEntryMut`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `HashMap`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":46382,"byte_end":46431,"line_start":1270,"line_end":1270,"column_start":1,"column_end":50}},{"value":"/ It is part of the [`RawEntryMut`] enum.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":46432,"byte_end":46475,"line_start":1271,"line_end":1271,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":46476,"byte_end":46479,"line_start":1272,"line_end":1272,"column_start":1,"column_end":4}},{"value":"/ [`RawEntryMut`]: enum.RawEntryMut.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":46480,"byte_end":46522,"line_start":1273,"line_end":1273,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":46781,"byte_end":46798,"line_start":1283,"line_end":1283,"column_start":12,"column_end":29},"name":"RawVacantEntryMut","qualname":"::map::RawVacantEntryMut","value":"RawVacantEntryMut {  }","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":299}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`RawEntryMut`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `HashMap`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":46632,"byte_end":46678,"line_start":1279,"line_end":1279,"column_start":1,"column_end":47}},{"value":"/ It is part of the [`RawEntryMut`] enum.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":46679,"byte_end":46722,"line_start":1280,"line_end":1280,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":46723,"byte_end":46726,"line_start":1281,"line_end":1281,"column_start":1,"column_end":4}},{"value":"/ [`RawEntryMut`]: enum.RawEntryMut.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":46727,"byte_end":46769,"line_start":1282,"line_end":1282,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":47108,"byte_end":47123,"line_start":1293,"line_end":1293,"column_start":12,"column_end":27},"name":"RawEntryBuilder","qualname":"::map::RawEntryBuilder","value":"RawEntryBuilder {  }","parent":null,"children":[{"krate":0,"index":305}],"decl_id":null,"docs":" A builder for computing where in a [`HashMap`] a key-value pair would be stored.","sig":null,"attributes":[{"value":"/ A builder for computing where in a [`HashMap`] a key-value pair would be stored.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":46879,"byte_end":46963,"line_start":1288,"line_end":1288,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":46964,"byte_end":46967,"line_start":1289,"line_end":1289,"column_start":1,"column_end":4}},{"value":"/ See the [`HashMap::raw_entry`] docs for usage examples.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":46968,"byte_end":47027,"line_start":1290,"line_end":1290,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":47028,"byte_end":47031,"line_start":1291,"line_end":1291,"column_start":1,"column_end":4}},{"value":"/ [`HashMap::raw_entry`]: struct.HashMap.html#method.raw_entry","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":47032,"byte_end":47096,"line_start":1292,"line_end":1292,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":47372,"byte_end":47380,"line_start":1304,"line_end":1304,"column_start":12,"column_end":20},"name":"from_key","qualname":"<RawEntryBuilderMut>::from_key","value":"pub fn from_key<Q: ?Sized>(Self, &Q) -> RawEntryMut where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given key.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given key.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":47255,"byte_end":47302,"line_start":1301,"line_end":1301,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":47307,"byte_end":47316,"line_start":1302,"line_end":1302,"column_start":5,"column_end":14}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":47321,"byte_end":47360,"line_start":1303,"line_end":1303,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":47783,"byte_end":47806,"line_start":1317,"line_end":1317,"column_start":12,"column_end":35},"name":"from_key_hashed_nocheck","qualname":"<RawEntryBuilderMut>::from_key_hashed_nocheck","value":"pub fn from_key_hashed_nocheck<Q: ?Sized>(Self, u64, &Q) -> RawEntryMut where\nK: Borrow<Q>, Q: Eq","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given key and its hash.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given key and its hash.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":47653,"byte_end":47713,"line_start":1314,"line_end":1314,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":47718,"byte_end":47727,"line_start":1315,"line_end":1315,"column_start":5,"column_end":14}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":47732,"byte_end":47771,"line_start":1316,"line_end":1316,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":48183,"byte_end":48192,"line_start":1333,"line_end":1333,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<RawEntryBuilderMut>::from_hash","value":"pub fn from_hash<F>(Self, u64, F) -> RawEntryMut where for<'b> F: FnMut(&'b K)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given hash.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given hash.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":48065,"byte_end":48113,"line_start":1330,"line_end":1330,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":48118,"byte_end":48127,"line_start":1331,"line_end":1331,"column_start":5,"column_end":14}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":48132,"byte_end":48171,"line_start":1332,"line_end":1332,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":49089,"byte_end":49097,"line_start":1365,"line_end":1365,"column_start":12,"column_end":20},"name":"from_key","qualname":"<RawEntryBuilder>::from_key","value":"pub fn from_key<Q: ?Sized>(Self, &Q) -> Option<(&'a K, &'a V)> where\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by key.\n","sig":null,"attributes":[{"value":"/ Access an entry by key.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":48992,"byte_end":49019,"line_start":1362,"line_end":1362,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":49024,"byte_end":49033,"line_start":1363,"line_end":1363,"column_start":5,"column_end":14}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":49038,"byte_end":49077,"line_start":1364,"line_end":1364,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":49480,"byte_end":49503,"line_start":1378,"line_end":1378,"column_start":12,"column_end":35},"name":"from_key_hashed_nocheck","qualname":"<RawEntryBuilder>::from_key_hashed_nocheck","value":"pub fn from_key_hashed_nocheck<Q: ?Sized>(Self, u64, &Q)\n-> Option<(&'a K, &'a V)> where K: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by a key and its hash.\n","sig":null,"attributes":[{"value":"/ Access an entry by a key and its hash.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":49368,"byte_end":49410,"line_start":1375,"line_end":1375,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":49415,"byte_end":49424,"line_start":1376,"line_end":1376,"column_start":5,"column_end":14}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":49429,"byte_end":49468,"line_start":1377,"line_end":1377,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50147,"byte_end":50156,"line_start":1403,"line_end":1403,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<RawEntryBuilder>::from_hash","value":"pub fn from_hash<F>(Self, u64, F) -> Option<(&'a K, &'a V)> where F: FnMut(&K)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by hash.\n","sig":null,"attributes":[{"value":"/ Access an entry by hash.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50049,"byte_end":50077,"line_start":1400,"line_end":1400,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50082,"byte_end":50091,"line_start":1401,"line_end":1401,"column_start":5,"column_end":14}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50096,"byte_end":50135,"line_start":1402,"line_end":1402,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50944,"byte_end":50953,"line_start":1429,"line_end":1429,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<RawEntryMut>::or_insert","value":"pub fn or_insert(Self, K, V) -> (&'a mut K, &'a mut V) where K: Hash,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n mutable references to the key and value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50356,"byte_end":50438,"line_start":1412,"line_end":1412,"column_start":5,"column_end":87}},{"value":"/ mutable references to the key and value in the entry.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50443,"byte_end":50500,"line_start":1413,"line_end":1413,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50505,"byte_end":50508,"line_start":1414,"line_end":1414,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50513,"byte_end":50527,"line_start":1415,"line_end":1415,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50532,"byte_end":50535,"line_start":1416,"line_end":1416,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50540,"byte_end":50547,"line_start":1417,"line_end":1417,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50552,"byte_end":50579,"line_start":1418,"line_end":1418,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50584,"byte_end":50587,"line_start":1419,"line_end":1419,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50592,"byte_end":50645,"line_start":1420,"line_end":1420,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50650,"byte_end":50653,"line_start":1421,"line_end":1421,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 3);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50658,"byte_end":50730,"line_start":1422,"line_end":1422,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(map[\"poneyland\"], 3);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50735,"byte_end":50771,"line_start":1423,"line_end":1423,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50776,"byte_end":50779,"line_start":1424,"line_end":1424,"column_start":5,"column_end":8}},{"value":"/ *map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 10).1 *= 2;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50784,"byte_end":50865,"line_start":1425,"line_end":1425,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(map[\"poneyland\"], 6);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50870,"byte_end":50906,"line_start":1426,"line_end":1426,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50911,"byte_end":50918,"line_start":1427,"line_end":1427,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50923,"byte_end":50932,"line_start":1428,"line_end":1428,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":51822,"byte_end":51836,"line_start":1457,"line_end":1457,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<RawEntryMut>::or_insert_with","value":"pub fn or_insert_with<F>(Self, F) -> (&'a mut K, &'a mut V) where F: FnOnce()\n-> (K, V), K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns mutable references to the key and value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":51267,"byte_end":51360,"line_start":1440,"line_end":1440,"column_start":5,"column_end":98}},{"value":"/ and returns mutable references to the key and value in the entry.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":51365,"byte_end":51434,"line_start":1441,"line_end":1441,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":51439,"byte_end":51442,"line_start":1442,"line_end":1442,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":51447,"byte_end":51461,"line_start":1443,"line_end":1443,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":51466,"byte_end":51469,"line_start":1444,"line_end":1444,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":51474,"byte_end":51481,"line_start":1445,"line_end":1445,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":51486,"byte_end":51513,"line_start":1446,"line_end":1446,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":51518,"byte_end":51521,"line_start":1447,"line_end":1447,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, String> = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":51526,"byte_end":51582,"line_start":1448,"line_end":1448,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":51587,"byte_end":51590,"line_start":1449,"line_end":1449,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut().from_key(\"poneyland\").or_insert_with(|| {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":51595,"byte_end":51660,"line_start":1450,"line_end":1450,"column_start":5,"column_end":70}},{"value":"/     (\"poneyland\", \"hoho\".to_string())","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":51665,"byte_end":51706,"line_start":1451,"line_end":1451,"column_start":5,"column_end":46}},{"value":"/ });","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":51711,"byte_end":51718,"line_start":1452,"line_end":1452,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":51723,"byte_end":51726,"line_start":1453,"line_end":1453,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":51731,"byte_end":51784,"line_start":1454,"line_end":1454,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":51789,"byte_end":51796,"line_start":1455,"line_end":1455,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":51801,"byte_end":51810,"line_start":1456,"line_end":1456,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52897,"byte_end":52907,"line_start":1495,"line_end":1495,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<RawEntryMut>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut K, &mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52215,"byte_end":52283,"line_start":1472,"line_end":1472,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52288,"byte_end":52323,"line_start":1473,"line_end":1473,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52328,"byte_end":52331,"line_start":1474,"line_end":1474,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52336,"byte_end":52350,"line_start":1475,"line_end":1475,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52355,"byte_end":52358,"line_start":1476,"line_end":1476,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52363,"byte_end":52370,"line_start":1477,"line_end":1477,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52375,"byte_end":52402,"line_start":1478,"line_end":1478,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52407,"byte_end":52410,"line_start":1479,"line_end":1479,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52415,"byte_end":52468,"line_start":1480,"line_end":1480,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52473,"byte_end":52476,"line_start":1481,"line_end":1481,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut()","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52481,"byte_end":52504,"line_start":1482,"line_end":1482,"column_start":5,"column_end":28}},{"value":"/    .from_key(\"poneyland\")","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52509,"byte_end":52538,"line_start":1483,"line_end":1483,"column_start":5,"column_end":34}},{"value":"/    .and_modify(|_k, v| { *v += 1 })","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52543,"byte_end":52582,"line_start":1484,"line_end":1484,"column_start":5,"column_end":44}},{"value":"/    .or_insert(\"poneyland\", 42);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52587,"byte_end":52622,"line_start":1485,"line_end":1485,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52627,"byte_end":52664,"line_start":1486,"line_end":1486,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52669,"byte_end":52672,"line_start":1487,"line_end":1487,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut()","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52677,"byte_end":52700,"line_start":1488,"line_end":1488,"column_start":5,"column_end":28}},{"value":"/    .from_key(\"poneyland\")","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52705,"byte_end":52734,"line_start":1489,"line_end":1489,"column_start":5,"column_end":34}},{"value":"/    .and_modify(|_k, v| { *v += 1 })","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52739,"byte_end":52778,"line_start":1490,"line_end":1490,"column_start":5,"column_end":44}},{"value":"/    .or_insert(\"poneyland\", 0);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52783,"byte_end":52817,"line_start":1491,"line_end":1491,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52822,"byte_end":52859,"line_start":1492,"line_end":1492,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52864,"byte_end":52871,"line_start":1493,"line_end":1493,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":52876,"byte_end":52885,"line_start":1494,"line_end":1494,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":53448,"byte_end":53451,"line_start":1515,"line_end":1515,"column_start":12,"column_end":15},"name":"key","qualname":"<RawOccupiedEntryMut>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":53377,"byte_end":53422,"line_start":1513,"line_end":1513,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":53427,"byte_end":53436,"line_start":1514,"line_end":1514,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":53598,"byte_end":53605,"line_start":1521,"line_end":1521,"column_start":12,"column_end":19},"name":"key_mut","qualname":"<RawOccupiedEntryMut>::key_mut","value":"pub fn key_mut(&mut Self) -> &mut K","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the key in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the key in the entry.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":53519,"byte_end":53572,"line_start":1519,"line_end":1519,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":53577,"byte_end":53586,"line_start":1520,"line_end":1520,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":53831,"byte_end":53839,"line_start":1528,"line_end":1528,"column_start":12,"column_end":20},"name":"into_key","qualname":"<RawOccupiedEntryMut>::into_key","value":"pub fn into_key(Self) -> &'a mut K","parent":null,"children":[],"decl_id":null,"docs":" Converts the entry into a mutable reference to the key in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the entry into a mutable reference to the key in the entry","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":53685,"byte_end":53756,"line_start":1525,"line_end":1525,"column_start":5,"column_end":76}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":53761,"byte_end":53805,"line_start":1526,"line_end":1526,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":53810,"byte_end":53819,"line_start":1527,"line_end":1527,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":53990,"byte_end":53993,"line_start":1534,"line_end":1534,"column_start":12,"column_end":15},"name":"get","qualname":"<RawOccupiedEntryMut>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":53917,"byte_end":53964,"line_start":1532,"line_end":1532,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":53969,"byte_end":53978,"line_start":1533,"line_end":1533,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":54217,"byte_end":54225,"line_start":1541,"line_end":1541,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<RawOccupiedEntryMut>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the value in the entry","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":54061,"byte_end":54142,"line_start":1538,"line_end":1538,"column_start":5,"column_end":86}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":54147,"byte_end":54191,"line_start":1539,"line_end":1539,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":54196,"byte_end":54205,"line_start":1540,"line_end":1540,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":54384,"byte_end":54391,"line_start":1547,"line_end":1547,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RawOccupiedEntryMut>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":54303,"byte_end":54358,"line_start":1545,"line_end":1545,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":54363,"byte_end":54372,"line_start":1546,"line_end":1546,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":54552,"byte_end":54565,"line_start":1553,"line_end":1553,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<RawOccupiedEntryMut>::get_key_value","value":"pub fn get_key_value(&mut Self) -> (&K, &V)","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key and value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key and value in the entry.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":54471,"byte_end":54526,"line_start":1551,"line_end":1551,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":54531,"byte_end":54540,"line_start":1552,"line_end":1552,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":54803,"byte_end":54820,"line_start":1562,"line_end":1562,"column_start":12,"column_end":29},"name":"get_key_value_mut","qualname":"<RawOccupiedEntryMut>::get_key_value_mut","value":"pub fn get_key_value_mut(&mut Self) -> (&mut K, &mut V)","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the key and value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the key and value in the entry.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":54714,"byte_end":54777,"line_start":1560,"line_end":1560,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":54782,"byte_end":54791,"line_start":1561,"line_end":1561,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":55153,"byte_end":55167,"line_start":1572,"line_end":1572,"column_start":12,"column_end":26},"name":"into_key_value","qualname":"<RawOccupiedEntryMut>::into_key_value","value":"pub fn into_key_value(Self) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the key and value in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the key and value in the entry","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":54989,"byte_end":55078,"line_start":1569,"line_end":1569,"column_start":5,"column_end":94}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":55083,"byte_end":55127,"line_start":1570,"line_end":1570,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":55132,"byte_end":55141,"line_start":1571,"line_end":1571,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":55430,"byte_end":55436,"line_start":1581,"line_end":1581,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawOccupiedEntryMut>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":55337,"byte_end":55404,"line_start":1579,"line_end":1579,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":55409,"byte_end":55418,"line_start":1580,"line_end":1580,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":55613,"byte_end":55623,"line_start":1587,"line_end":1587,"column_start":12,"column_end":22},"name":"insert_key","qualname":"<RawOccupiedEntryMut>::insert_key","value":"pub fn insert_key(&mut Self, K) -> K","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":55520,"byte_end":55587,"line_start":1585,"line_end":1585,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":55592,"byte_end":55601,"line_start":1586,"line_end":1586,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":55782,"byte_end":55788,"line_start":1593,"line_end":1593,"column_start":12,"column_end":18},"name":"remove","qualname":"<RawOccupiedEntryMut>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.\n","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":55703,"byte_end":55756,"line_start":1591,"line_end":1591,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":55761,"byte_end":55770,"line_start":1592,"line_end":1592,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":55926,"byte_end":55938,"line_start":1599,"line_end":1599,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<RawOccupiedEntryMut>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.\n","sig":null,"attributes":[{"value":"/ Take the ownership of the key and value from the map.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":55843,"byte_end":55900,"line_start":1597,"line_end":1597,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":55905,"byte_end":55914,"line_start":1598,"line_end":1598,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":56259,"byte_end":56265,"line_start":1611,"line_end":1611,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawVacantEntryMut>::insert","value":"pub fn insert(Self, K, V) -> (&'a mut K, &'a mut V) where K: Hash,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":56127,"byte_end":56186,"line_start":1608,"line_end":1608,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":56191,"byte_end":56233,"line_start":1609,"line_end":1609,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":56238,"byte_end":56247,"line_start":1610,"line_end":1610,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":56709,"byte_end":56730,"line_start":1625,"line_end":1625,"column_start":12,"column_end":33},"name":"insert_hashed_nocheck","qualname":"<RawVacantEntryMut>::insert_hashed_nocheck","value":"pub fn insert_hashed_nocheck(Self, u64, K, V) -> (&'a mut K, &'a mut V) where\nK: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":56538,"byte_end":56597,"line_start":1621,"line_end":1621,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":56602,"byte_end":56644,"line_start":1622,"line_end":1622,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":56649,"byte_end":56658,"line_start":1623,"line_end":1623,"column_start":5,"column_end":14}},{"value":"allow(clippy :: shadow_unrelated)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":56663,"byte_end":56697,"line_start":1624,"line_end":1624,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":57074,"byte_end":57092,"line_start":1636,"line_end":1636,"column_start":12,"column_end":30},"name":"insert_with_hasher","qualname":"<RawVacantEntryMut>::insert_with_hasher","value":"pub fn insert_with_hasher<H>(Self, u64, K, V, H) -> (&'a mut K, &'a mut V)\nwhere S: BuildHasher, H: Fn(&K) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Set the value of an entry with a custom hasher function.\n","sig":null,"attributes":[{"value":"/ Set the value of an entry with a custom hasher function.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":56988,"byte_end":57048,"line_start":1634,"line_end":1634,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":57053,"byte_end":57062,"line_start":1635,"line_end":1635,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":411},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":58968,"byte_end":58976,"line_start":1699,"line_end":1699,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry)","parent":{"krate":0,"index":406},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":58941,"byte_end":58963,"line_start":1698,"line_end":1698,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":414},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":59035,"byte_end":59041,"line_start":1702,"line_end":1702,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::Entry::Vacant","value":"Entry::Vacant(VacantEntry)","parent":{"krate":0,"index":406},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":59011,"byte_end":59030,"line_start":1701,"line_end":1701,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":406},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":58904,"byte_end":58909,"line_start":1697,"line_end":1697,"column_start":10,"column_end":15},"name":"Entry","qualname":"::map::Entry","value":"pub enum Entry<'a, K: 'a, V: 'a, S: 'a> {\n    Occupied(OccupiedEntry),\n    Vacant(VacantEntry),\n}","parent":null,"children":[{"krate":0,"index":411},{"krate":0,"index":414}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":58648,"byte_end":58728,"line_start":1691,"line_end":1691,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":58729,"byte_end":58732,"line_start":1692,"line_end":1692,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed from the [`entry`] method on [`HashMap`].","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":58733,"byte_end":58805,"line_start":1693,"line_end":1693,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":58806,"byte_end":58809,"line_start":1694,"line_end":1694,"column_start":1,"column_end":4}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":58810,"byte_end":58846,"line_start":1695,"line_end":1695,"column_start":1,"column_end":37}},{"value":"/ [`entry`]: struct.HashMap.html#method.entry","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":58847,"byte_end":58894,"line_start":1696,"line_end":1696,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":422},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":59527,"byte_end":59540,"line_start":1718,"line_end":1718,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::map::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `HashMap`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":59393,"byte_end":59442,"line_start":1714,"line_end":1714,"column_start":1,"column_end":50}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":59443,"byte_end":59480,"line_start":1715,"line_end":1715,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":59481,"byte_end":59484,"line_start":1716,"line_end":1716,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":59485,"byte_end":59515,"line_start":1717,"line_end":1717,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":443},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":60265,"byte_end":60276,"line_start":1752,"line_end":1752,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::map::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `HashMap`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":60134,"byte_end":60180,"line_start":1748,"line_end":1748,"column_start":1,"column_end":47}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":60181,"byte_end":60218,"line_start":1749,"line_end":1749,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":60219,"byte_end":60222,"line_start":1750,"line_end":1750,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":60223,"byte_end":60253,"line_start":1751,"line_end":1751,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66508,"byte_end":66517,"line_start":2014,"line_end":2014,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"pub fn or_insert(Self, V) -> &'a mut V where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":65993,"byte_end":66075,"line_start":1997,"line_end":1997,"column_start":5,"column_end":87}},{"value":"/ a mutable reference to the value in the entry.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66080,"byte_end":66130,"line_start":1998,"line_end":1998,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66135,"byte_end":66138,"line_start":1999,"line_end":1999,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66143,"byte_end":66157,"line_start":2000,"line_end":2000,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66162,"byte_end":66165,"line_start":2001,"line_end":2001,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66170,"byte_end":66177,"line_start":2002,"line_end":2002,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66182,"byte_end":66209,"line_start":2003,"line_end":2003,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66214,"byte_end":66217,"line_start":2004,"line_end":2004,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66222,"byte_end":66275,"line_start":2005,"line_end":2005,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66280,"byte_end":66283,"line_start":2006,"line_end":2006,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert(3);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66288,"byte_end":66328,"line_start":2007,"line_end":2007,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map[\"poneyland\"], 3);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66333,"byte_end":66369,"line_start":2008,"line_end":2008,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66374,"byte_end":66377,"line_start":2009,"line_end":2009,"column_start":5,"column_end":8}},{"value":"/ *map.entry(\"poneyland\").or_insert(10) *= 2;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66382,"byte_end":66429,"line_start":2010,"line_end":2010,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[\"poneyland\"], 6);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66434,"byte_end":66470,"line_start":2011,"line_end":2011,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66475,"byte_end":66482,"line_start":2012,"line_end":2012,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66487,"byte_end":66496,"line_start":2013,"line_end":2013,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":67272,"byte_end":67286,"line_start":2041,"line_end":2041,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"pub fn or_insert_with<F: FnOnce() -> V>(Self, F) -> &'a mut V where K: Hash,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66763,"byte_end":66856,"line_start":2025,"line_end":2025,"column_start":5,"column_end":98}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66861,"byte_end":66923,"line_start":2026,"line_end":2026,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66928,"byte_end":66931,"line_start":2027,"line_end":2027,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66936,"byte_end":66950,"line_start":2028,"line_end":2028,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66955,"byte_end":66958,"line_start":2029,"line_end":2029,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66963,"byte_end":66970,"line_start":2030,"line_end":2030,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":66975,"byte_end":67002,"line_start":2031,"line_end":2031,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":67007,"byte_end":67010,"line_start":2032,"line_end":2032,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, String> = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":67015,"byte_end":67071,"line_start":2033,"line_end":2033,"column_start":5,"column_end":61}},{"value":"/ let s = \"hoho\".to_string();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":67076,"byte_end":67107,"line_start":2034,"line_end":2034,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":67112,"byte_end":67115,"line_start":2035,"line_end":2035,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert_with(|| s);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":67120,"byte_end":67168,"line_start":2036,"line_end":2036,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":67173,"byte_end":67176,"line_start":2037,"line_end":2037,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":67181,"byte_end":67234,"line_start":2038,"line_end":2038,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":67239,"byte_end":67246,"line_start":2039,"line_end":2039,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":67251,"byte_end":67260,"line_start":2040,"line_end":2040,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":67843,"byte_end":67846,"line_start":2063,"line_end":2063,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to this entry's key.","sig":null,"attributes":[{"value":"/ Returns a reference to this entry's key.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":67552,"byte_end":67596,"line_start":2052,"line_end":2052,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":67601,"byte_end":67604,"line_start":2053,"line_end":2053,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":67609,"byte_end":67623,"line_start":2054,"line_end":2054,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":67628,"byte_end":67631,"line_start":2055,"line_end":2055,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":67636,"byte_end":67643,"line_start":2056,"line_end":2056,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":67648,"byte_end":67675,"line_start":2057,"line_end":2057,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":67680,"byte_end":67683,"line_start":2058,"line_end":2058,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":67688,"byte_end":67741,"line_start":2059,"line_end":2059,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":67746,"byte_end":67805,"line_start":2060,"line_end":2060,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":67810,"byte_end":67817,"line_start":2061,"line_end":2061,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":67822,"byte_end":67831,"line_start":2062,"line_end":2062,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68600,"byte_end":68610,"line_start":2091,"line_end":2091,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68013,"byte_end":68081,"line_start":2070,"line_end":2070,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68086,"byte_end":68121,"line_start":2071,"line_end":2071,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68126,"byte_end":68129,"line_start":2072,"line_end":2072,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68134,"byte_end":68148,"line_start":2073,"line_end":2073,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68153,"byte_end":68156,"line_start":2074,"line_end":2074,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68161,"byte_end":68168,"line_start":2075,"line_end":2075,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68173,"byte_end":68200,"line_start":2076,"line_end":2076,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68205,"byte_end":68208,"line_start":2077,"line_end":2077,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68213,"byte_end":68266,"line_start":2078,"line_end":2078,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68271,"byte_end":68274,"line_start":2079,"line_end":2079,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68279,"byte_end":68305,"line_start":2080,"line_end":2080,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68310,"byte_end":68345,"line_start":2081,"line_end":2081,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68350,"byte_end":68372,"line_start":2082,"line_end":2082,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68377,"byte_end":68414,"line_start":2083,"line_end":2083,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68419,"byte_end":68422,"line_start":2084,"line_end":2084,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68427,"byte_end":68453,"line_start":2085,"line_end":2085,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68458,"byte_end":68493,"line_start":2086,"line_end":2086,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68498,"byte_end":68520,"line_start":2087,"line_end":2087,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68525,"byte_end":68562,"line_start":2088,"line_end":2088,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68567,"byte_end":68574,"line_start":2089,"line_end":2089,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68579,"byte_end":68588,"line_start":2090,"line_end":2090,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69425,"byte_end":69435,"line_start":2122,"line_end":2122,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"pub fn or_default(Self) -> &'a mut V where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default value if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default value if empty,","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68960,"byte_end":69036,"line_start":2106,"line_end":2106,"column_start":5,"column_end":81}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69041,"byte_end":69103,"line_start":2107,"line_end":2107,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69108,"byte_end":69111,"line_start":2108,"line_end":2108,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69116,"byte_end":69130,"line_start":2109,"line_end":2109,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69135,"byte_end":69138,"line_start":2110,"line_end":2110,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69143,"byte_end":69150,"line_start":2111,"line_end":2111,"column_start":5,"column_end":12}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69155,"byte_end":69172,"line_start":2112,"line_end":2112,"column_start":5,"column_end":22}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69177,"byte_end":69204,"line_start":2113,"line_end":2113,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69209,"byte_end":69212,"line_start":2114,"line_end":2114,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, Option<u32>> = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69217,"byte_end":69278,"line_start":2115,"line_end":2115,"column_start":5,"column_end":66}},{"value":"/ map.entry(\"poneyland\").or_default();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69283,"byte_end":69323,"line_start":2116,"line_end":2116,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69328,"byte_end":69331,"line_start":2117,"line_end":2117,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], None);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69336,"byte_end":69375,"line_start":2118,"line_end":2118,"column_start":5,"column_end":44}},{"value":"/ # }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69380,"byte_end":69387,"line_start":2119,"line_end":2119,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69392,"byte_end":69399,"line_start":2120,"line_end":2120,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69404,"byte_end":69413,"line_start":2121,"line_end":2121,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70067,"byte_end":70070,"line_start":2147,"line_end":2147,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69729,"byte_end":69774,"line_start":2135,"line_end":2135,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69779,"byte_end":69782,"line_start":2136,"line_end":2136,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69787,"byte_end":69801,"line_start":2137,"line_end":2137,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69806,"byte_end":69809,"line_start":2138,"line_end":2138,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69814,"byte_end":69821,"line_start":2139,"line_end":2139,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69826,"byte_end":69853,"line_start":2140,"line_end":2140,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69858,"byte_end":69861,"line_start":2141,"line_end":2141,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69866,"byte_end":69919,"line_start":2142,"line_end":2142,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69924,"byte_end":69965,"line_start":2143,"line_end":2143,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69970,"byte_end":70029,"line_start":2144,"line_end":2144,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70034,"byte_end":70041,"line_start":2145,"line_end":2145,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70046,"byte_end":70055,"line_start":2146,"line_end":2146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70688,"byte_end":70700,"line_start":2170,"line_end":2170,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.","sig":null,"attributes":[{"value":"/ Take the ownership of the key and value from the map.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70138,"byte_end":70195,"line_start":2151,"line_end":2151,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70200,"byte_end":70203,"line_start":2152,"line_end":2152,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70208,"byte_end":70222,"line_start":2153,"line_end":2153,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70227,"byte_end":70230,"line_start":2154,"line_end":2154,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70235,"byte_end":70242,"line_start":2155,"line_end":2155,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70247,"byte_end":70274,"line_start":2156,"line_end":2156,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70279,"byte_end":70314,"line_start":2157,"line_end":2157,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70319,"byte_end":70322,"line_start":2158,"line_end":2158,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70327,"byte_end":70380,"line_start":2159,"line_end":2159,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70385,"byte_end":70426,"line_start":2160,"line_end":2160,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70431,"byte_end":70434,"line_start":2161,"line_end":2161,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70439,"byte_end":70495,"line_start":2162,"line_end":2162,"column_start":5,"column_end":61}},{"value":"/     // We delete the entry from the map.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70500,"byte_end":70544,"line_start":2163,"line_end":2163,"column_start":5,"column_end":49}},{"value":"/     o.remove_entry();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70549,"byte_end":70574,"line_start":2164,"line_end":2164,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70579,"byte_end":70584,"line_start":2165,"line_end":2165,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70589,"byte_end":70592,"line_start":2166,"line_end":2166,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70597,"byte_end":70650,"line_start":2167,"line_end":2167,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70655,"byte_end":70662,"line_start":2168,"line_end":2168,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70667,"byte_end":70676,"line_start":2169,"line_end":2169,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71275,"byte_end":71278,"line_start":2193,"line_end":2193,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70842,"byte_end":70889,"line_start":2177,"line_end":2177,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70894,"byte_end":70897,"line_start":2178,"line_end":2178,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70902,"byte_end":70916,"line_start":2179,"line_end":2179,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70921,"byte_end":70924,"line_start":2180,"line_end":2180,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70929,"byte_end":70936,"line_start":2181,"line_end":2181,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70941,"byte_end":70968,"line_start":2182,"line_end":2182,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":70973,"byte_end":71008,"line_start":2183,"line_end":2183,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71013,"byte_end":71016,"line_start":2184,"line_end":2184,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71021,"byte_end":71074,"line_start":2185,"line_end":2185,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71079,"byte_end":71120,"line_start":2186,"line_end":2186,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71125,"byte_end":71128,"line_start":2187,"line_end":2187,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71133,"byte_end":71189,"line_start":2188,"line_end":2188,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.get(), &12);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71194,"byte_end":71227,"line_start":2189,"line_end":2189,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71232,"byte_end":71237,"line_start":2190,"line_end":2190,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71242,"byte_end":71249,"line_start":2191,"line_end":2191,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71254,"byte_end":71263,"line_start":2192,"line_end":2192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72203,"byte_end":72210,"line_start":2225,"line_end":2225,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71346,"byte_end":71401,"line_start":2197,"line_end":2197,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71406,"byte_end":71409,"line_start":2198,"line_end":2198,"column_start":5,"column_end":8}},{"value":"/ If you need a reference to the `OccupiedEntry` which may outlive the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71414,"byte_end":71486,"line_start":2199,"line_end":2199,"column_start":5,"column_end":77}},{"value":"/ destruction of the `Entry` value, see [`into_mut`].","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71491,"byte_end":71546,"line_start":2200,"line_end":2200,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71551,"byte_end":71554,"line_start":2201,"line_end":2201,"column_start":5,"column_end":8}},{"value":"/ [`into_mut`]: #method.into_mut","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71559,"byte_end":71593,"line_start":2202,"line_end":2202,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71598,"byte_end":71601,"line_start":2203,"line_end":2203,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71606,"byte_end":71620,"line_start":2204,"line_end":2204,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71625,"byte_end":71628,"line_start":2205,"line_end":2205,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71633,"byte_end":71640,"line_start":2206,"line_end":2206,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71645,"byte_end":71672,"line_start":2207,"line_end":2207,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71677,"byte_end":71712,"line_start":2208,"line_end":2208,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71717,"byte_end":71720,"line_start":2209,"line_end":2209,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71725,"byte_end":71778,"line_start":2210,"line_end":2210,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71783,"byte_end":71824,"line_start":2211,"line_end":2211,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71829,"byte_end":71832,"line_start":2212,"line_end":2212,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71837,"byte_end":71874,"line_start":2213,"line_end":2213,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71879,"byte_end":71939,"line_start":2214,"line_end":2214,"column_start":5,"column_end":65}},{"value":"/     *o.get_mut() += 10;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71944,"byte_end":71971,"line_start":2215,"line_end":2215,"column_start":5,"column_end":32}},{"value":"/     assert_eq!(*o.get(), 22);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":71976,"byte_end":72009,"line_start":2216,"line_end":2216,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72014,"byte_end":72017,"line_start":2217,"line_end":2217,"column_start":5,"column_end":8}},{"value":"/     // We can use the same Entry multiple times.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72022,"byte_end":72074,"line_start":2218,"line_end":2218,"column_start":5,"column_end":57}},{"value":"/     *o.get_mut() += 2;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72079,"byte_end":72105,"line_start":2219,"line_end":2219,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72110,"byte_end":72115,"line_start":2220,"line_end":2220,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72120,"byte_end":72123,"line_start":2221,"line_end":2221,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 24);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72128,"byte_end":72165,"line_start":2222,"line_end":2222,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72170,"byte_end":72177,"line_start":2223,"line_end":2223,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72182,"byte_end":72191,"line_start":2224,"line_end":2224,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73027,"byte_end":73035,"line_start":2253,"line_end":2253,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the value in the entry","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72290,"byte_end":72371,"line_start":2229,"line_end":2229,"column_start":5,"column_end":86}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72376,"byte_end":72420,"line_start":2230,"line_end":2230,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72425,"byte_end":72428,"line_start":2231,"line_end":2231,"column_start":5,"column_end":8}},{"value":"/ If you need multiple references to the `OccupiedEntry`, see [`get_mut`].","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72433,"byte_end":72509,"line_start":2232,"line_end":2232,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72514,"byte_end":72517,"line_start":2233,"line_end":2233,"column_start":5,"column_end":8}},{"value":"/ [`get_mut`]: #method.get_mut","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72522,"byte_end":72554,"line_start":2234,"line_end":2234,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72559,"byte_end":72562,"line_start":2235,"line_end":2235,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72567,"byte_end":72581,"line_start":2236,"line_end":2236,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72586,"byte_end":72589,"line_start":2237,"line_end":2237,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72594,"byte_end":72601,"line_start":2238,"line_end":2238,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72606,"byte_end":72633,"line_start":2239,"line_end":2239,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72638,"byte_end":72673,"line_start":2240,"line_end":2240,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72678,"byte_end":72681,"line_start":2241,"line_end":2241,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72686,"byte_end":72739,"line_start":2242,"line_end":2242,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72744,"byte_end":72785,"line_start":2243,"line_end":2243,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72790,"byte_end":72793,"line_start":2244,"line_end":2244,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72798,"byte_end":72835,"line_start":2245,"line_end":2245,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72840,"byte_end":72896,"line_start":2246,"line_end":2246,"column_start":5,"column_end":61}},{"value":"/     *o.into_mut() += 10;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72901,"byte_end":72929,"line_start":2247,"line_end":2247,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72934,"byte_end":72939,"line_start":2248,"line_end":2248,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72944,"byte_end":72947,"line_start":2249,"line_end":2249,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 22);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72952,"byte_end":72989,"line_start":2250,"line_end":2250,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":72994,"byte_end":73001,"line_start":2251,"line_end":2251,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73006,"byte_end":73015,"line_start":2252,"line_end":2252,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73624,"byte_end":73630,"line_start":2275,"line_end":2275,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73113,"byte_end":73180,"line_start":2257,"line_end":2257,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73185,"byte_end":73188,"line_start":2258,"line_end":2258,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73193,"byte_end":73207,"line_start":2259,"line_end":2259,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73212,"byte_end":73215,"line_start":2260,"line_end":2260,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73220,"byte_end":73227,"line_start":2261,"line_end":2261,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73232,"byte_end":73259,"line_start":2262,"line_end":2262,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73264,"byte_end":73299,"line_start":2263,"line_end":2263,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73304,"byte_end":73307,"line_start":2264,"line_end":2264,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73312,"byte_end":73365,"line_start":2265,"line_end":2265,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73370,"byte_end":73411,"line_start":2266,"line_end":2266,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73416,"byte_end":73419,"line_start":2267,"line_end":2267,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73424,"byte_end":73484,"line_start":2268,"line_end":2268,"column_start":5,"column_end":65}},{"value":"/     assert_eq!(o.insert(15), 12);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73489,"byte_end":73526,"line_start":2269,"line_end":2269,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73531,"byte_end":73536,"line_start":2270,"line_end":2270,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73541,"byte_end":73544,"line_start":2271,"line_end":2271,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 15);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73549,"byte_end":73586,"line_start":2272,"line_end":2272,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73591,"byte_end":73598,"line_start":2273,"line_end":2273,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73603,"byte_end":73612,"line_start":2274,"line_end":2274,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74277,"byte_end":74283,"line_start":2299,"line_end":2299,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73770,"byte_end":73823,"line_start":2281,"line_end":2281,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73828,"byte_end":73831,"line_start":2282,"line_end":2282,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73836,"byte_end":73850,"line_start":2283,"line_end":2283,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73855,"byte_end":73858,"line_start":2284,"line_end":2284,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73863,"byte_end":73870,"line_start":2285,"line_end":2285,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73875,"byte_end":73902,"line_start":2286,"line_end":2286,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73907,"byte_end":73942,"line_start":2287,"line_end":2287,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73947,"byte_end":73950,"line_start":2288,"line_end":2288,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":73955,"byte_end":74008,"line_start":2289,"line_end":2289,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74013,"byte_end":74054,"line_start":2290,"line_end":2290,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74059,"byte_end":74062,"line_start":2291,"line_end":2291,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74067,"byte_end":74123,"line_start":2292,"line_end":2292,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.remove(), 12);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74128,"byte_end":74163,"line_start":2293,"line_end":2293,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74168,"byte_end":74173,"line_start":2294,"line_end":2294,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74178,"byte_end":74181,"line_start":2295,"line_end":2295,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74186,"byte_end":74239,"line_start":2296,"line_end":2296,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74244,"byte_end":74251,"line_start":2297,"line_end":2297,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74256,"byte_end":74265,"line_start":2298,"line_end":2298,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":75068,"byte_end":75081,"line_start":2324,"line_end":2324,"column_start":12,"column_end":25},"name":"replace_entry","qualname":"<OccupiedEntry>::replace_entry","value":"pub fn replace_entry(Self, V) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Replaces the entry, returning the old key and value. The new key in the hash map will be\n the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the entry, returning the old key and value. The new key in the hash map will be","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74338,"byte_end":74430,"line_start":2303,"line_end":2303,"column_start":5,"column_end":97}},{"value":"/ the key used to create this entry.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74435,"byte_end":74473,"line_start":2304,"line_end":2304,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74478,"byte_end":74481,"line_start":2305,"line_end":2305,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74486,"byte_end":74500,"line_start":2306,"line_end":2306,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74505,"byte_end":74508,"line_start":2307,"line_end":2307,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74513,"byte_end":74520,"line_start":2308,"line_end":2308,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{Entry, HashMap};","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74525,"byte_end":74571,"line_start":2309,"line_end":2309,"column_start":5,"column_end":51}},{"value":"/ use std::rc::Rc;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74576,"byte_end":74596,"line_start":2310,"line_end":2310,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74601,"byte_end":74604,"line_start":2311,"line_end":2311,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<String>, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74609,"byte_end":74668,"line_start":2312,"line_end":2312,"column_start":5,"column_end":64}},{"value":"/ map.insert(Rc::new(\"Stringthing\".to_string()), 15);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74673,"byte_end":74728,"line_start":2313,"line_end":2313,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74733,"byte_end":74736,"line_start":2314,"line_end":2314,"column_start":5,"column_end":8}},{"value":"/ let my_key = Rc::new(\"Stringthing\".to_string());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74741,"byte_end":74793,"line_start":2315,"line_end":2315,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74798,"byte_end":74801,"line_start":2316,"line_end":2316,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(entry) = map.entry(my_key) {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74806,"byte_end":74861,"line_start":2317,"line_end":2317,"column_start":5,"column_end":60}},{"value":"/     // Also replace the key with a handle to our other key.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74866,"byte_end":74929,"line_start":2318,"line_end":2318,"column_start":5,"column_end":68}},{"value":"/     let (old_key, old_value): (Rc<String>, u32) = entry.replace_entry(16);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":74934,"byte_end":75012,"line_start":2319,"line_end":2319,"column_start":5,"column_end":83}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":75017,"byte_end":75022,"line_start":2320,"line_end":2320,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":75027,"byte_end":75030,"line_start":2321,"line_end":2321,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":75035,"byte_end":75042,"line_start":2322,"line_end":2322,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":75047,"byte_end":75056,"line_start":2323,"line_end":2323,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76207,"byte_end":76218,"line_start":2358,"line_end":2358,"column_start":12,"column_end":23},"name":"replace_key","qualname":"<OccupiedEntry>::replace_key","value":"pub fn replace_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Replaces the key in the hash map with the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the key in the hash map with the key used to create this entry.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":75331,"byte_end":75407,"line_start":2333,"line_end":2333,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":75412,"byte_end":75415,"line_start":2334,"line_end":2334,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":75420,"byte_end":75434,"line_start":2335,"line_end":2335,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":75439,"byte_end":75442,"line_start":2336,"line_end":2336,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":75447,"byte_end":75454,"line_start":2337,"line_end":2337,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{Entry, HashMap};","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":75459,"byte_end":75505,"line_start":2338,"line_end":2338,"column_start":5,"column_end":51}},{"value":"/ use std::rc::Rc;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":75510,"byte_end":75530,"line_start":2339,"line_end":2339,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":75535,"byte_end":75538,"line_start":2340,"line_end":2340,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<String>, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":75543,"byte_end":75602,"line_start":2341,"line_end":2341,"column_start":5,"column_end":64}},{"value":"/ let mut known_strings: Vec<Rc<String>> = Vec::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":75607,"byte_end":75663,"line_start":2342,"line_end":2342,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":75668,"byte_end":75671,"line_start":2343,"line_end":2343,"column_start":5,"column_end":8}},{"value":"/ // Initialise known strings, run program, etc.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":75676,"byte_end":75726,"line_start":2344,"line_end":2344,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":75731,"byte_end":75734,"line_start":2345,"line_end":2345,"column_start":5,"column_end":8}},{"value":"/ reclaim_memory(&mut map, &known_strings);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":75739,"byte_end":75784,"line_start":2346,"line_end":2346,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":75789,"byte_end":75792,"line_start":2347,"line_end":2347,"column_start":5,"column_end":8}},{"value":"/ fn reclaim_memory(map: &mut HashMap<Rc<String>, u32>, known_strings: &[Rc<String>] ) {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":75797,"byte_end":75887,"line_start":2348,"line_end":2348,"column_start":5,"column_end":95}},{"value":"/     for s in known_strings {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":75892,"byte_end":75924,"line_start":2349,"line_end":2349,"column_start":5,"column_end":37}},{"value":"/         if let Entry::Occupied(entry) = map.entry(s.clone()) {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":75929,"byte_end":75995,"line_start":2350,"line_end":2350,"column_start":5,"column_end":71}},{"value":"/             // Replaces the entry's key with our version of it in `known_strings`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76000,"byte_end":76086,"line_start":2351,"line_end":2351,"column_start":5,"column_end":91}},{"value":"/             entry.replace_key();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76091,"byte_end":76127,"line_start":2352,"line_end":2352,"column_start":5,"column_end":41}},{"value":"/         }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76132,"byte_end":76145,"line_start":2353,"line_end":2353,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76150,"byte_end":76159,"line_start":2354,"line_end":2354,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76164,"byte_end":76169,"line_start":2355,"line_end":2355,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76174,"byte_end":76181,"line_start":2356,"line_end":2356,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76186,"byte_end":76195,"line_start":2357,"line_end":2357,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76750,"byte_end":76753,"line_start":2377,"line_end":2377,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that would be used when inserting a value\n through the `VacantEntry`.","sig":null,"attributes":[{"value":"/ Gets a reference to the key that would be used when inserting a value","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76395,"byte_end":76468,"line_start":2365,"line_end":2365,"column_start":5,"column_end":78}},{"value":"/ through the `VacantEntry`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76473,"byte_end":76503,"line_start":2366,"line_end":2366,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76508,"byte_end":76511,"line_start":2367,"line_end":2367,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76516,"byte_end":76530,"line_start":2368,"line_end":2368,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76535,"byte_end":76538,"line_start":2369,"line_end":2369,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76543,"byte_end":76550,"line_start":2370,"line_end":2370,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76555,"byte_end":76582,"line_start":2371,"line_end":2371,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76587,"byte_end":76590,"line_start":2372,"line_end":2372,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76595,"byte_end":76648,"line_start":2373,"line_end":2373,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76653,"byte_end":76712,"line_start":2374,"line_end":2374,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76717,"byte_end":76724,"line_start":2375,"line_end":2375,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76729,"byte_end":76738,"line_start":2376,"line_end":2376,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77154,"byte_end":77162,"line_start":2396,"line_end":2396,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"pub fn into_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Take ownership of the key.","sig":null,"attributes":[{"value":"/ Take ownership of the key.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76798,"byte_end":76828,"line_start":2381,"line_end":2381,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76833,"byte_end":76836,"line_start":2382,"line_end":2382,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76841,"byte_end":76855,"line_start":2383,"line_end":2383,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76860,"byte_end":76863,"line_start":2384,"line_end":2384,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76868,"byte_end":76875,"line_start":2385,"line_end":2385,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76880,"byte_end":76907,"line_start":2386,"line_end":2386,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76912,"byte_end":76947,"line_start":2387,"line_end":2387,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76952,"byte_end":76955,"line_start":2388,"line_end":2388,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76960,"byte_end":77013,"line_start":2389,"line_end":2389,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77018,"byte_end":77021,"line_start":2390,"line_end":2390,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Vacant(v) = map.entry(\"poneyland\") {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77026,"byte_end":77080,"line_start":2391,"line_end":2391,"column_start":5,"column_end":59}},{"value":"/     v.into_key();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77085,"byte_end":77106,"line_start":2392,"line_end":2392,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77111,"byte_end":77116,"line_start":2393,"line_end":2393,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77121,"byte_end":77128,"line_start":2394,"line_end":2394,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77133,"byte_end":77142,"line_start":2395,"line_end":2395,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77678,"byte_end":77684,"line_start":2417,"line_end":2417,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"pub fn insert(Self, V) -> &'a mut V where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77204,"byte_end":77263,"line_start":2400,"line_end":2400,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77268,"byte_end":77310,"line_start":2401,"line_end":2401,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77315,"byte_end":77318,"line_start":2402,"line_end":2402,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77323,"byte_end":77337,"line_start":2403,"line_end":2403,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77342,"byte_end":77345,"line_start":2404,"line_end":2404,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77350,"byte_end":77357,"line_start":2405,"line_end":2405,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77362,"byte_end":77389,"line_start":2406,"line_end":2406,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77394,"byte_end":77429,"line_start":2407,"line_end":2407,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77434,"byte_end":77437,"line_start":2408,"line_end":2408,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77442,"byte_end":77495,"line_start":2409,"line_end":2409,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77500,"byte_end":77503,"line_start":2410,"line_end":2410,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Vacant(o) = map.entry(\"poneyland\") {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77508,"byte_end":77562,"line_start":2411,"line_end":2411,"column_start":5,"column_end":59}},{"value":"/     o.insert(37);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77567,"byte_end":77588,"line_start":2412,"line_end":2412,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77593,"byte_end":77598,"line_start":2413,"line_end":2413,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[\"poneyland\"], 37);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77603,"byte_end":77640,"line_start":2414,"line_end":2414,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77645,"byte_end":77652,"line_start":2415,"line_end":2415,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":77657,"byte_end":77666,"line_start":2416,"line_end":2416,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1423},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165026,"byte_end":165033,"line_start":115,"line_end":115,"column_start":12,"column_end":19},"name":"HashSet","qualname":"::set::HashSet","value":"HashSet {  }","parent":null,"children":[{"krate":0,"index":1426}],"decl_id":null,"docs":" A hash set implemented as a `HashMap` where the value is `()`.","sig":null,"attributes":[{"value":"/ A hash set implemented as a `HashMap` where the value is `()`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":161603,"byte_end":161669,"line_start":17,"line_end":17,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":161670,"byte_end":161673,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ As with the [`HashMap`] type, a `HashSet` requires that the elements","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":161674,"byte_end":161746,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/ implement the [`Eq`] and [`Hash`] traits. This can frequently be achieved by","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":161747,"byte_end":161827,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ using `#[derive(PartialEq, Eq, Hash)]`. If you implement these yourself,","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":161828,"byte_end":161904,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"/ it is important that the following property holds:","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":161905,"byte_end":161959,"line_start":22,"line_end":22,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":161960,"byte_end":161963,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":161964,"byte_end":161975,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/ k1 == k2 -> hash(k1) == hash(k2)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":161976,"byte_end":162012,"line_start":25,"line_end":25,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162013,"byte_end":162020,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162021,"byte_end":162024,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ In other words, if two keys are equal, their hashes must be equal.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162025,"byte_end":162095,"line_start":28,"line_end":28,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162096,"byte_end":162099,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162100,"byte_end":162103,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for an item to be modified in such a way that the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162104,"byte_end":162177,"line_start":31,"line_end":31,"column_start":1,"column_end":74}},{"value":"/ item's hash, as determined by the [`Hash`] trait, or its equality, as","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162178,"byte_end":162251,"line_start":32,"line_end":32,"column_start":1,"column_end":74}},{"value":"/ determined by the [`Eq`] trait, changes while it is in the set. This is","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162252,"byte_end":162327,"line_start":33,"line_end":33,"column_start":1,"column_end":76}},{"value":"/ normally only possible through [`Cell`], [`RefCell`], global state, I/O, or","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162328,"byte_end":162407,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ unsafe code.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162408,"byte_end":162424,"line_start":35,"line_end":35,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162425,"byte_end":162428,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ It is also a logic error for the [`Hash`] implementation of a key to panic.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162429,"byte_end":162508,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ This is generally only possible if the trait is implemented manually. If a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162509,"byte_end":162587,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/ panic does occur then the contents of the `HashSet` may become corrupted and","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162588,"byte_end":162668,"line_start":39,"line_end":39,"column_start":1,"column_end":81}},{"value":"/ some items may be dropped from the table.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162669,"byte_end":162714,"line_start":40,"line_end":40,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162715,"byte_end":162718,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162719,"byte_end":162733,"line_start":42,"line_end":42,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162734,"byte_end":162737,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162738,"byte_end":162745,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162746,"byte_end":162773,"line_start":45,"line_end":45,"column_start":1,"column_end":28}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162774,"byte_end":162842,"line_start":46,"line_end":46,"column_start":1,"column_end":69}},{"value":"/ // would be `HashSet<String>` in this example).","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162843,"byte_end":162894,"line_start":47,"line_end":47,"column_start":1,"column_end":52}},{"value":"/ let mut books = HashSet::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162895,"byte_end":162930,"line_start":48,"line_end":48,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162931,"byte_end":162934,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ // Add some books.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162935,"byte_end":162957,"line_start":50,"line_end":50,"column_start":1,"column_end":23}},{"value":"/ books.insert(\"A Dance With Dragons\".to_string());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":162958,"byte_end":163011,"line_start":51,"line_end":51,"column_start":1,"column_end":54}},{"value":"/ books.insert(\"To Kill a Mockingbird\".to_string());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163012,"byte_end":163066,"line_start":52,"line_end":52,"column_start":1,"column_end":55}},{"value":"/ books.insert(\"The Odyssey\".to_string());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163067,"byte_end":163111,"line_start":53,"line_end":53,"column_start":1,"column_end":45}},{"value":"/ books.insert(\"The Great Gatsby\".to_string());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163112,"byte_end":163161,"line_start":54,"line_end":54,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163162,"byte_end":163165,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163166,"byte_end":163198,"line_start":56,"line_end":56,"column_start":1,"column_end":33}},{"value":"/ if !books.contains(\"The Winds of Winter\") {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163199,"byte_end":163246,"line_start":57,"line_end":57,"column_start":1,"column_end":48}},{"value":"/     println!(\"We have {} books, but The Winds of Winter ain't one.\",","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163247,"byte_end":163319,"line_start":58,"line_end":58,"column_start":1,"column_end":73}},{"value":"/              books.len());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163320,"byte_end":163350,"line_start":59,"line_end":59,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163351,"byte_end":163356,"line_start":60,"line_end":60,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163357,"byte_end":163360,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ // Remove a book.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163361,"byte_end":163382,"line_start":62,"line_end":62,"column_start":1,"column_end":22}},{"value":"/ books.remove(\"The Odyssey\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163383,"byte_end":163415,"line_start":63,"line_end":63,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163416,"byte_end":163419,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163420,"byte_end":163451,"line_start":65,"line_end":65,"column_start":1,"column_end":32}},{"value":"/ for book in &books {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163452,"byte_end":163476,"line_start":66,"line_end":66,"column_start":1,"column_end":25}},{"value":"/     println!(\"{}\", book);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163477,"byte_end":163506,"line_start":67,"line_end":67,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163507,"byte_end":163512,"line_start":68,"line_end":68,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163513,"byte_end":163520,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163521,"byte_end":163524,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ The easiest way to use `HashSet` with a custom type is to derive","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163525,"byte_end":163593,"line_start":71,"line_end":71,"column_start":1,"column_end":69}},{"value":"/ [`Eq`] and [`Hash`]. We must also derive [`PartialEq`], this will in the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163594,"byte_end":163670,"line_start":72,"line_end":72,"column_start":1,"column_end":77}},{"value":"/ future be implied by [`Eq`].","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163671,"byte_end":163703,"line_start":73,"line_end":73,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163704,"byte_end":163707,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163708,"byte_end":163715,"line_start":75,"line_end":75,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163716,"byte_end":163743,"line_start":76,"line_end":76,"column_start":1,"column_end":28}},{"value":"/ #[derive(Hash, Eq, PartialEq, Debug)]","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163744,"byte_end":163785,"line_start":77,"line_end":77,"column_start":1,"column_end":42}},{"value":"/ struct Viking {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163786,"byte_end":163805,"line_start":78,"line_end":78,"column_start":1,"column_end":20}},{"value":"/     name: String,","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163806,"byte_end":163827,"line_start":79,"line_end":79,"column_start":1,"column_end":22}},{"value":"/     power: usize,","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163828,"byte_end":163849,"line_start":80,"line_end":80,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163850,"byte_end":163855,"line_start":81,"line_end":81,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163856,"byte_end":163859,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ let mut vikings = HashSet::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163860,"byte_end":163897,"line_start":83,"line_end":83,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163898,"byte_end":163901,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ vikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163902,"byte_end":163969,"line_start":85,"line_end":85,"column_start":1,"column_end":68}},{"value":"/ vikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":163970,"byte_end":164037,"line_start":86,"line_end":86,"column_start":1,"column_end":68}},{"value":"/ vikings.insert(Viking { name: \"Olaf\".to_string(), power: 4 });","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164038,"byte_end":164104,"line_start":87,"line_end":87,"column_start":1,"column_end":67}},{"value":"/ vikings.insert(Viking { name: \"Harald\".to_string(), power: 8 });","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164105,"byte_end":164173,"line_start":88,"line_end":88,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164174,"byte_end":164177,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ // Use derived implementation to print the vikings.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164178,"byte_end":164233,"line_start":90,"line_end":90,"column_start":1,"column_end":56}},{"value":"/ for x in &vikings {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164234,"byte_end":164257,"line_start":91,"line_end":91,"column_start":1,"column_end":24}},{"value":"/     println!(\"{:?}\", x);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164258,"byte_end":164286,"line_start":92,"line_end":92,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164287,"byte_end":164292,"line_start":93,"line_end":93,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164293,"byte_end":164300,"line_start":94,"line_end":94,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164301,"byte_end":164304,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ A `HashSet` with fixed list of elements can be initialized from an array:","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164305,"byte_end":164382,"line_start":96,"line_end":96,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164383,"byte_end":164386,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164387,"byte_end":164394,"line_start":98,"line_end":98,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164395,"byte_end":164422,"line_start":99,"line_end":99,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164423,"byte_end":164426,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164427,"byte_end":164442,"line_start":101,"line_end":101,"column_start":1,"column_end":16}},{"value":"/     let viking_names: HashSet<&'static str> =","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164443,"byte_end":164492,"line_start":102,"line_end":102,"column_start":1,"column_end":50}},{"value":"/         [ \"Einar\", \"Olaf\", \"Harald\" ].iter().cloned().collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164493,"byte_end":164561,"line_start":103,"line_end":103,"column_start":1,"column_end":69}},{"value":"/     // use the values stored in the set","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164562,"byte_end":164605,"line_start":104,"line_end":104,"column_start":1,"column_end":44}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164606,"byte_end":164611,"line_start":105,"line_end":105,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164612,"byte_end":164619,"line_start":106,"line_end":106,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164620,"byte_end":164623,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ [`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164624,"byte_end":164689,"line_start":108,"line_end":108,"column_start":1,"column_end":66}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164690,"byte_end":164749,"line_start":109,"line_end":109,"column_start":1,"column_end":60}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164750,"byte_end":164814,"line_start":110,"line_end":110,"column_start":1,"column_end":65}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164815,"byte_end":164851,"line_start":111,"line_end":111,"column_start":1,"column_end":37}},{"value":"/ [`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164852,"byte_end":164925,"line_start":112,"line_end":112,"column_start":1,"column_end":74}},{"value":"/ [`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":164926,"byte_end":164997,"line_start":113,"line_end":113,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165494,"byte_end":165497,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"name":"new","qualname":"<HashSet<T, DefaultHashBuilder>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet`.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165161,"byte_end":165192,"line_start":120,"line_end":120,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165197,"byte_end":165200,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ The hash set is initially created with a capacity of 0, so it will not allocate until it","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165205,"byte_end":165297,"line_start":122,"line_end":122,"column_start":5,"column_end":97}},{"value":"/ is first inserted into.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165302,"byte_end":165329,"line_start":123,"line_end":123,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165334,"byte_end":165337,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165342,"byte_end":165356,"line_start":125,"line_end":125,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165361,"byte_end":165364,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165369,"byte_end":165376,"line_start":127,"line_end":127,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165381,"byte_end":165408,"line_start":128,"line_end":128,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165413,"byte_end":165456,"line_start":129,"line_end":129,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165461,"byte_end":165468,"line_start":130,"line_end":130,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165473,"byte_end":165482,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166015,"byte_end":166028,"line_start":151,"line_end":151,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<HashSet<T, DefaultHashBuilder>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet` with the specified capacity.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet` with the specified capacity.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165579,"byte_end":165638,"line_start":138,"line_end":138,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165643,"byte_end":165646,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ The hash set will be able to hold at least `capacity` elements without","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165651,"byte_end":165725,"line_start":140,"line_end":140,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash set will not allocate.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165730,"byte_end":165799,"line_start":141,"line_end":141,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165804,"byte_end":165807,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165812,"byte_end":165826,"line_start":143,"line_end":143,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165831,"byte_end":165834,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165839,"byte_end":165846,"line_start":145,"line_end":145,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165851,"byte_end":165878,"line_start":146,"line_end":146,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::with_capacity(10);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165883,"byte_end":165938,"line_start":147,"line_end":147,"column_start":5,"column_end":60}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165943,"byte_end":165977,"line_start":148,"line_end":148,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165982,"byte_end":165989,"line_start":149,"line_end":149,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165994,"byte_end":166003,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1064},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166463,"byte_end":166471,"line_start":169,"line_end":169,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HashSet<T, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the set can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the set can hold without reallocating.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166172,"byte_end":166245,"line_start":159,"line_end":159,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166250,"byte_end":166253,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166258,"byte_end":166272,"line_start":161,"line_end":161,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166277,"byte_end":166280,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166285,"byte_end":166292,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166297,"byte_end":166324,"line_start":164,"line_end":164,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::with_capacity(100);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166329,"byte_end":166385,"line_start":165,"line_end":165,"column_start":5,"column_end":61}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166390,"byte_end":166425,"line_start":166,"line_end":166,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166430,"byte_end":166437,"line_start":167,"line_end":167,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166442,"byte_end":166451,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1065},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166961,"byte_end":166965,"line_start":190,"line_end":190,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashSet<T, S>>::iter","value":"pub fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all elements in arbitrary order.\n The iterator element type is `&'a T`.","sig":null,"attributes":[{"value":"/ An iterator visiting all elements in arbitrary order.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166529,"byte_end":166586,"line_start":173,"line_end":173,"column_start":5,"column_end":62}},{"value":"/ The iterator element type is `&'a T`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166591,"byte_end":166632,"line_start":174,"line_end":174,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166637,"byte_end":166640,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166645,"byte_end":166659,"line_start":176,"line_end":176,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166664,"byte_end":166667,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166672,"byte_end":166679,"line_start":178,"line_end":178,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166684,"byte_end":166711,"line_start":179,"line_end":179,"column_start":5,"column_end":32}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166716,"byte_end":166749,"line_start":180,"line_end":180,"column_start":5,"column_end":38}},{"value":"/ set.insert(\"a\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166754,"byte_end":166774,"line_start":181,"line_end":181,"column_start":5,"column_end":25}},{"value":"/ set.insert(\"b\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166779,"byte_end":166799,"line_start":182,"line_end":182,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166804,"byte_end":166807,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ // Will print in an arbitrary order.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166812,"byte_end":166852,"line_start":184,"line_end":184,"column_start":5,"column_end":45}},{"value":"/ for x in set.iter() {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166857,"byte_end":166882,"line_start":185,"line_end":185,"column_start":5,"column_end":30}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166887,"byte_end":166913,"line_start":186,"line_end":186,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166918,"byte_end":166923,"line_start":187,"line_end":187,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166928,"byte_end":166935,"line_start":188,"line_end":188,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166940,"byte_end":166949,"line_start":189,"line_end":189,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1066},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167353,"byte_end":167356,"line_start":209,"line_end":209,"column_start":12,"column_end":15},"name":"len","qualname":"<HashSet<T, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the set.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the set.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167061,"byte_end":167107,"line_start":196,"line_end":196,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167112,"byte_end":167115,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167120,"byte_end":167134,"line_start":198,"line_end":198,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167139,"byte_end":167142,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167147,"byte_end":167154,"line_start":200,"line_end":200,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167159,"byte_end":167186,"line_start":201,"line_end":201,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167191,"byte_end":167194,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167199,"byte_end":167230,"line_start":203,"line_end":203,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(v.len(), 0);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167235,"byte_end":167262,"line_start":204,"line_end":204,"column_start":5,"column_end":32}},{"value":"/ v.insert(1);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167267,"byte_end":167283,"line_start":205,"line_end":205,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(v.len(), 1);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167288,"byte_end":167315,"line_start":206,"line_end":206,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167320,"byte_end":167327,"line_start":207,"line_end":207,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167332,"byte_end":167341,"line_start":208,"line_end":208,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1067},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167705,"byte_end":167713,"line_start":226,"line_end":226,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashSet<T, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains no elements.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167409,"byte_end":167460,"line_start":213,"line_end":213,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167465,"byte_end":167468,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167473,"byte_end":167487,"line_start":215,"line_end":215,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167492,"byte_end":167495,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167500,"byte_end":167507,"line_start":217,"line_end":217,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167512,"byte_end":167539,"line_start":218,"line_end":218,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167544,"byte_end":167547,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167552,"byte_end":167583,"line_start":220,"line_end":220,"column_start":5,"column_end":36}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167588,"byte_end":167614,"line_start":221,"line_end":221,"column_start":5,"column_end":31}},{"value":"/ v.insert(1);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167619,"byte_end":167635,"line_start":222,"line_end":222,"column_start":5,"column_end":21}},{"value":"/ assert!(!v.is_empty());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167640,"byte_end":167667,"line_start":223,"line_end":223,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167672,"byte_end":167679,"line_start":224,"line_end":224,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167684,"byte_end":167693,"line_start":225,"line_end":225,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168226,"byte_end":168231,"line_start":248,"line_end":248,"column_start":12,"column_end":17},"name":"drain","qualname":"<HashSet<T, S>>::drain","value":"pub fn drain(&mut Self) -> Drain<, T>","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, returning all elements in an iterator.","sig":null,"attributes":[{"value":"/ Clears the set, returning all elements in an iterator.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167770,"byte_end":167828,"line_start":230,"line_end":230,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167833,"byte_end":167836,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167841,"byte_end":167855,"line_start":232,"line_end":232,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167860,"byte_end":167863,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167868,"byte_end":167875,"line_start":234,"line_end":234,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167880,"byte_end":167907,"line_start":235,"line_end":235,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167912,"byte_end":167915,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167920,"byte_end":167986,"line_start":237,"line_end":237,"column_start":5,"column_end":71}},{"value":"/ assert!(!set.is_empty());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":167991,"byte_end":168020,"line_start":238,"line_end":238,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168025,"byte_end":168028,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ // print 1, 2, 3 in an arbitrary order","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168033,"byte_end":168075,"line_start":240,"line_end":240,"column_start":5,"column_end":47}},{"value":"/ for i in set.drain() {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168080,"byte_end":168106,"line_start":241,"line_end":241,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", i);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168111,"byte_end":168137,"line_start":242,"line_end":242,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168142,"byte_end":168147,"line_start":243,"line_end":243,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168152,"byte_end":168155,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ assert!(set.is_empty());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168160,"byte_end":168188,"line_start":245,"line_end":245,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168193,"byte_end":168200,"line_start":246,"line_end":246,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168205,"byte_end":168214,"line_start":247,"line_end":247,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1069},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168606,"byte_end":168611,"line_start":267,"line_end":267,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashSet<T, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, removing all values.","sig":null,"attributes":[{"value":"/ Clears the set, removing all values.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168334,"byte_end":168374,"line_start":254,"line_end":254,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168379,"byte_end":168382,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168387,"byte_end":168401,"line_start":256,"line_end":256,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168406,"byte_end":168409,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168414,"byte_end":168421,"line_start":258,"line_end":258,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168426,"byte_end":168453,"line_start":259,"line_end":259,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168458,"byte_end":168461,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168466,"byte_end":168497,"line_start":261,"line_end":261,"column_start":5,"column_end":36}},{"value":"/ v.insert(1);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168502,"byte_end":168518,"line_start":262,"line_end":262,"column_start":5,"column_end":21}},{"value":"/ v.clear();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168523,"byte_end":168537,"line_start":263,"line_end":263,"column_start":5,"column_end":19}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168542,"byte_end":168568,"line_start":264,"line_end":264,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168573,"byte_end":168580,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168585,"byte_end":168594,"line_start":266,"line_end":266,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1073},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169474,"byte_end":169485,"line_start":298,"line_end":298,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<HashSet<T, S>>::with_hasher","value":"pub fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash set which will use the given hasher to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates a new empty hash set which will use the given hasher to hash","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168734,"byte_end":168806,"line_start":277,"line_end":277,"column_start":5,"column_end":77}},{"value":"/ keys.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168811,"byte_end":168820,"line_start":278,"line_end":278,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168825,"byte_end":168828,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ The hash set is also created with the default initial capacity.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168833,"byte_end":168900,"line_start":280,"line_end":280,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168905,"byte_end":168908,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168913,"byte_end":168970,"line_start":282,"line_end":282,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168975,"byte_end":169042,"line_start":283,"line_end":283,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169047,"byte_end":169110,"line_start":284,"line_end":284,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169115,"byte_end":169179,"line_start":285,"line_end":285,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169184,"byte_end":169187,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169192,"byte_end":169206,"line_start":287,"line_end":287,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169211,"byte_end":169214,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169219,"byte_end":169226,"line_start":289,"line_end":289,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169231,"byte_end":169258,"line_start":290,"line_end":290,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169263,"byte_end":169311,"line_start":291,"line_end":291,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169316,"byte_end":169319,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169324,"byte_end":169366,"line_start":293,"line_end":293,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_hasher(s);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169371,"byte_end":169413,"line_start":294,"line_end":294,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169418,"byte_end":169436,"line_start":295,"line_end":295,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169441,"byte_end":169448,"line_start":296,"line_end":296,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169453,"byte_end":169462,"line_start":297,"line_end":297,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170442,"byte_end":170466,"line_start":326,"line_end":326,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<HashSet<T, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet` with the specified capacity, using\n `hasher` to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet` with the specified capacity, using","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169590,"byte_end":169655,"line_start":304,"line_end":304,"column_start":5,"column_end":70}},{"value":"/ `hasher` to hash the keys.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169660,"byte_end":169690,"line_start":305,"line_end":305,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169695,"byte_end":169698,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ The hash set will be able to hold at least `capacity` elements without","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169703,"byte_end":169777,"line_start":307,"line_end":307,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash set will not allocate.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169782,"byte_end":169851,"line_start":308,"line_end":308,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169856,"byte_end":169859,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169864,"byte_end":169921,"line_start":310,"line_end":310,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169926,"byte_end":169993,"line_start":311,"line_end":311,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":169998,"byte_end":170061,"line_start":312,"line_end":312,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170066,"byte_end":170130,"line_start":313,"line_end":313,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170135,"byte_end":170138,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170143,"byte_end":170157,"line_start":315,"line_end":315,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170162,"byte_end":170165,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170170,"byte_end":170177,"line_start":317,"line_end":317,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170182,"byte_end":170209,"line_start":318,"line_end":318,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170214,"byte_end":170262,"line_start":319,"line_end":319,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170267,"byte_end":170270,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170275,"byte_end":170317,"line_start":321,"line_end":321,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_capacity_and_hasher(10, s);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170322,"byte_end":170381,"line_start":322,"line_end":322,"column_start":5,"column_end":64}},{"value":"/ set.insert(1);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170386,"byte_end":170404,"line_start":323,"line_end":323,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170409,"byte_end":170416,"line_start":324,"line_end":324,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170421,"byte_end":170430,"line_start":325,"line_end":325,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1075},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171103,"byte_end":171109,"line_start":347,"line_end":347,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashSet<T, S>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the set's [`BuildHasher`].","sig":null,"attributes":[{"value":"/ Returns a reference to the set's [`BuildHasher`].","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170611,"byte_end":170664,"line_start":332,"line_end":332,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170669,"byte_end":170672,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170677,"byte_end":170755,"line_start":334,"line_end":334,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170760,"byte_end":170763,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170768,"byte_end":170782,"line_start":336,"line_end":336,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170787,"byte_end":170790,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170795,"byte_end":170802,"line_start":338,"line_end":338,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170807,"byte_end":170834,"line_start":339,"line_end":339,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170839,"byte_end":170887,"line_start":340,"line_end":340,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170892,"byte_end":170895,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ let hasher = DefaultHashBuilder::default();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170900,"byte_end":170947,"line_start":342,"line_end":342,"column_start":5,"column_end":52}},{"value":"/ let set: HashSet<i32> = HashSet::with_hasher(hasher);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":170952,"byte_end":171009,"line_start":343,"line_end":343,"column_start":5,"column_end":62}},{"value":"/ let hasher: &DefaultHashBuilder = set.hasher();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171014,"byte_end":171065,"line_start":344,"line_end":344,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171070,"byte_end":171077,"line_start":345,"line_end":345,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171082,"byte_end":171091,"line_start":346,"line_end":346,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171670,"byte_end":171677,"line_start":368,"line_end":368,"column_start":12,"column_end":19},"name":"reserve","qualname":"<HashSet<T, S>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the `HashSet`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171162,"byte_end":171238,"line_start":351,"line_end":351,"column_start":5,"column_end":81}},{"value":"/ in the `HashSet`. The collection may reserve more space to avoid","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171243,"byte_end":171311,"line_start":352,"line_end":352,"column_start":5,"column_end":73}},{"value":"/ frequent reallocations.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171316,"byte_end":171343,"line_start":353,"line_end":353,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171348,"byte_end":171351,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171356,"byte_end":171368,"line_start":355,"line_end":355,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171373,"byte_end":171376,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ Panics if the new allocation size overflows `usize`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171381,"byte_end":171437,"line_start":357,"line_end":357,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171442,"byte_end":171445,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171450,"byte_end":171464,"line_start":359,"line_end":359,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171469,"byte_end":171472,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171477,"byte_end":171484,"line_start":361,"line_end":361,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171489,"byte_end":171516,"line_start":362,"line_end":362,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = HashSet::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171521,"byte_end":171568,"line_start":363,"line_end":363,"column_start":5,"column_end":52}},{"value":"/ set.reserve(10);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171573,"byte_end":171593,"line_start":364,"line_end":364,"column_start":5,"column_end":25}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171598,"byte_end":171632,"line_start":365,"line_end":365,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171637,"byte_end":171644,"line_start":366,"line_end":366,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171649,"byte_end":171658,"line_start":367,"line_end":367,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172349,"byte_end":172360,"line_start":389,"line_end":389,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<HashSet<T, S>>::try_reserve","value":"pub fn try_reserve(&mut Self, usize) -> Result<(), CollectionAllocErr>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `HashSet<K,V>`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171758,"byte_end":171842,"line_start":372,"line_end":372,"column_start":5,"column_end":89}},{"value":"/ in the given `HashSet<K,V>`. The collection may reserve more space to avoid","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171847,"byte_end":171926,"line_start":373,"line_end":373,"column_start":5,"column_end":84}},{"value":"/ frequent reallocations.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171931,"byte_end":171958,"line_start":374,"line_end":374,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171963,"byte_end":171966,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171971,"byte_end":171983,"line_start":376,"line_end":376,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171988,"byte_end":171991,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":171996,"byte_end":172076,"line_start":378,"line_end":378,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172081,"byte_end":172097,"line_start":379,"line_end":379,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172102,"byte_end":172105,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172110,"byte_end":172124,"line_start":381,"line_end":381,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172129,"byte_end":172132,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172137,"byte_end":172144,"line_start":383,"line_end":383,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172149,"byte_end":172176,"line_start":384,"line_end":384,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = HashSet::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172181,"byte_end":172228,"line_start":385,"line_end":385,"column_start":5,"column_end":52}},{"value":"/ set.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172233,"byte_end":172311,"line_start":386,"line_end":386,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172316,"byte_end":172323,"line_start":387,"line_end":387,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172328,"byte_end":172337,"line_start":388,"line_end":388,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173025,"byte_end":173038,"line_start":410,"line_end":410,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<HashSet<T, S>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the set as much as possible. It will drop\n down as much as possible while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the set as much as possible. It will drop","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172479,"byte_end":172548,"line_start":393,"line_end":393,"column_start":5,"column_end":74}},{"value":"/ down as much as possible while maintaining the internal rules","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172553,"byte_end":172618,"line_start":394,"line_end":394,"column_start":5,"column_end":70}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172623,"byte_end":172696,"line_start":395,"line_end":395,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172701,"byte_end":172704,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172709,"byte_end":172723,"line_start":397,"line_end":397,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172728,"byte_end":172731,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172736,"byte_end":172743,"line_start":399,"line_end":399,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172748,"byte_end":172775,"line_start":400,"line_end":400,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172780,"byte_end":172783,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::with_capacity(100);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172788,"byte_end":172834,"line_start":402,"line_end":402,"column_start":5,"column_end":51}},{"value":"/ set.insert(1);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172839,"byte_end":172857,"line_start":403,"line_end":403,"column_start":5,"column_end":23}},{"value":"/ set.insert(2);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172862,"byte_end":172880,"line_start":404,"line_end":404,"column_start":5,"column_end":23}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172885,"byte_end":172920,"line_start":405,"line_end":405,"column_start":5,"column_end":40}},{"value":"/ set.shrink_to_fit();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172925,"byte_end":172949,"line_start":406,"line_end":406,"column_start":5,"column_end":29}},{"value":"/ assert!(set.capacity() >= 2);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172954,"byte_end":172987,"line_start":407,"line_end":407,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":172992,"byte_end":172999,"line_start":408,"line_end":408,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173004,"byte_end":173013,"line_start":409,"line_end":409,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173819,"byte_end":173828,"line_start":436,"line_end":436,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<HashSet<T, S>>::shrink_to","value":"pub fn shrink_to(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the set with a lower limit. It will drop\n down no lower than the supplied limit while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the set with a lower limit. It will drop","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173096,"byte_end":173164,"line_start":414,"line_end":414,"column_start":5,"column_end":73}},{"value":"/ down no lower than the supplied limit while maintaining the internal rules","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173169,"byte_end":173247,"line_start":415,"line_end":415,"column_start":5,"column_end":83}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173252,"byte_end":173325,"line_start":416,"line_end":416,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173330,"byte_end":173333,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ Panics if the current capacity is smaller than the supplied","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173338,"byte_end":173401,"line_start":418,"line_end":418,"column_start":5,"column_end":68}},{"value":"/ minimum capacity.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173406,"byte_end":173427,"line_start":419,"line_end":419,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173432,"byte_end":173435,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173440,"byte_end":173454,"line_start":421,"line_end":421,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173459,"byte_end":173462,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173467,"byte_end":173474,"line_start":423,"line_end":423,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173479,"byte_end":173506,"line_start":424,"line_end":424,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173511,"byte_end":173514,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::with_capacity(100);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173519,"byte_end":173565,"line_start":426,"line_end":426,"column_start":5,"column_end":51}},{"value":"/ set.insert(1);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173570,"byte_end":173588,"line_start":427,"line_end":427,"column_start":5,"column_end":23}},{"value":"/ set.insert(2);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173593,"byte_end":173611,"line_start":428,"line_end":428,"column_start":5,"column_end":23}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173616,"byte_end":173651,"line_start":429,"line_end":429,"column_start":5,"column_end":40}},{"value":"/ set.shrink_to(10);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173656,"byte_end":173678,"line_start":430,"line_end":430,"column_start":5,"column_end":27}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173683,"byte_end":173717,"line_start":431,"line_end":431,"column_start":5,"column_end":39}},{"value":"/ set.shrink_to(0);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173722,"byte_end":173743,"line_start":432,"line_end":432,"column_start":5,"column_end":26}},{"value":"/ assert!(set.capacity() >= 2);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173748,"byte_end":173781,"line_start":433,"line_end":433,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173786,"byte_end":173793,"line_start":434,"line_end":434,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173798,"byte_end":173807,"line_start":435,"line_end":435,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174735,"byte_end":174745,"line_start":464,"line_end":464,"column_start":12,"column_end":22},"name":"difference","qualname":"<HashSet<T, S>>::difference","value":"pub fn difference<'a>(&'a Self, &'a Self) -> Difference","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the difference,\n i.e., the values that are in `self` but not in `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the difference,","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173915,"byte_end":173965,"line_start":440,"line_end":440,"column_start":5,"column_end":55}},{"value":"/ i.e., the values that are in `self` but not in `other`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":173970,"byte_end":174029,"line_start":441,"line_end":441,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174034,"byte_end":174037,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174042,"byte_end":174056,"line_start":443,"line_end":443,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174061,"byte_end":174064,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174069,"byte_end":174076,"line_start":445,"line_end":445,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174081,"byte_end":174108,"line_start":446,"line_end":446,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174113,"byte_end":174173,"line_start":447,"line_end":447,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174178,"byte_end":174241,"line_start":448,"line_end":448,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174246,"byte_end":174249,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ // Can be seen as `a - b`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174254,"byte_end":174284,"line_start":450,"line_end":450,"column_start":5,"column_end":35}},{"value":"/ for x in a.difference(&b) {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174289,"byte_end":174320,"line_start":451,"line_end":451,"column_start":5,"column_end":36}},{"value":"/     println!(\"{}\", x); // Print 1","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174325,"byte_end":174362,"line_start":452,"line_end":452,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174367,"byte_end":174372,"line_start":453,"line_end":453,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174377,"byte_end":174380,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ let diff: HashSet<_> = a.difference(&b).collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174385,"byte_end":174439,"line_start":455,"line_end":455,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(diff, [1].iter().collect());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174444,"byte_end":174487,"line_start":456,"line_end":456,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174492,"byte_end":174495,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ // Note that difference is not symmetric,","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174500,"byte_end":174545,"line_start":458,"line_end":458,"column_start":5,"column_end":50}},{"value":"/ // and `b - a` means something else:","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174550,"byte_end":174590,"line_start":459,"line_end":459,"column_start":5,"column_end":45}},{"value":"/ let diff: HashSet<_> = b.difference(&a).collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174595,"byte_end":174649,"line_start":460,"line_end":460,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(diff, [4].iter().collect());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174654,"byte_end":174697,"line_start":461,"line_end":461,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174702,"byte_end":174709,"line_start":462,"line_end":462,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174714,"byte_end":174723,"line_start":463,"line_end":463,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175659,"byte_end":175679,"line_start":493,"line_end":493,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<HashSet<T, S>>::symmetric_difference","value":"pub fn symmetric_difference<'a>(&'a Self, &'a Self) -> SymmetricDifference","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the symmetric difference,\n i.e., the values that are in `self` or in `other` but not in both.","sig":null,"attributes":[{"value":"/ Visits the values representing the symmetric difference,","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174895,"byte_end":174955,"line_start":471,"line_end":471,"column_start":5,"column_end":65}},{"value":"/ i.e., the values that are in `self` or in `other` but not in both.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":174960,"byte_end":175030,"line_start":472,"line_end":472,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175035,"byte_end":175038,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175043,"byte_end":175057,"line_start":474,"line_end":474,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175062,"byte_end":175065,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175070,"byte_end":175077,"line_start":476,"line_end":476,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175082,"byte_end":175109,"line_start":477,"line_end":477,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175114,"byte_end":175174,"line_start":478,"line_end":478,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175179,"byte_end":175242,"line_start":479,"line_end":479,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175247,"byte_end":175250,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 4 in arbitrary order.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175255,"byte_end":175292,"line_start":481,"line_end":481,"column_start":5,"column_end":42}},{"value":"/ for x in a.symmetric_difference(&b) {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175297,"byte_end":175338,"line_start":482,"line_end":482,"column_start":5,"column_end":46}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175343,"byte_end":175369,"line_start":483,"line_end":483,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175374,"byte_end":175379,"line_start":484,"line_end":484,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175384,"byte_end":175387,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ let diff1: HashSet<_> = a.symmetric_difference(&b).collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175392,"byte_end":175457,"line_start":486,"line_end":486,"column_start":5,"column_end":70}},{"value":"/ let diff2: HashSet<_> = b.symmetric_difference(&a).collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175462,"byte_end":175527,"line_start":487,"line_end":487,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175532,"byte_end":175535,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(diff1, diff2);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175540,"byte_end":175569,"line_start":489,"line_end":489,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(diff1, [1, 4].iter().collect());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175574,"byte_end":175621,"line_start":490,"line_end":490,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175626,"byte_end":175633,"line_start":491,"line_end":491,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175638,"byte_end":175647,"line_start":492,"line_end":492,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176498,"byte_end":176510,"line_start":518,"line_end":518,"column_start":12,"column_end":24},"name":"intersection","qualname":"<HashSet<T, S>>::intersection","value":"pub fn intersection<'a>(&'a Self, &'a Self) -> Intersection","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the intersection,\n i.e., the values that are both in `self` and `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the intersection,","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175869,"byte_end":175921,"line_start":499,"line_end":499,"column_start":5,"column_end":57}},{"value":"/ i.e., the values that are both in `self` and `other`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175926,"byte_end":175983,"line_start":500,"line_end":500,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175988,"byte_end":175991,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":175996,"byte_end":176010,"line_start":502,"line_end":502,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176015,"byte_end":176018,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176023,"byte_end":176030,"line_start":504,"line_end":504,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176035,"byte_end":176062,"line_start":505,"line_end":505,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176067,"byte_end":176127,"line_start":506,"line_end":506,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176132,"byte_end":176195,"line_start":507,"line_end":507,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176200,"byte_end":176203,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ // Print 2, 3 in arbitrary order.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176208,"byte_end":176245,"line_start":509,"line_end":509,"column_start":5,"column_end":42}},{"value":"/ for x in a.intersection(&b) {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176250,"byte_end":176283,"line_start":510,"line_end":510,"column_start":5,"column_end":38}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176288,"byte_end":176314,"line_start":511,"line_end":511,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176319,"byte_end":176324,"line_start":512,"line_end":512,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176329,"byte_end":176332,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ let intersection: HashSet<_> = a.intersection(&b).collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176337,"byte_end":176401,"line_start":514,"line_end":514,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(intersection, [2, 3].iter().collect());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176406,"byte_end":176460,"line_start":515,"line_end":515,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176465,"byte_end":176472,"line_start":516,"line_end":516,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176477,"byte_end":176486,"line_start":517,"line_end":517,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177279,"byte_end":177284,"line_start":544,"line_end":544,"column_start":12,"column_end":17},"name":"union","qualname":"<HashSet<T, S>>::union","value":"pub fn union<'a>(&'a Self, &'a Self) -> Union","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the union,\n i.e., all the values in `self` or `other`, without duplicates.","sig":null,"attributes":[{"value":"/ Visits the values representing the union,","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176664,"byte_end":176709,"line_start":525,"line_end":525,"column_start":5,"column_end":50}},{"value":"/ i.e., all the values in `self` or `other`, without duplicates.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176714,"byte_end":176780,"line_start":526,"line_end":526,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176785,"byte_end":176788,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176793,"byte_end":176807,"line_start":528,"line_end":528,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176812,"byte_end":176815,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176820,"byte_end":176827,"line_start":530,"line_end":530,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176832,"byte_end":176859,"line_start":531,"line_end":531,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176864,"byte_end":176924,"line_start":532,"line_end":532,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176929,"byte_end":176992,"line_start":533,"line_end":533,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":176997,"byte_end":177000,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 2, 3, 4 in arbitrary order.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177005,"byte_end":177048,"line_start":535,"line_end":535,"column_start":5,"column_end":48}},{"value":"/ for x in a.union(&b) {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177053,"byte_end":177079,"line_start":536,"line_end":536,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177084,"byte_end":177110,"line_start":537,"line_end":537,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177115,"byte_end":177120,"line_start":538,"line_end":538,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177125,"byte_end":177128,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ let union: HashSet<_> = a.union(&b).collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177133,"byte_end":177183,"line_start":540,"line_end":540,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(union, [1, 2, 3, 4].iter().collect());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177188,"byte_end":177241,"line_start":541,"line_end":541,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177246,"byte_end":177253,"line_start":542,"line_end":542,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177258,"byte_end":177267,"line_start":543,"line_end":543,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":178080,"byte_end":178088,"line_start":569,"line_end":569,"column_start":12,"column_end":20},"name":"contains","qualname":"<HashSet<T, S>>::contains","value":"pub fn contains<Q: ?Sized>(&Self, &Q) -> bool where T: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains a value.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains a value.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177435,"byte_end":177482,"line_start":550,"line_end":550,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177487,"byte_end":177490,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177495,"byte_end":177562,"line_start":552,"line_end":552,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177567,"byte_end":177634,"line_start":553,"line_end":553,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177639,"byte_end":177658,"line_start":554,"line_end":554,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177663,"byte_end":177666,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177671,"byte_end":177685,"line_start":556,"line_end":556,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177690,"byte_end":177693,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177698,"byte_end":177705,"line_start":558,"line_end":558,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177710,"byte_end":177737,"line_start":559,"line_end":559,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177742,"byte_end":177745,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177750,"byte_end":177812,"line_start":561,"line_end":561,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(set.contains(&1), true);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177817,"byte_end":177856,"line_start":562,"line_end":562,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(set.contains(&4), false);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177861,"byte_end":177901,"line_start":563,"line_end":563,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177906,"byte_end":177913,"line_start":564,"line_end":564,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177918,"byte_end":177921,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177926,"byte_end":177985,"line_start":566,"line_end":566,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":177990,"byte_end":178054,"line_start":567,"line_end":567,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":178059,"byte_end":178068,"line_start":568,"line_end":568,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":178915,"byte_end":178918,"line_start":596,"line_end":596,"column_start":12,"column_end":15},"name":"get","qualname":"<HashSet<T, S>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&T> where T: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value in the set, if any, that is equal to the given value.","sig":null,"attributes":[{"value":"/ Returns a reference to the value in the set, if any, that is equal to the given value.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":178234,"byte_end":178324,"line_start":577,"line_end":577,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":178329,"byte_end":178332,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":178337,"byte_end":178404,"line_start":579,"line_end":579,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":178409,"byte_end":178476,"line_start":580,"line_end":580,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":178481,"byte_end":178500,"line_start":581,"line_end":581,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":178505,"byte_end":178508,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":178513,"byte_end":178527,"line_start":583,"line_end":583,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":178532,"byte_end":178535,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":178540,"byte_end":178547,"line_start":585,"line_end":585,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":178552,"byte_end":178579,"line_start":586,"line_end":586,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":178584,"byte_end":178587,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":178592,"byte_end":178654,"line_start":588,"line_end":588,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(set.get(&2), Some(&2));","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":178659,"byte_end":178697,"line_start":589,"line_end":589,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.get(&4), None);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":178702,"byte_end":178736,"line_start":590,"line_end":590,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":178741,"byte_end":178748,"line_start":591,"line_end":591,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":178753,"byte_end":178756,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":178761,"byte_end":178820,"line_start":593,"line_end":593,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":178825,"byte_end":178889,"line_start":594,"line_end":594,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":178894,"byte_end":178903,"line_start":595,"line_end":595,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179619,"byte_end":179630,"line_start":621,"line_end":621,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<HashSet<T, S>>::is_disjoint","value":"pub fn is_disjoint(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n This is equivalent to checking for an empty intersection.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179087,"byte_end":179155,"line_start":604,"line_end":604,"column_start":5,"column_end":73}},{"value":"/ This is equivalent to checking for an empty intersection.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179160,"byte_end":179221,"line_start":605,"line_end":605,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179226,"byte_end":179229,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179234,"byte_end":179248,"line_start":607,"line_end":607,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179253,"byte_end":179256,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179261,"byte_end":179268,"line_start":609,"line_end":609,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179273,"byte_end":179300,"line_start":610,"line_end":610,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179305,"byte_end":179308,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179313,"byte_end":179373,"line_start":612,"line_end":612,"column_start":5,"column_end":65}},{"value":"/ let mut b = HashSet::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179378,"byte_end":179409,"line_start":613,"line_end":613,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179414,"byte_end":179417,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179422,"byte_end":179462,"line_start":615,"line_end":615,"column_start":5,"column_end":45}},{"value":"/ b.insert(4);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179467,"byte_end":179483,"line_start":616,"line_end":616,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179488,"byte_end":179528,"line_start":617,"line_end":617,"column_start":5,"column_end":45}},{"value":"/ b.insert(1);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179533,"byte_end":179549,"line_start":618,"line_end":618,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), false);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179554,"byte_end":179595,"line_start":619,"line_end":619,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179600,"byte_end":179607,"line_start":620,"line_end":620,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1095},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180252,"byte_end":180261,"line_start":642,"line_end":642,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<HashSet<T, S>>::is_subset","value":"pub fn is_subset(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a subset of another,\n i.e., `other` contains at least all the values in `self`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a subset of another,","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179721,"byte_end":179774,"line_start":625,"line_end":625,"column_start":5,"column_end":58}},{"value":"/ i.e., `other` contains at least all the values in `self`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179779,"byte_end":179840,"line_start":626,"line_end":626,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179845,"byte_end":179848,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179853,"byte_end":179867,"line_start":628,"line_end":628,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179872,"byte_end":179875,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179880,"byte_end":179887,"line_start":630,"line_end":630,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179892,"byte_end":179919,"line_start":631,"line_end":631,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179924,"byte_end":179927,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ let sup: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179932,"byte_end":179994,"line_start":633,"line_end":633,"column_start":5,"column_end":67}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":179999,"byte_end":180032,"line_start":634,"line_end":634,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180037,"byte_end":180040,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180045,"byte_end":180087,"line_start":636,"line_end":636,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180092,"byte_end":180110,"line_start":637,"line_end":637,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180115,"byte_end":180157,"line_start":638,"line_end":638,"column_start":5,"column_end":47}},{"value":"/ set.insert(4);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180162,"byte_end":180180,"line_start":639,"line_end":639,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), false);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180185,"byte_end":180228,"line_start":640,"line_end":640,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180233,"byte_end":180240,"line_start":641,"line_end":641,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1097},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181029,"byte_end":181040,"line_start":671,"line_end":671,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<HashSet<T, S>>::is_superset","value":"pub fn is_superset(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a superset of another,\n i.e., `self` contains at least all the values in `other`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a superset of another,","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180439,"byte_end":180494,"line_start":650,"line_end":650,"column_start":5,"column_end":60}},{"value":"/ i.e., `self` contains at least all the values in `other`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180499,"byte_end":180560,"line_start":651,"line_end":651,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180565,"byte_end":180568,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180573,"byte_end":180587,"line_start":653,"line_end":653,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180592,"byte_end":180595,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180600,"byte_end":180607,"line_start":655,"line_end":655,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180612,"byte_end":180639,"line_start":656,"line_end":656,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180644,"byte_end":180647,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ let sub: HashSet<_> = [1, 2].iter().cloned().collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180652,"byte_end":180711,"line_start":658,"line_end":658,"column_start":5,"column_end":64}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180716,"byte_end":180749,"line_start":659,"line_end":659,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180754,"byte_end":180757,"line_start":660,"line_end":660,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180762,"byte_end":180807,"line_start":661,"line_end":661,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180812,"byte_end":180815,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ set.insert(0);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180820,"byte_end":180838,"line_start":663,"line_end":663,"column_start":5,"column_end":23}},{"value":"/ set.insert(1);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180843,"byte_end":180861,"line_start":664,"line_end":664,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180866,"byte_end":180911,"line_start":665,"line_end":665,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180916,"byte_end":180919,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180924,"byte_end":180942,"line_start":667,"line_end":667,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), true);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180947,"byte_end":180991,"line_start":668,"line_end":668,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":180996,"byte_end":181003,"line_start":669,"line_end":669,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181008,"byte_end":181017,"line_start":670,"line_end":670,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1098},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181586,"byte_end":181592,"line_start":693,"line_end":693,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashSet<T, S>>::insert","value":"pub fn insert(&mut Self, T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set.","sig":null,"attributes":[{"value":"/ Adds a value to the set.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181113,"byte_end":181141,"line_start":675,"line_end":675,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181146,"byte_end":181149,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ If the set did not have this value present, `true` is returned.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181154,"byte_end":181221,"line_start":677,"line_end":677,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181226,"byte_end":181229,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ If the set did have this value present, `false` is returned.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181234,"byte_end":181298,"line_start":679,"line_end":679,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181303,"byte_end":181306,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181311,"byte_end":181325,"line_start":681,"line_end":681,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181330,"byte_end":181333,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181338,"byte_end":181345,"line_start":683,"line_end":683,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181350,"byte_end":181377,"line_start":684,"line_end":684,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181382,"byte_end":181385,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181390,"byte_end":181423,"line_start":686,"line_end":686,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181428,"byte_end":181431,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.insert(2), true);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181436,"byte_end":181472,"line_start":688,"line_end":688,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(set.insert(2), false);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181477,"byte_end":181514,"line_start":689,"line_end":689,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.len(), 1);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181519,"byte_end":181548,"line_start":690,"line_end":690,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181553,"byte_end":181560,"line_start":691,"line_end":691,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181565,"byte_end":181574,"line_start":692,"line_end":692,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1099},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":182192,"byte_end":182199,"line_start":713,"line_end":713,"column_start":12,"column_end":19},"name":"replace","qualname":"<HashSet<T, S>>::replace","value":"pub fn replace(&mut Self, T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is equal to the given\n one. Returns the replaced value.","sig":null,"attributes":[{"value":"/ Adds a value to the set, replacing the existing value, if any, that is equal to the given","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181680,"byte_end":181773,"line_start":697,"line_end":697,"column_start":5,"column_end":98}},{"value":"/ one. Returns the replaced value.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181778,"byte_end":181814,"line_start":698,"line_end":698,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181819,"byte_end":181822,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181827,"byte_end":181841,"line_start":700,"line_end":700,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181846,"byte_end":181849,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181854,"byte_end":181861,"line_start":702,"line_end":702,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181866,"byte_end":181893,"line_start":703,"line_end":703,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181898,"byte_end":181901,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181906,"byte_end":181939,"line_start":705,"line_end":705,"column_start":5,"column_end":38}},{"value":"/ set.insert(Vec::<i32>::new());","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181944,"byte_end":181978,"line_start":706,"line_end":706,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181983,"byte_end":181986,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 0);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":181991,"byte_end":182047,"line_start":708,"line_end":708,"column_start":5,"column_end":61}},{"value":"/ set.replace(Vec::with_capacity(10));","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":182052,"byte_end":182092,"line_start":709,"line_end":709,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 10);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":182097,"byte_end":182154,"line_start":710,"line_end":710,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":182159,"byte_end":182166,"line_start":711,"line_end":711,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":182171,"byte_end":182180,"line_start":712,"line_end":712,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183172,"byte_end":183178,"line_start":745,"line_end":745,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashSet<T, S>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> bool where T: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Removes a value from the set. Returns whether the value was\n present in the set.","sig":null,"attributes":[{"value":"/ Removes a value from the set. Returns whether the value was","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":182485,"byte_end":182548,"line_start":723,"line_end":723,"column_start":5,"column_end":68}},{"value":"/ present in the set.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":182553,"byte_end":182576,"line_start":724,"line_end":724,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":182581,"byte_end":182584,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":182589,"byte_end":182656,"line_start":726,"line_end":726,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":182661,"byte_end":182728,"line_start":727,"line_end":727,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":182733,"byte_end":182752,"line_start":728,"line_end":728,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":182757,"byte_end":182760,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":182765,"byte_end":182779,"line_start":730,"line_end":730,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":182784,"byte_end":182787,"line_start":731,"line_end":731,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":182792,"byte_end":182799,"line_start":732,"line_end":732,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":182804,"byte_end":182831,"line_start":733,"line_end":733,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":182836,"byte_end":182839,"line_start":734,"line_end":734,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":182844,"byte_end":182877,"line_start":735,"line_end":735,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":182882,"byte_end":182885,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":182890,"byte_end":182908,"line_start":737,"line_end":737,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.remove(&2), true);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":182913,"byte_end":182950,"line_start":738,"line_end":738,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.remove(&2), false);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":182955,"byte_end":182993,"line_start":739,"line_end":739,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":182998,"byte_end":183005,"line_start":740,"line_end":740,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183010,"byte_end":183013,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183018,"byte_end":183077,"line_start":742,"line_end":742,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183082,"byte_end":183146,"line_start":743,"line_end":743,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183151,"byte_end":183160,"line_start":744,"line_end":744,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":184013,"byte_end":184017,"line_start":772,"line_end":772,"column_start":12,"column_end":16},"name":"take","qualname":"<HashSet<T, S>>::take","value":"pub fn take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where T: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the given one.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183332,"byte_end":183417,"line_start":753,"line_end":753,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183422,"byte_end":183425,"line_start":754,"line_end":754,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183430,"byte_end":183497,"line_start":755,"line_end":755,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183502,"byte_end":183569,"line_start":756,"line_end":756,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183574,"byte_end":183593,"line_start":757,"line_end":757,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183598,"byte_end":183601,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183606,"byte_end":183620,"line_start":759,"line_end":759,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183625,"byte_end":183628,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183633,"byte_end":183640,"line_start":761,"line_end":761,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183645,"byte_end":183672,"line_start":762,"line_end":762,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183677,"byte_end":183680,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183685,"byte_end":183751,"line_start":764,"line_end":764,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(set.take(&2), Some(2));","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183756,"byte_end":183794,"line_start":765,"line_end":765,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.take(&2), None);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183799,"byte_end":183834,"line_start":766,"line_end":766,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183839,"byte_end":183846,"line_start":767,"line_end":767,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183851,"byte_end":183854,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183859,"byte_end":183918,"line_start":769,"line_end":769,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183923,"byte_end":183987,"line_start":770,"line_end":770,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":183992,"byte_end":184001,"line_start":771,"line_end":771,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1105},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":184616,"byte_end":184622,"line_start":794,"line_end":794,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashSet<T, S>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":184188,"byte_end":184245,"line_start":780,"line_end":780,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":184250,"byte_end":184253,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all elements `e` such that `f(&e)` returns `false`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":184258,"byte_end":184336,"line_start":782,"line_end":782,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":184341,"byte_end":184344,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":184349,"byte_end":184363,"line_start":784,"line_end":784,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":184368,"byte_end":184371,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":184376,"byte_end":184383,"line_start":786,"line_end":786,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":184388,"byte_end":184415,"line_start":787,"line_end":787,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":184420,"byte_end":184423,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ let xs = [1,2,3,4,5,6];","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":184428,"byte_end":184455,"line_start":789,"line_end":789,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = xs.iter().cloned().collect();","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":184460,"byte_end":184521,"line_start":790,"line_end":790,"column_start":5,"column_end":66}},{"value":"/ set.retain(|&k| k % 2 == 0);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":184526,"byte_end":184558,"line_start":791,"line_end":791,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":184563,"byte_end":184592,"line_start":792,"line_end":792,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":184597,"byte_end":184604,"line_start":793,"line_end":793,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1161},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":189855,"byte_end":189859,"line_start":1017,"line_end":1017,"column_start":12,"column_end":16},"name":"Iter","qualname":"::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1164}],"decl_id":null,"docs":" An iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ An iterator over the items of a `HashSet`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":189602,"byte_end":189648,"line_start":1010,"line_end":1010,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":189649,"byte_end":189652,"line_start":1011,"line_end":1011,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`HashSet`].","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":189653,"byte_end":189720,"line_start":1012,"line_end":1012,"column_start":1,"column_end":68}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":189721,"byte_end":189756,"line_start":1013,"line_end":1013,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":189757,"byte_end":189760,"line_start":1014,"line_end":1014,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":189761,"byte_end":189797,"line_start":1015,"line_end":1015,"column_start":1,"column_end":37}},{"value":"/ [`iter`]: struct.HashSet.html#method.iter","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":189798,"byte_end":189843,"line_start":1016,"line_end":1016,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1165},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":190224,"byte_end":190232,"line_start":1028,"line_end":1028,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":1167}],"decl_id":null,"docs":" An owning iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ An owning iterator over the items of a `HashSet`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":189899,"byte_end":189952,"line_start":1021,"line_end":1021,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":189953,"byte_end":189956,"line_start":1022,"line_end":1022,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`HashSet`][`HashSet`]","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":189957,"byte_end":190039,"line_start":1023,"line_end":1023,"column_start":1,"column_end":83}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":190040,"byte_end":190115,"line_start":1024,"line_end":1024,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":190116,"byte_end":190119,"line_start":1025,"line_end":1025,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":190120,"byte_end":190156,"line_start":1026,"line_end":1026,"column_start":1,"column_end":37}},{"value":"/ [`into_iter`]: struct.HashSet.html#method.into_iter","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":190157,"byte_end":190212,"line_start":1027,"line_end":1027,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1168},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":190537,"byte_end":190542,"line_start":1039,"line_end":1039,"column_start":12,"column_end":17},"name":"Drain","qualname":"::set::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":1171}],"decl_id":null,"docs":" A draining iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ A draining iterator over the items of a `HashSet`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":190273,"byte_end":190327,"line_start":1032,"line_end":1032,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":190328,"byte_end":190331,"line_start":1033,"line_end":1033,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`HashSet`].","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":190332,"byte_end":190400,"line_start":1034,"line_end":1034,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":190401,"byte_end":190436,"line_start":1035,"line_end":1035,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":190437,"byte_end":190440,"line_start":1036,"line_end":1036,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":190441,"byte_end":190477,"line_start":1037,"line_end":1037,"column_start":1,"column_end":37}},{"value":"/ [`drain`]: struct.HashSet.html#method.drain","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":190478,"byte_end":190525,"line_start":1038,"line_end":1038,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1172},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":190892,"byte_end":190904,"line_start":1050,"line_end":1050,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::set::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":1176},{"krate":0,"index":1177}],"decl_id":null,"docs":" A lazy iterator producing elements in the intersection of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the intersection of `HashSet`s.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":190588,"byte_end":190661,"line_start":1043,"line_end":1043,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":190662,"byte_end":190665,"line_start":1044,"line_end":1044,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`intersection`] method on [`HashSet`].","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":190666,"byte_end":190741,"line_start":1045,"line_end":1045,"column_start":1,"column_end":76}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":190742,"byte_end":190777,"line_start":1046,"line_end":1046,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":190778,"byte_end":190781,"line_start":1047,"line_end":1047,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":190782,"byte_end":190818,"line_start":1048,"line_end":1048,"column_start":1,"column_end":37}},{"value":"/ [`intersection`]: struct.HashSet.html#method.intersection","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":190819,"byte_end":190880,"line_start":1049,"line_end":1049,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":1178},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":191324,"byte_end":191334,"line_start":1064,"line_end":1064,"column_start":12,"column_end":22},"name":"Difference","qualname":"::set::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":1182},{"krate":0,"index":1183}],"decl_id":null,"docs":" A lazy iterator producing elements in the difference of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the difference of `HashSet`s.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":191028,"byte_end":191099,"line_start":1057,"line_end":1057,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":191100,"byte_end":191103,"line_start":1058,"line_end":1058,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`difference`] method on [`HashSet`].","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":191104,"byte_end":191177,"line_start":1059,"line_end":1059,"column_start":1,"column_end":74}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":191178,"byte_end":191213,"line_start":1060,"line_end":1060,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":191214,"byte_end":191217,"line_start":1061,"line_end":1061,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":191218,"byte_end":191254,"line_start":1062,"line_end":1062,"column_start":1,"column_end":37}},{"value":"/ [`difference`]: struct.HashSet.html#method.difference","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":191255,"byte_end":191312,"line_start":1063,"line_end":1063,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1184},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":191794,"byte_end":191813,"line_start":1078,"line_end":1078,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::set::SymmetricDifference","value":"SymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":1188}],"decl_id":null,"docs":" A lazy iterator producing elements in the symmetric difference of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the symmetric difference of `HashSet`s.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":191458,"byte_end":191539,"line_start":1071,"line_end":1071,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":191540,"byte_end":191543,"line_start":1072,"line_end":1072,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`symmetric_difference`] method on","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":191544,"byte_end":191614,"line_start":1073,"line_end":1073,"column_start":1,"column_end":71}},{"value":"/ [`HashSet`]. See its documentation for more.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":191615,"byte_end":191663,"line_start":1074,"line_end":1074,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":191664,"byte_end":191667,"line_start":1075,"line_end":1075,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":191668,"byte_end":191704,"line_start":1076,"line_end":1076,"column_start":1,"column_end":37}},{"value":"/ [`symmetric_difference`]: struct.HashSet.html#method.symmetric_difference","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":191705,"byte_end":191782,"line_start":1077,"line_end":1077,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":1189},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":192166,"byte_end":192171,"line_start":1089,"line_end":1089,"column_start":12,"column_end":17},"name":"Union","qualname":"::set::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":1193}],"decl_id":null,"docs":" A lazy iterator producing elements in the union of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the union of `HashSet`s.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":191890,"byte_end":191956,"line_start":1082,"line_end":1082,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":191957,"byte_end":191960,"line_start":1083,"line_end":1083,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`union`] method on [`HashSet`].","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":191961,"byte_end":192029,"line_start":1084,"line_end":1084,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":192030,"byte_end":192065,"line_start":1085,"line_end":1085,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":192066,"byte_end":192069,"line_start":1086,"line_end":1086,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":192070,"byte_end":192106,"line_start":1087,"line_end":1087,"column_start":1,"column_end":37}},{"value":"/ [`union`]: struct.HashSet.html#method.union","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":192107,"byte_end":192154,"line_start":1088,"line_end":1088,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":1349},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":1208,"byte_end":1216,"line_start":50,"line_end":50,"column_start":9,"column_end":17},"name":"hash_map","qualname":"::hash_map","value":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1350}],"decl_id":null,"docs":" A hash map implemented with quadratic probing and SIMD lookup.\n","sig":null,"attributes":[{"value":"/ A hash map implemented with quadratic probing and SIMD lookup.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":1223,"byte_end":1289,"line_start":51,"line_end":51,"column_start":5,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":1351},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":1761,"byte_end":1769,"line_start":67,"line_end":67,"column_start":9,"column_end":17},"name":"hash_set","qualname":"::hash_set","value":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1352}],"decl_id":null,"docs":" A hash set implemented as a `HashMap` where the value is `()`.\n","sig":null,"attributes":[{"value":"/ A hash set implemented as a `HashMap` where the value is `()`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":1776,"byte_end":1842,"line_start":68,"line_end":68,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1432},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":2537,"byte_end":2553,"line_start":90,"line_end":90,"column_start":5,"column_end":21},"name":"CapacityOverflow","qualname":"::CollectionAllocErr::CapacityOverflow","value":"CollectionAllocErr::CapacityOverflow","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Error due to the computed capacity exceeding the collection's maximum\n (usually `isize::MAX` bytes).\n","sig":null,"attributes":[{"value":"/ Error due to the computed capacity exceeding the collection's maximum","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":2421,"byte_end":2494,"line_start":88,"line_end":88,"column_start":5,"column_end":78}},{"value":"/ (usually `isize::MAX` bytes).","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":2499,"byte_end":2532,"line_start":89,"line_end":89,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1434},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":2628,"byte_end":2636,"line_start":92,"line_end":92,"column_start":5,"column_end":13},"name":"AllocErr","qualname":"::CollectionAllocErr::AllocErr","value":"CollectionAllocErr::AllocErr","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Error due to the allocator (see the `AllocErr` type's docs).\n","sig":null,"attributes":[{"value":"/ Error due to the allocator (see the `AllocErr` type's docs).","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":2559,"byte_end":2623,"line_start":91,"line_end":91,"column_start":5,"column_end":69}}]},{"kind":"Enum","id":{"krate":0,"index":1431},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":2396,"byte_end":2414,"line_start":87,"line_end":87,"column_start":10,"column_end":28},"name":"CollectionAllocErr","qualname":"::CollectionAllocErr","value":"pub enum CollectionAllocErr { CapacityOverflow, AllocErr, }","parent":null,"children":[{"krate":0,"index":1432},{"krate":0,"index":1434}],"decl_id":null,"docs":" Augments `AllocErr` with a `CapacityOverflow` variant.\n","sig":null,"attributes":[{"value":"/ Augments `AllocErr` with a `CapacityOverflow` variant.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\lib.rs","byte_start":2289,"byte_end":2347,"line_start":85,"line_end":85,"column_start":1,"column_end":59}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\fx.rs","byte_start":5722,"byte_end":5730,"line_start":31,"line_end":31,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\fx.rs","byte_start":5813,"byte_end":5821,"line_start":38,"line_end":38,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\fx.rs","byte_start":5977,"byte_end":5985,"line_start":45,"line_end":45,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15057,"byte_end":15064,"line_start":200,"line_end":200,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16042,"byte_end":16049,"line_start":234,"line_end":234,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24293,"byte_end":24300,"line_start":551,"line_end":551,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":143},{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":153},{"krate":0,"index":156},{"krate":0,"index":159},{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":36912,"byte_end":36919,"line_start":957,"line_end":957,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":39808,"byte_end":39815,"line_start":1018,"line_end":1018,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":40136,"byte_end":40143,"line_start":1034,"line_end":1034,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":40237,"byte_end":40244,"line_start":1042,"line_end":1042,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":40460,"byte_end":40467,"line_start":1053,"line_end":1053,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":40736,"byte_end":40743,"line_start":1064,"line_end":1064,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":41554,"byte_end":41558,"line_start":1096,"line_end":1096,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":41761,"byte_end":41765,"line_start":1106,"line_end":1106,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":42331,"byte_end":42338,"line_start":1125,"line_end":1125,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":42978,"byte_end":42986,"line_start":1147,"line_end":1147,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":43606,"byte_end":43610,"line_start":1170,"line_end":1170,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":43773,"byte_end":43777,"line_start":1179,"line_end":1179,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":44301,"byte_end":44307,"line_start":1197,"line_end":1197,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":44472,"byte_end":44478,"line_start":1206,"line_end":1206,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":44948,"byte_end":44953,"line_start":1223,"line_end":1223,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":47191,"byte_end":47209,"line_start":1297,"line_end":1297,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":48001,"byte_end":48019,"line_start":1326,"line_end":1326,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":321},{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":48931,"byte_end":48946,"line_start":1358,"line_end":1358,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":335},{"krate":0,"index":338},{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50325,"byte_end":50336,"line_start":1411,"line_end":1411,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":53341,"byte_end":53360,"line_start":1512,"line_end":1512,"column_start":16,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":56090,"byte_end":56107,"line_start":1607,"line_end":1607,"column_start":19,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":57501,"byte_end":57519,"line_start":1655,"line_end":1655,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":57696,"byte_end":57707,"line_start":1661,"line_end":1661,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":58038,"byte_end":58057,"line_start":1670,"line_end":1670,"column_start":36,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":58312,"byte_end":58329,"line_start":1679,"line_end":1679,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":58494,"byte_end":58509,"line_start":1685,"line_end":1685,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":405}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":59110,"byte_end":59115,"line_start":1705,"line_end":1705,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":59672,"byte_end":59685,"line_start":1724,"line_end":1724,"column_start":31,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":59778,"byte_end":59791,"line_start":1731,"line_end":1731,"column_start":31,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":59893,"byte_end":59906,"line_start":1739,"line_end":1739,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":60390,"byte_end":60401,"line_start":1758,"line_end":1758,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":61028,"byte_end":61035,"line_start":1784,"line_end":1784,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":61779,"byte_end":61783,"line_start":1813,"line_end":1813,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":62149,"byte_end":62153,"line_start":1828,"line_end":1828,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":62272,"byte_end":62276,"line_start":1835,"line_end":1835,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":62319,"byte_end":62326,"line_start":1837,"line_end":1837,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":62704,"byte_end":62711,"line_start":1852,"line_end":1852,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":62829,"byte_end":62836,"line_start":1858,"line_end":1858,"column_start":30,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":62877,"byte_end":62884,"line_start":1860,"line_end":1860,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":63090,"byte_end":63098,"line_start":1870,"line_end":1870,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":63359,"byte_end":63367,"line_start":1882,"line_end":1882,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":63481,"byte_end":63489,"line_start":1888,"line_end":1888,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":63540,"byte_end":63548,"line_start":1890,"line_end":1890,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":529}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":63710,"byte_end":63714,"line_start":1896,"line_end":1896,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":63995,"byte_end":63999,"line_start":1908,"line_end":1908,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":64117,"byte_end":64121,"line_start":1914,"line_end":1914,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":64164,"byte_end":64170,"line_start":1916,"line_end":1916,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":64451,"byte_end":64457,"line_start":1928,"line_end":1928,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":64575,"byte_end":64581,"line_start":1934,"line_end":1934,"column_start":30,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":64624,"byte_end":64633,"line_start":1936,"line_end":1936,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":64922,"byte_end":64931,"line_start":1948,"line_end":1948,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":65049,"byte_end":65058,"line_start":1954,"line_end":1954,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":65099,"byte_end":65108,"line_start":1956,"line_end":1956,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":65324,"byte_end":65329,"line_start":1966,"line_end":1966,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":65594,"byte_end":65599,"line_start":1978,"line_end":1978,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":65717,"byte_end":65722,"line_start":1984,"line_end":1984,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":65763,"byte_end":65768,"line_start":1986,"line_end":1986,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":65968,"byte_end":65973,"line_start":1996,"line_end":1996,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":605},{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68935,"byte_end":68940,"line_start":2105,"line_end":2105,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69696,"byte_end":69709,"line_start":2134,"line_end":2134,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76364,"byte_end":76375,"line_start":2364,"line_end":2364,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":78049,"byte_end":78056,"line_start":2430,"line_end":2430,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":78458,"byte_end":78465,"line_start":2446,"line_end":2446,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":648}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":79217,"byte_end":79224,"line_start":2470,"line_end":2470,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\sse2.rs","byte_start":12843757,"byte_end":12843762,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1387},{"krate":0,"index":1388},{"krate":0,"index":1395},{"krate":0,"index":1396},{"krate":0,"index":1397},{"krate":0,"index":1398},{"krate":0,"index":1399},{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1402}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\bitmask.rs","byte_start":157702,"byte_end":157709,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\bitmask.rs","byte_start":159822,"byte_end":159829,"line_start":85,"line_end":85,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\bitmask.rs","byte_start":160117,"byte_end":160128,"line_start":99,"line_end":99,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":111667,"byte_end":111678,"line_start":72,"line_end":72,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":766},{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":114338,"byte_end":114346,"line_start":152,"line_end":152,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":780},{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":118289,"byte_end":118295,"line_start":263,"line_end":263,"column_start":25,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":118321,"byte_end":118327,"line_start":265,"line_end":265,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":793}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":118425,"byte_end":118431,"line_start":272,"line_end":272,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":804},{"krate":0,"index":806}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":120449,"byte_end":120457,"line_start":348,"line_end":348,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":821},{"krate":0,"index":823},{"krate":0,"index":825},{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":837},{"krate":0,"index":840},{"krate":0,"index":843},{"krate":0,"index":845},{"krate":0,"index":848},{"krate":0,"index":852},{"krate":0,"index":855},{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":143902,"byte_end":143910,"line_start":947,"line_end":947,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":143955,"byte_end":143963,"line_start":948,"line_end":948,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":144010,"byte_end":144018,"line_start":950,"line_end":950,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":875}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":146481,"byte_end":146489,"line_start":1019,"line_end":1019,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":880}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":146857,"byte_end":146865,"line_start":1035,"line_end":1035,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":885}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":147792,"byte_end":147804,"line_start":1071,"line_end":1071,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":150480,"byte_end":150492,"line_start":1137,"line_end":1137,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":150523,"byte_end":150535,"line_start":1138,"line_end":1138,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":150561,"byte_end":150573,"line_start":1140,"line_end":1140,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":901}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":150828,"byte_end":150840,"line_start":1152,"line_end":1152,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":152231,"byte_end":152243,"line_start":1190,"line_end":1190,"column_start":27,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":152421,"byte_end":152428,"line_start":1198,"line_end":1198,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":915}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":152601,"byte_end":152608,"line_start":1208,"line_end":1208,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":920}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":153223,"byte_end":153230,"line_start":1231,"line_end":1231,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":153263,"byte_end":153270,"line_start":1232,"line_end":1232,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":153467,"byte_end":153478,"line_start":1241,"line_end":1241,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":932}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":153596,"byte_end":153607,"line_start":1248,"line_end":1248,"column_start":25,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":153652,"byte_end":153663,"line_start":1249,"line_end":1249,"column_start":25,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":154244,"byte_end":154255,"line_start":1271,"line_end":1271,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":939}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":154709,"byte_end":154720,"line_start":1290,"line_end":1290,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":154990,"byte_end":155001,"line_start":1304,"line_end":1304,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":155034,"byte_end":155045,"line_start":1305,"line_end":1305,"column_start":27,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":155585,"byte_end":155593,"line_start":1322,"line_end":1322,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":958}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":155715,"byte_end":155723,"line_start":1329,"line_end":1329,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":155772,"byte_end":155780,"line_start":1330,"line_end":1330,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":155823,"byte_end":155831,"line_start":1332,"line_end":1332,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":965}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":156500,"byte_end":156508,"line_start":1355,"line_end":1355,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":970}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":156831,"byte_end":156839,"line_start":1372,"line_end":1372,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":156876,"byte_end":156884,"line_start":1373,"line_end":1373,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\scopeguard.rs","byte_start":160648,"byte_end":160658,"line_start":20,"line_end":20,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":994},{"krate":0,"index":995}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\scopeguard.rs","byte_start":160811,"byte_end":160821,"line_start":31,"line_end":31,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":999}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\scopeguard.rs","byte_start":160965,"byte_end":160975,"line_start":41,"line_end":41,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1003}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165124,"byte_end":165131,"line_start":119,"line_end":119,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1059},{"krate":0,"index":1060}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166152,"byte_end":166159,"line_start":158,"line_end":158,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1069}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168670,"byte_end":168677,"line_start":272,"line_end":272,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075},{"krate":0,"index":1076},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1082},{"krate":0,"index":1084},{"krate":0,"index":1086},{"krate":0,"index":1088},{"krate":0,"index":1090},{"krate":0,"index":1093},{"krate":0,"index":1095},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1100},{"krate":0,"index":1102},{"krate":0,"index":1105}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":184765,"byte_end":184772,"line_start":802,"line_end":802,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1111}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":185020,"byte_end":185027,"line_start":816,"line_end":816,"column_start":19,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":185109,"byte_end":185116,"line_start":823,"line_end":823,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1119}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":185337,"byte_end":185344,"line_start":833,"line_end":833,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1123}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":185617,"byte_end":185624,"line_start":846,"line_end":846,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1128}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":185856,"byte_end":185863,"line_start":857,"line_end":857,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1135}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":186089,"byte_end":186096,"line_start":868,"line_end":868,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1140}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":192459,"byte_end":192466,"line_start":1103,"line_end":1103,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1206}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":193306,"byte_end":193310,"line_start":1135,"line_end":1135,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1209}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":193459,"byte_end":193463,"line_start":1143,"line_end":1143,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1215}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":193722,"byte_end":193726,"line_start":1155,"line_end":1155,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1219}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":193837,"byte_end":193841,"line_start":1161,"line_end":1161,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":193888,"byte_end":193892,"line_start":1163,"line_end":1163,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1224}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":194049,"byte_end":194057,"line_start":1169,"line_end":1169,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1230}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":194316,"byte_end":194324,"line_start":1181,"line_end":1181,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1233}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":194431,"byte_end":194439,"line_start":1187,"line_end":1187,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":194482,"byte_end":194490,"line_start":1189,"line_end":1189,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1238}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":194704,"byte_end":194709,"line_start":1196,"line_end":1196,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1242},{"krate":0,"index":1243},{"krate":0,"index":1245}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":194972,"byte_end":194977,"line_start":1208,"line_end":1208,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1248}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":195088,"byte_end":195093,"line_start":1214,"line_end":1214,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":195140,"byte_end":195145,"line_start":1216,"line_end":1216,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1253}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":195363,"byte_end":195375,"line_start":1223,"line_end":1223,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1258}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":195559,"byte_end":195571,"line_start":1233,"line_end":1233,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1265}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":196039,"byte_end":196051,"line_start":1257,"line_end":1257,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1269}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":196276,"byte_end":196288,"line_start":1267,"line_end":1267,"column_start":30,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":196369,"byte_end":196379,"line_start":1274,"line_end":1274,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1276}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":196561,"byte_end":196571,"line_start":1284,"line_end":1284,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1281},{"krate":0,"index":1282},{"krate":0,"index":1283}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":197043,"byte_end":197053,"line_start":1308,"line_end":1308,"column_start":30,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":197139,"byte_end":197149,"line_start":1315,"line_end":1315,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1290}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":197366,"byte_end":197385,"line_start":1325,"line_end":1325,"column_start":22,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1294}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":197556,"byte_end":197575,"line_start":1334,"line_end":1334,"column_start":29,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1299},{"krate":0,"index":1300},{"krate":0,"index":1301}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":197877,"byte_end":197896,"line_start":1351,"line_end":1351,"column_start":30,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":197982,"byte_end":198001,"line_start":1358,"line_end":1358,"column_start":27,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1308}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":198218,"byte_end":198223,"line_start":1368,"line_end":1368,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1312}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":198381,"byte_end":198386,"line_start":1377,"line_end":1377,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":198472,"byte_end":198477,"line_start":1384,"line_end":1384,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1319}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":198701,"byte_end":198706,"line_start":1394,"line_end":1394,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1326}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\fx.rs","byte_start":5722,"byte_end":5730,"line_start":31,"line_end":31,"column_start":18,"column_end":26},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":26},"to":{"krate":1,"index":2994}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\fx.rs","byte_start":5813,"byte_end":5821,"line_start":38,"line_end":38,"column_start":6,"column_end":14},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":26},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\fx.rs","byte_start":5977,"byte_end":5985,"line_start":45,"line_end":45,"column_start":17,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":26},"to":{"krate":1,"index":9617}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":15057,"byte_end":15064,"line_start":200,"line_end":200,"column_start":12,"column_end":19},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1359},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":16042,"byte_end":16049,"line_start":234,"line_end":234,"column_start":15,"column_end":22},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1359},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":24293,"byte_end":24300,"line_start":551,"line_end":551,"column_start":15,"column_end":22},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1359},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":36912,"byte_end":36919,"line_start":957,"line_end":957,"column_start":15,"column_end":22},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1359},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":39808,"byte_end":39815,"line_start":1018,"line_end":1018,"column_start":29,"column_end":36},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1359},"to":{"krate":1,"index":2667}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":40136,"byte_end":40143,"line_start":1034,"line_end":1034,"column_start":22,"column_end":29},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1359},"to":{"krate":1,"index":2672}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":40237,"byte_end":40244,"line_start":1042,"line_end":1042,"column_start":25,"column_end":32},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1359},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":40460,"byte_end":40467,"line_start":1053,"line_end":1053,"column_start":27,"column_end":34},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1359},"to":{"krate":1,"index":2994}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":40736,"byte_end":40743,"line_start":1064,"line_end":1064,"column_start":40,"column_end":47},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1359},"to":{"krate":1,"index":3312}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":41554,"byte_end":41558,"line_start":1096,"line_end":1096,"column_start":22,"column_end":26},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":198},"to":{"krate":1,"index":2637}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":41761,"byte_end":41765,"line_start":1106,"line_end":1106,"column_start":41,"column_end":45},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":198},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":42331,"byte_end":42338,"line_start":1125,"line_end":1125,"column_start":12,"column_end":19},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":212},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":42978,"byte_end":42986,"line_start":1147,"line_end":1147,"column_start":12,"column_end":20},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":222},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":43606,"byte_end":43610,"line_start":1170,"line_end":1170,"column_start":22,"column_end":26},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":230},"to":{"krate":1,"index":2637}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":43773,"byte_end":43777,"line_start":1179,"line_end":1179,"column_start":34,"column_end":38},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":230},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":44301,"byte_end":44307,"line_start":1197,"line_end":1197,"column_start":22,"column_end":28},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":243},"to":{"krate":1,"index":2637}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":44472,"byte_end":44478,"line_start":1206,"line_end":1206,"column_start":34,"column_end":40},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":243},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":44948,"byte_end":44953,"line_start":1223,"line_end":1223,"column_start":12,"column_end":17},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":47191,"byte_end":47209,"line_start":1297,"line_end":1297,"column_start":19,"column_end":37},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":270},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":48001,"byte_end":48019,"line_start":1326,"line_end":1326,"column_start":19,"column_end":37},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":270},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":48931,"byte_end":48946,"line_start":1358,"line_end":1358,"column_start":19,"column_end":34},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":300},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":50325,"byte_end":50336,"line_start":1411,"line_end":1411,"column_start":19,"column_end":30},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":276},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":53341,"byte_end":53360,"line_start":1512,"line_end":1512,"column_start":16,"column_end":35},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":287},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":56090,"byte_end":56107,"line_start":1607,"line_end":1607,"column_start":19,"column_end":36},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":293},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":57501,"byte_end":57519,"line_start":1655,"line_end":1655,"column_start":25,"column_end":43},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":270},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":57696,"byte_end":57707,"line_start":1661,"line_end":1661,"column_start":39,"column_end":50},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":276},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":58038,"byte_end":58057,"line_start":1670,"line_end":1670,"column_start":36,"column_end":55},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":287},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":58312,"byte_end":58329,"line_start":1679,"line_end":1679,"column_start":25,"column_end":42},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":293},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":58494,"byte_end":58509,"line_start":1685,"line_end":1685,"column_start":25,"column_end":40},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":300},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":59110,"byte_end":59115,"line_start":1705,"line_end":1705,"column_start":39,"column_end":44},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":406},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":59672,"byte_end":59685,"line_start":1724,"line_end":1724,"column_start":31,"column_end":44},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":422},"to":{"krate":1,"index":3016}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":59778,"byte_end":59791,"line_start":1731,"line_end":1731,"column_start":31,"column_end":44},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":422},"to":{"krate":1,"index":3028}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":59893,"byte_end":59906,"line_start":1739,"line_end":1739,"column_start":39,"column_end":52},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":422},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":60390,"byte_end":60401,"line_start":1758,"line_end":1758,"column_start":32,"column_end":43},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":443},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":61028,"byte_end":61035,"line_start":1784,"line_end":1784,"column_start":32,"column_end":39},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1359},"to":{"krate":1,"index":7473}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":61779,"byte_end":61783,"line_start":1813,"line_end":1813,"column_start":29,"column_end":33},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":198},"to":{"krate":1,"index":7653}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":62149,"byte_end":62153,"line_start":1828,"line_end":1828,"column_start":34,"column_end":38},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":198},"to":{"krate":1,"index":7542}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":62272,"byte_end":62276,"line_start":1835,"line_end":1835,"column_start":30,"column_end":34},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":198},"to":{"krate":1,"index":7921}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":62319,"byte_end":62326,"line_start":1837,"line_end":1837,"column_start":29,"column_end":36},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":212},"to":{"krate":1,"index":7653}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":62704,"byte_end":62711,"line_start":1852,"line_end":1852,"column_start":34,"column_end":41},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":212},"to":{"krate":1,"index":7542}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":62829,"byte_end":62836,"line_start":1858,"line_end":1858,"column_start":30,"column_end":37},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":212},"to":{"krate":1,"index":7921}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":62877,"byte_end":62884,"line_start":1860,"line_end":1860,"column_start":27,"column_end":34},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":212},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":63090,"byte_end":63098,"line_start":1870,"line_end":1870,"column_start":25,"column_end":33},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":222},"to":{"krate":1,"index":7653}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":63359,"byte_end":63367,"line_start":1882,"line_end":1882,"column_start":34,"column_end":42},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":222},"to":{"krate":1,"index":7542}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":63481,"byte_end":63489,"line_start":1888,"line_end":1888,"column_start":30,"column_end":38},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":222},"to":{"krate":1,"index":7921}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":63540,"byte_end":63548,"line_start":1890,"line_end":1890,"column_start":41,"column_end":49},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":222},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":63710,"byte_end":63714,"line_start":1896,"line_end":1896,"column_start":29,"column_end":33},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":230},"to":{"krate":1,"index":7653}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":63995,"byte_end":63999,"line_start":1908,"line_end":1908,"column_start":34,"column_end":38},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":230},"to":{"krate":1,"index":7542}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":64117,"byte_end":64121,"line_start":1914,"line_end":1914,"column_start":30,"column_end":34},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":230},"to":{"krate":1,"index":7921}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":64164,"byte_end":64170,"line_start":1916,"line_end":1916,"column_start":29,"column_end":35},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":243},"to":{"krate":1,"index":7653}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":64451,"byte_end":64457,"line_start":1928,"line_end":1928,"column_start":34,"column_end":40},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":243},"to":{"krate":1,"index":7542}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":64575,"byte_end":64581,"line_start":1934,"line_end":1934,"column_start":30,"column_end":36},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":243},"to":{"krate":1,"index":7921}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":64624,"byte_end":64633,"line_start":1936,"line_end":1936,"column_start":29,"column_end":38},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":265},"to":{"krate":1,"index":7653}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":64922,"byte_end":64931,"line_start":1948,"line_end":1948,"column_start":34,"column_end":43},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":265},"to":{"krate":1,"index":7542}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":65049,"byte_end":65058,"line_start":1954,"line_end":1954,"column_start":30,"column_end":39},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":265},"to":{"krate":1,"index":7921}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":65099,"byte_end":65108,"line_start":1956,"line_end":1956,"column_start":27,"column_end":36},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":265},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":65324,"byte_end":65329,"line_start":1966,"line_end":1966,"column_start":29,"column_end":34},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":256},"to":{"krate":1,"index":7653}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":65594,"byte_end":65599,"line_start":1978,"line_end":1978,"column_start":34,"column_end":39},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":256},"to":{"krate":1,"index":7542}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":65717,"byte_end":65722,"line_start":1984,"line_end":1984,"column_start":30,"column_end":35},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":256},"to":{"krate":1,"index":7921}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":65763,"byte_end":65768,"line_start":1986,"line_end":1986,"column_start":27,"column_end":32},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":256},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":65968,"byte_end":65973,"line_start":1996,"line_end":1996,"column_start":19,"column_end":24},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":68935,"byte_end":68940,"line_start":2105,"line_end":2105,"column_start":28,"column_end":33},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":69696,"byte_end":69709,"line_start":2134,"line_end":2134,"column_start":19,"column_end":32},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":422},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":76364,"byte_end":76375,"line_start":2364,"line_end":2364,"column_start":19,"column_end":30},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":443},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":78049,"byte_end":78056,"line_start":2430,"line_end":2430,"column_start":40,"column_end":47},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1359},"to":{"krate":1,"index":7469}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":78458,"byte_end":78465,"line_start":2446,"line_end":2446,"column_start":34,"column_end":41},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1359},"to":{"krate":1,"index":7482}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\map.rs","byte_start":79217,"byte_end":79224,"line_start":2470,"line_end":2470,"column_start":46,"column_end":53},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1359},"to":{"krate":1,"index":7482}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\sse2.rs","byte_start":12843757,"byte_end":12843762,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1403},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\bitmask.rs","byte_start":157702,"byte_end":157709,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1409},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\bitmask.rs","byte_start":159822,"byte_end":159829,"line_start":85,"line_end":85,"column_start":23,"column_end":30},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1409},"to":{"krate":1,"index":7473}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\bitmask.rs","byte_start":160117,"byte_end":160128,"line_start":99,"line_end":99,"column_start":19,"column_end":30},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":749},"to":{"krate":1,"index":7653}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":111667,"byte_end":111678,"line_start":72,"line_end":72,"column_start":6,"column_end":17},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1415},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":114338,"byte_end":114346,"line_start":152,"line_end":152,"column_start":19,"column_end":27},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":775},"to":{"krate":1,"index":7653}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":118289,"byte_end":118295,"line_start":263,"line_end":263,"column_start":25,"column_end":31},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":3016}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":118321,"byte_end":118327,"line_start":265,"line_end":265,"column_start":19,"column_end":25},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":786},"to":{"krate":1,"index":2637}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":118425,"byte_end":118431,"line_start":272,"line_end":272,"column_start":9,"column_end":15},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":786},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":120449,"byte_end":120457,"line_start":348,"line_end":348,"column_start":9,"column_end":17},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":807},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":143902,"byte_end":143910,"line_start":947,"line_end":947,"column_start":25,"column_end":33},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":807},"to":{"krate":1,"index":3016}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":143955,"byte_end":143963,"line_start":948,"line_end":948,"column_start":25,"column_end":33},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":807},"to":{"krate":1,"index":3028}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":144010,"byte_end":144018,"line_start":950,"line_end":950,"column_start":26,"column_end":34},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":807},"to":{"krate":1,"index":2637}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":146481,"byte_end":146489,"line_start":1019,"line_end":1019,"column_start":18,"column_end":26},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":807},"to":{"krate":1,"index":3251}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":146857,"byte_end":146865,"line_start":1035,"line_end":1035,"column_start":26,"column_end":34},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":807},"to":{"krate":1,"index":7473}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":147792,"byte_end":147804,"line_start":1071,"line_end":1071,"column_start":9,"column_end":21},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":886},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":150480,"byte_end":150492,"line_start":1137,"line_end":1137,"column_start":25,"column_end":37},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":886},"to":{"krate":1,"index":3016}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":150523,"byte_end":150535,"line_start":1138,"line_end":1138,"column_start":25,"column_end":37},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":886},"to":{"krate":1,"index":3028}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":150561,"byte_end":150573,"line_start":1140,"line_end":1140,"column_start":19,"column_end":31},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":886},"to":{"krate":1,"index":2637}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":150828,"byte_end":150840,"line_start":1152,"line_end":1152,"column_start":22,"column_end":34},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":886},"to":{"krate":1,"index":7653}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":152231,"byte_end":152243,"line_start":1190,"line_end":1190,"column_start":27,"column_end":39},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":886},"to":{"krate":1,"index":7921}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":152421,"byte_end":152428,"line_start":1198,"line_end":1198,"column_start":19,"column_end":26},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":909},"to":{"krate":1,"index":2637}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":152601,"byte_end":152608,"line_start":1208,"line_end":1208,"column_start":22,"column_end":29},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":909},"to":{"krate":1,"index":7653}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":153223,"byte_end":153230,"line_start":1231,"line_end":1231,"column_start":31,"column_end":38},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":909},"to":{"krate":1,"index":7542}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":153263,"byte_end":153270,"line_start":1232,"line_end":1232,"column_start":27,"column_end":34},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":909},"to":{"krate":1,"index":7921}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":153467,"byte_end":153478,"line_start":1241,"line_end":1241,"column_start":9,"column_end":20},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":925},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":153596,"byte_end":153607,"line_start":1248,"line_end":1248,"column_start":25,"column_end":36},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":3016}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":153652,"byte_end":153663,"line_start":1249,"line_end":1249,"column_start":25,"column_end":36},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":3028}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":154244,"byte_end":154255,"line_start":1271,"line_end":1271,"column_start":18,"column_end":29},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":3251}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":154709,"byte_end":154720,"line_start":1290,"line_end":1290,"column_start":22,"column_end":33},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":7653}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":154990,"byte_end":155001,"line_start":1304,"line_end":1304,"column_start":31,"column_end":42},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":7542}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":155034,"byte_end":155045,"line_start":1305,"line_end":1305,"column_start":27,"column_end":38},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":7921}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":155585,"byte_end":155593,"line_start":1322,"line_end":1322,"column_start":9,"column_end":17},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":949},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":155715,"byte_end":155723,"line_start":1329,"line_end":1329,"column_start":25,"column_end":33},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":949},"to":{"krate":1,"index":3016}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":155772,"byte_end":155780,"line_start":1330,"line_end":1330,"column_start":25,"column_end":33},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":949},"to":{"krate":1,"index":3028}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":155823,"byte_end":155831,"line_start":1332,"line_end":1332,"column_start":18,"column_end":26},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":949},"to":{"krate":1,"index":3251}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":156500,"byte_end":156508,"line_start":1355,"line_end":1355,"column_start":22,"column_end":30},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":949},"to":{"krate":1,"index":7653}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":156831,"byte_end":156839,"line_start":1372,"line_end":1372,"column_start":31,"column_end":39},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":949},"to":{"krate":1,"index":7542}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\raw\\mod.rs","byte_start":156876,"byte_end":156884,"line_start":1373,"line_end":1373,"column_start":27,"column_end":35},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":949},"to":{"krate":1,"index":7921}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\scopeguard.rs","byte_start":160648,"byte_end":160658,"line_start":20,"line_end":20,"column_start":22,"column_end":32},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":983},"to":{"krate":1,"index":3227}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\scopeguard.rs","byte_start":160811,"byte_end":160821,"line_start":31,"line_end":31,"column_start":25,"column_end":35},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":983},"to":{"krate":1,"index":3240}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\scopeguard.rs","byte_start":160965,"byte_end":160975,"line_start":41,"line_end":41,"column_start":21,"column_end":31},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":983},"to":{"krate":1,"index":3251}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":165124,"byte_end":165131,"line_start":119,"line_end":119,"column_start":20,"column_end":27},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1423},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":166152,"byte_end":166159,"line_start":158,"line_end":158,"column_start":12,"column_end":19},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1423},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":168670,"byte_end":168677,"line_start":272,"line_end":272,"column_start":12,"column_end":19},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1423},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":184765,"byte_end":184772,"line_start":802,"line_end":802,"column_start":26,"column_end":33},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1423},"to":{"krate":1,"index":2667}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":185020,"byte_end":185027,"line_start":816,"line_end":816,"column_start":19,"column_end":26},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1423},"to":{"krate":1,"index":2672}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":185109,"byte_end":185116,"line_start":823,"line_end":823,"column_start":27,"column_end":34},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1423},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":185337,"byte_end":185344,"line_start":833,"line_end":833,"column_start":32,"column_end":39},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1423},"to":{"krate":1,"index":7469}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":185617,"byte_end":185624,"line_start":846,"line_end":846,"column_start":26,"column_end":33},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1423},"to":{"krate":1,"index":7482}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":185856,"byte_end":185863,"line_start":857,"line_end":857,"column_start":34,"column_end":41},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1423},"to":{"krate":1,"index":7482}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":186089,"byte_end":186096,"line_start":868,"line_end":868,"column_start":24,"column_end":31},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1423},"to":{"krate":1,"index":2994}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":192459,"byte_end":192466,"line_start":1103,"line_end":1103,"column_start":29,"column_end":36},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1423},"to":{"krate":1,"index":7473}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":193306,"byte_end":193310,"line_start":1135,"line_end":1135,"column_start":19,"column_end":23},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1161},"to":{"krate":1,"index":2637}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":193459,"byte_end":193463,"line_start":1143,"line_end":1143,"column_start":26,"column_end":30},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1161},"to":{"krate":1,"index":7653}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":193722,"byte_end":193726,"line_start":1155,"line_end":1155,"column_start":35,"column_end":39},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1161},"to":{"krate":1,"index":7542}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":193837,"byte_end":193841,"line_start":1161,"line_end":1161,"column_start":27,"column_end":31},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1161},"to":{"krate":1,"index":7921}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":193888,"byte_end":193892,"line_start":1163,"line_end":1163,"column_start":36,"column_end":40},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1161},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":194049,"byte_end":194057,"line_start":1169,"line_end":1169,"column_start":22,"column_end":30},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1165},"to":{"krate":1,"index":7653}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":194316,"byte_end":194324,"line_start":1181,"line_end":1181,"column_start":31,"column_end":39},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1165},"to":{"krate":1,"index":7542}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":194431,"byte_end":194439,"line_start":1187,"line_end":1187,"column_start":27,"column_end":35},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1165},"to":{"krate":1,"index":7921}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":194482,"byte_end":194490,"line_start":1189,"line_end":1189,"column_start":36,"column_end":44},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1165},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":194704,"byte_end":194709,"line_start":1196,"line_end":1196,"column_start":22,"column_end":27},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1168},"to":{"krate":1,"index":7653}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":194972,"byte_end":194977,"line_start":1208,"line_end":1208,"column_start":31,"column_end":36},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1168},"to":{"krate":1,"index":7542}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":195088,"byte_end":195093,"line_start":1214,"line_end":1214,"column_start":27,"column_end":32},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1168},"to":{"krate":1,"index":7921}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":195140,"byte_end":195145,"line_start":1216,"line_end":1216,"column_start":36,"column_end":41},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1168},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":195363,"byte_end":195375,"line_start":1223,"line_end":1223,"column_start":22,"column_end":34},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1172},"to":{"krate":1,"index":2637}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":195559,"byte_end":195571,"line_start":1233,"line_end":1233,"column_start":29,"column_end":41},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1172},"to":{"krate":1,"index":7653}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":196039,"byte_end":196051,"line_start":1257,"line_end":1257,"column_start":27,"column_end":39},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1172},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":196276,"byte_end":196288,"line_start":1267,"line_end":1267,"column_start":30,"column_end":42},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1172},"to":{"krate":1,"index":7921}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":196369,"byte_end":196379,"line_start":1274,"line_end":1274,"column_start":22,"column_end":32},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1178},"to":{"krate":1,"index":2637}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":196561,"byte_end":196571,"line_start":1284,"line_end":1284,"column_start":29,"column_end":39},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1178},"to":{"krate":1,"index":7653}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":197043,"byte_end":197053,"line_start":1308,"line_end":1308,"column_start":30,"column_end":40},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1178},"to":{"krate":1,"index":7921}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":197139,"byte_end":197149,"line_start":1315,"line_end":1315,"column_start":27,"column_end":37},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1178},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":197366,"byte_end":197385,"line_start":1325,"line_end":1325,"column_start":22,"column_end":41},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1184},"to":{"krate":1,"index":2637}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":197556,"byte_end":197575,"line_start":1334,"line_end":1334,"column_start":29,"column_end":48},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1184},"to":{"krate":1,"index":7653}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":197877,"byte_end":197896,"line_start":1351,"line_end":1351,"column_start":30,"column_end":49},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1184},"to":{"krate":1,"index":7921}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":197982,"byte_end":198001,"line_start":1358,"line_end":1358,"column_start":27,"column_end":46},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1184},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":198218,"byte_end":198223,"line_start":1368,"line_end":1368,"column_start":22,"column_end":27},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1189},"to":{"krate":1,"index":2637}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":198381,"byte_end":198386,"line_start":1377,"line_end":1377,"column_start":30,"column_end":35},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1189},"to":{"krate":1,"index":7921}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":198472,"byte_end":198477,"line_start":1384,"line_end":1384,"column_start":27,"column_end":32},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1189},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hashbrown-0.2.2\\src\\set.rs","byte_start":198701,"byte_end":198706,"line_start":1394,"line_end":1394,"column_start":29,"column_end":34},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1189},"to":{"krate":1,"index":7653}}]}
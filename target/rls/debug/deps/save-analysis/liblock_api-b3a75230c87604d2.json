{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9","program":"C:\\Users\\user\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","lock_api","--edition=2018","C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=b3a75230c87604d2","-C","extra-filename=-b3a75230c87604d2","--out-dir","c:\\Users\\user\\Desktop\\Patnic-CLI\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\user\\Desktop\\Patnic-CLI\\target\\rls\\debug\\deps","--extern","scopeguard=c:\\Users\\user\\Desktop\\Patnic-CLI\\target\\rls\\debug\\deps\\libscopeguard-4490e9a243b7bc14.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\user\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\user\\Desktop\\Patnic-CLI\\target\\rls\\debug\\deps\\liblock_api-b3a75230c87604d2.rmeta"},"prelude":{"crate_id":{"name":"lock_api","disambiguator":[209178416245097327,0]},"crate_root":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src","external_crates":[{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[11647781593125135854,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13810207351280985286,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[10856308035441163175,0]}},{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","num":4,"id":{"name":"scopeguard","disambiguator":[1251302162167888798,0]}}],"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":333,"byte_end":4099,"line_start":8,"line_end":113,"column_start":1,"column_end":26}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":4017,"byte_end":4018,"line_start":107,"line_end":107,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":4058,"byte_end":4059,"line_start":110,"line_end":110,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":4097,"byte_end":4098,"line_start":113,"line_end":113,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":333,"byte_end":4099,"line_start":8,"line_end":113,"column_start":1,"column_end":26},"name":"","qualname":"::","value":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":928}],"decl_id":null,"docs":" This library provides type-safe and fully-featured `Mutex` and `RwLock`\n types which wrap a simple raw mutex or rwlock type. This has several\n benefits: not only does it eliminate a large portion of the work in\n implementing custom lock types, it also allows users to write code which is\n generic with regards to different lock implementations.","sig":null,"attributes":[{"value":"/ This library provides type-safe and fully-featured `Mutex` and `RwLock`","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":333,"byte_end":408,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ types which wrap a simple raw mutex or rwlock type. This has several","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":409,"byte_end":481,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"/ benefits: not only does it eliminate a large portion of the work in","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":482,"byte_end":553,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/ implementing custom lock types, it also allows users to write code which is","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":554,"byte_end":633,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ generic with regards to different lock implementations.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":634,"byte_end":693,"line_start":12,"line_end":12,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":694,"byte_end":697,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Basic usage of this crate is very straightforward:","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":698,"byte_end":752,"line_start":14,"line_end":14,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":753,"byte_end":756,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ 1. Create a raw lock type. This should only contain the lock state, not any","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":757,"byte_end":836,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/    data protected by the lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":837,"byte_end":871,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"/ 2. Implement the `RawMutex` trait for your custom lock type.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":872,"byte_end":936,"line_start":18,"line_end":18,"column_start":1,"column_end":65}},{"value":"/ 3. Export your mutex as a type alias for `lock_api::Mutex`, and","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":937,"byte_end":1004,"line_start":19,"line_end":19,"column_start":1,"column_end":68}},{"value":"/    your mutex guard as a type alias for `lock_api::MutexGuard`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1005,"byte_end":1072,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"/    See the [example](#example) below for details.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1073,"byte_end":1126,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1127,"byte_end":1130,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This process is similar for RwLocks, except that two guards need to be","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1131,"byte_end":1205,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/ exported instead of one. (Or 3 guards if your type supports upgradable read","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1206,"byte_end":1285,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ locks, see [extension traits](#extension-traits) below for details)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1286,"byte_end":1357,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1358,"byte_end":1361,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1362,"byte_end":1375,"line_start":27,"line_end":27,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1376,"byte_end":1379,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1380,"byte_end":1387,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use lock_api::{RawMutex, Mutex, GuardSend};","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1388,"byte_end":1435,"line_start":30,"line_end":30,"column_start":1,"column_end":48}},{"value":"/ use std::sync::atomic::{AtomicBool, Ordering};","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1436,"byte_end":1486,"line_start":31,"line_end":31,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1487,"byte_end":1490,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // 1. Define our raw lock type","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1491,"byte_end":1525,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/ pub struct RawSpinlock(AtomicBool);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1526,"byte_end":1565,"line_start":34,"line_end":34,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1566,"byte_end":1569,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // 2. Implement RawMutex for this type","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1570,"byte_end":1612,"line_start":36,"line_end":36,"column_start":1,"column_end":43}},{"value":"/ unsafe impl RawMutex for RawSpinlock {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1613,"byte_end":1655,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"/     const INIT: RawSpinlock = RawSpinlock(AtomicBool::new(false));","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1656,"byte_end":1726,"line_start":38,"line_end":38,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1727,"byte_end":1730,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/     // A spinlock guard can be sent to another thread and unlocked there","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1731,"byte_end":1807,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/     type GuardMarker = GuardSend;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1808,"byte_end":1845,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1846,"byte_end":1849,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/     fn lock(&self) {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1850,"byte_end":1874,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"/         // Note: This isn't the best way of implementing a spinlock, but it","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1875,"byte_end":1954,"line_start":44,"line_end":44,"column_start":1,"column_end":80}},{"value":"/         // suffices for the sake of this example.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":1955,"byte_end":2008,"line_start":45,"line_end":45,"column_start":1,"column_end":54}},{"value":"/         while !self.try_lock() {}","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2009,"byte_end":2046,"line_start":46,"line_end":46,"column_start":1,"column_end":38}},{"value":"/     }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2047,"byte_end":2056,"line_start":47,"line_end":47,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2057,"byte_end":2060,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/     fn try_lock(&self) -> bool {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2061,"byte_end":2097,"line_start":49,"line_end":49,"column_start":1,"column_end":37}},{"value":"/         self.0","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2098,"byte_end":2116,"line_start":50,"line_end":50,"column_start":1,"column_end":19}},{"value":"/             .compare_exchange(false, true, Ordering::Acquire, Ordering::Relaxed)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2117,"byte_end":2201,"line_start":51,"line_end":51,"column_start":1,"column_end":85}},{"value":"/             .is_ok()","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2202,"byte_end":2226,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2227,"byte_end":2236,"line_start":53,"line_end":53,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2237,"byte_end":2240,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/     unsafe fn unlock(&self) {","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2241,"byte_end":2274,"line_start":55,"line_end":55,"column_start":1,"column_end":34}},{"value":"/         self.0.store(false, Ordering::Release);","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2275,"byte_end":2326,"line_start":56,"line_end":56,"column_start":1,"column_end":52}},{"value":"/     }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2327,"byte_end":2336,"line_start":57,"line_end":57,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2337,"byte_end":2342,"line_start":58,"line_end":58,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2343,"byte_end":2346,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // 3. Export the wrappers. This are the types that your users will actually use.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2347,"byte_end":2431,"line_start":60,"line_end":60,"column_start":1,"column_end":85}},{"value":"/ pub type Spinlock<T> = lock_api::Mutex<RawSpinlock, T>;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2432,"byte_end":2491,"line_start":61,"line_end":61,"column_start":1,"column_end":60}},{"value":"/ pub type SpinlockGuard<'a, T> = lock_api::MutexGuard<'a, RawSpinlock, T>;","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2492,"byte_end":2569,"line_start":62,"line_end":62,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2570,"byte_end":2577,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2578,"byte_end":2581,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ # Extension traits","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2582,"byte_end":2604,"line_start":65,"line_end":65,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2605,"byte_end":2608,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ In addition to basic locking & unlocking functionality, you have the option","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2609,"byte_end":2688,"line_start":67,"line_end":67,"column_start":1,"column_end":80}},{"value":"/ of exposing additional functionality in your lock types by implementing","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2689,"byte_end":2764,"line_start":68,"line_end":68,"column_start":1,"column_end":76}},{"value":"/ additional traits for it. Examples of extension features include:","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2765,"byte_end":2834,"line_start":69,"line_end":69,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2835,"byte_end":2838,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ - Fair unlocking (`RawMutexFair`, `RawRwLockFair`)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2839,"byte_end":2893,"line_start":71,"line_end":71,"column_start":1,"column_end":55}},{"value":"/ - Lock timeouts (`RawMutexTimed`, `RawRwLockTimed`)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2894,"byte_end":2949,"line_start":72,"line_end":72,"column_start":1,"column_end":56}},{"value":"/ - Downgradable write locks (`RawRwLockDowngradable`)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":2950,"byte_end":3006,"line_start":73,"line_end":73,"column_start":1,"column_end":57}},{"value":"/ - Recursive read locks (`RawRwLockRecursive`)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":3007,"byte_end":3056,"line_start":74,"line_end":74,"column_start":1,"column_end":50}},{"value":"/ - Upgradable read locks (`RawRwLockUpgrade`)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":3057,"byte_end":3105,"line_start":75,"line_end":75,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":3106,"byte_end":3109,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ The `Mutex` and `RwLock` wrappers will automatically expose this additional","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":3110,"byte_end":3189,"line_start":77,"line_end":77,"column_start":1,"column_end":80}},{"value":"/ functionality if the raw lock type implements these extension traits.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":3190,"byte_end":3263,"line_start":78,"line_end":78,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":3264,"byte_end":3267,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ # Cargo features","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":3268,"byte_end":3288,"line_start":80,"line_end":80,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":3289,"byte_end":3292,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ This crate supports three cargo features:","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":3293,"byte_end":3338,"line_start":82,"line_end":82,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":3339,"byte_end":3342,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ - `owning_ref`: Allows your lock types to be used with the `owning_ref` crate.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":3343,"byte_end":3425,"line_start":84,"line_end":84,"column_start":1,"column_end":83}},{"value":"/ - `arc_lock`: Enables locking from an `Arc`. This enables types such as `ArcMutexGuard`. Note that this","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":3426,"byte_end":3533,"line_start":85,"line_end":85,"column_start":1,"column_end":108}},{"value":"/   requires the `alloc` crate to be present.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":3534,"byte_end":3581,"line_start":86,"line_end":86,"column_start":1,"column_end":48}},{"value":"no_std","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":3583,"byte_end":3593,"line_start":88,"line_end":88,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":3594,"byte_end":3616,"line_start":89,"line_end":89,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":3617,"byte_end":3643,"line_start":90,"line_end":90,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":5},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":3819,"byte_end":3828,"line_start":99,"line_end":99,"column_start":12,"column_end":21},"name":"GuardSend","qualname":"::GuardSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is `Send`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":3734,"byte_end":3807,"line_start":98,"line_end":98,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":8},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":3924,"byte_end":3935,"line_start":102,"line_end":102,"column_start":12,"column_end":23},"name":"GuardNoSend","qualname":"::GuardNoSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is not `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is not `Send`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":3835,"byte_end":3912,"line_start":101,"line_end":101,"column_start":1,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":5199,"byte_end":5207,"line_start":36,"line_end":36,"column_start":18,"column_end":26},"name":"RawMutex","qualname":"::mutex::RawMutex","value":"RawMutex","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38}],"decl_id":null,"docs":" Basic operations for a mutex.","sig":null,"attributes":[{"value":"/ Basic operations for a mutex.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":4865,"byte_end":4898,"line_start":27,"line_end":27,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":4899,"byte_end":4902,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `Mutex` to form a safe and","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":4903,"byte_end":4978,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ fully-functioning mutex type.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":4979,"byte_end":5012,"line_start":30,"line_end":30,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":5013,"byte_end":5016,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":5017,"byte_end":5029,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":5030,"byte_end":5033,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the mutex is actually","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":5034,"byte_end":5106,"line_start":34,"line_end":34,"column_start":1,"column_end":73}},{"value":"/ exclusive: a lock can't be acquired while the mutex is already locked.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":5107,"byte_end":5181,"line_start":35,"line_end":35,"column_start":1,"column_end":75}}]},{"kind":"Const","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":5510,"byte_end":5514,"line_start":41,"line_end":41,"column_start":11,"column_end":15},"name":"INIT","qualname":"::mutex::RawMutex::INIT","value":"Self","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked mutex.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":5214,"byte_end":5254,"line_start":37,"line_end":37,"column_start":5,"column_end":45}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":5451,"byte_end":5499,"line_start":40,"line_end":40,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":5679,"byte_end":5690,"line_start":45,"line_end":45,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::mutex::RawMutex::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":5527,"byte_end":5602,"line_start":43,"line_end":43,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":5607,"byte_end":5669,"line_start":44,"line_end":44,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":5784,"byte_end":5788,"line_start":48,"line_end":48,"column_start":8,"column_end":12},"name":"lock","qualname":"::mutex::RawMutex::lock","value":"pub fn lock(&Self)","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires this mutex, blocking the current thread until it is able to do so.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":5697,"byte_end":5776,"line_start":47,"line_end":47,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":5946,"byte_end":5954,"line_start":52,"line_end":52,"column_start":8,"column_end":16},"name":"try_lock","qualname":"::mutex::RawMutex::try_lock","value":"pub fn try_lock(&Self) -> bool","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking. Returns `true`\n if the lock was successfully acquired and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this mutex without blocking. Returns `true`","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":5802,"byte_end":5869,"line_start":50,"line_end":50,"column_start":5,"column_end":72}},{"value":"/ if the lock was successfully acquired and `false` otherwise.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":5874,"byte_end":5938,"line_start":51,"line_end":51,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":6484,"byte_end":6490,"line_start":65,"line_end":65,"column_start":15,"column_end":21},"name":"unlock","qualname":"::mutex::RawMutex::unlock","value":"pub unsafe fn unlock(&Self)","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Unlocks this mutex.","sig":null,"attributes":[{"value":"/ Unlocks this mutex.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":5976,"byte_end":5999,"line_start":54,"line_end":54,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":6004,"byte_end":6007,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":6012,"byte_end":6024,"line_start":56,"line_end":56,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":6029,"byte_end":6032,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held in the current context, i.e. it must","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":6037,"byte_end":6129,"line_start":58,"line_end":58,"column_start":5,"column_end":97}},{"value":"/ be paired with a successful call to [`lock`], [`try_lock`], [`try_lock_for`] or [`try_lock_until`].","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":6134,"byte_end":6237,"line_start":59,"line_end":59,"column_start":5,"column_end":108}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":6242,"byte_end":6245,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ [`lock`]: #tymethod.lock","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":6250,"byte_end":6278,"line_start":61,"line_end":61,"column_start":5,"column_end":33}},{"value":"/ [`try_lock`]: #tymethod.try_lock","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":6283,"byte_end":6319,"line_start":62,"line_end":62,"column_start":5,"column_end":41}},{"value":"/ [`try_lock_for`]: trait.RawMutexTimed.html#tymethod.try_lock_for","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":6324,"byte_end":6392,"line_start":63,"line_end":63,"column_start":5,"column_end":73}},{"value":"/ [`try_lock_until`]: trait.RawMutexTimed.html#tymethod.try_lock_until","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":6397,"byte_end":6469,"line_start":64,"line_end":64,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":6575,"byte_end":6584,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"is_locked","qualname":"::mutex::RawMutex::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":6504,"byte_end":6553,"line_start":67,"line_end":67,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":6558,"byte_end":6567,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":39},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7232,"byte_end":7244,"line_start":87,"line_end":87,"column_start":18,"column_end":30},"name":"RawMutexFair","qualname":"::mutex::RawMutexFair","value":"RawMutexFair: RawMutex","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":41}],"decl_id":null,"docs":" Additional methods for mutexes which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support fair unlocking.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":6852,"byte_end":6916,"line_start":81,"line_end":81,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":6917,"byte_end":6920,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":6921,"byte_end":7001,"line_start":83,"line_end":83,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7002,"byte_end":7077,"line_start":84,"line_end":84,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7078,"byte_end":7152,"line_start":85,"line_end":85,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7153,"byte_end":7214,"line_start":86,"line_end":86,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7554,"byte_end":7565,"line_start":96,"line_end":96,"column_start":15,"column_end":26},"name":"unlock_fair","qualname":"::mutex::RawMutexFair::unlock_fair","value":"pub unsafe fn unlock_fair(&Self)","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks this mutex using a fair unlock protocol.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7261,"byte_end":7313,"line_start":88,"line_end":88,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7318,"byte_end":7321,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7326,"byte_end":7338,"line_start":90,"line_end":90,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7343,"byte_end":7346,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held in the current context, see","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7351,"byte_end":7434,"line_start":92,"line_end":92,"column_start":5,"column_end":88}},{"value":"/ the documentation of [`unlock`].","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7439,"byte_end":7475,"line_start":93,"line_end":93,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7480,"byte_end":7483,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ [`unlock`]: trait.RawMutex.html#tymethod.unlock","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7488,"byte_end":7539,"line_start":95,"line_end":95,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":8091,"byte_end":8095,"line_start":110,"line_end":110,"column_start":15,"column_end":19},"name":"bump","qualname":"::mutex::RawMutexFair::bump","value":"pub unsafe fn bump(&Self)","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7579,"byte_end":7648,"line_start":98,"line_end":98,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7653,"byte_end":7656,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7661,"byte_end":7737,"line_start":100,"line_end":100,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7742,"byte_end":7818,"line_start":101,"line_end":101,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7823,"byte_end":7850,"line_start":102,"line_end":102,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7855,"byte_end":7858,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7863,"byte_end":7875,"line_start":104,"line_end":104,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7880,"byte_end":7883,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held in the current context, see","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7888,"byte_end":7971,"line_start":106,"line_end":106,"column_start":5,"column_end":88}},{"value":"/ the documentation of [`unlock`].","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7976,"byte_end":8012,"line_start":107,"line_end":107,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":8017,"byte_end":8020,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ [`unlock`]: trait.RawMutex.html#tymethod.unlock","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":8025,"byte_end":8076,"line_start":109,"line_end":109,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":8393,"byte_end":8406,"line_start":120,"line_end":120,"column_start":18,"column_end":31},"name":"RawMutexTimed","qualname":"::mutex::RawMutexTimed","value":"RawMutexTimed: RawMutex","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46}],"decl_id":null,"docs":" Additional methods for mutexes which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support locking with timeouts.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":8163,"byte_end":8234,"line_start":116,"line_end":116,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":8235,"byte_end":8238,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":8239,"byte_end":8319,"line_start":118,"line_end":118,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":8320,"byte_end":8375,"line_start":119,"line_end":119,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":8475,"byte_end":8483,"line_start":122,"line_end":122,"column_start":10,"column_end":18},"name":"Duration","qualname":"::mutex::RawMutexTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":8423,"byte_end":8465,"line_start":121,"line_end":121,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":8543,"byte_end":8550,"line_start":125,"line_end":125,"column_start":10,"column_end":17},"name":"Instant","qualname":"::mutex::RawMutexTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":8490,"byte_end":8533,"line_start":124,"line_end":124,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":8626,"byte_end":8638,"line_start":128,"line_end":128,"column_start":8,"column_end":20},"name":"try_lock_for","qualname":"::mutex::RawMutexTimed::try_lock_for","value":"pub fn try_lock_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":8557,"byte_end":8618,"line_start":127,"line_end":127,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":8754,"byte_end":8768,"line_start":131,"line_end":131,"column_start":8,"column_end":22},"name":"try_lock_until","qualname":"::mutex::RawMutexTimed::try_lock_until","value":"pub fn try_lock_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":8685,"byte_end":8746,"line_start":130,"line_end":130,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":9322,"byte_end":9327,"line_start":142,"line_end":142,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51}],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[{"value":"/ A mutual exclusion primitive useful for protecting shared data","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":8812,"byte_end":8878,"line_start":134,"line_end":134,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":8879,"byte_end":8882,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ This mutex will block threads waiting for the lock to become available. The","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":8883,"byte_end":8962,"line_start":136,"line_end":136,"column_start":1,"column_end":80}},{"value":"/ mutex can also be statically initialized or created via a `new`","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":8963,"byte_end":9030,"line_start":137,"line_end":137,"column_start":1,"column_end":68}},{"value":"/ constructor. Each mutex has a type parameter which represents the data that","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":9031,"byte_end":9110,"line_start":138,"line_end":138,"column_start":1,"column_end":80}},{"value":"/ it is protecting. The data can only be accessed through the RAII guards","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":9111,"byte_end":9186,"line_start":139,"line_end":139,"column_start":1,"column_end":76}},{"value":"/ returned from `lock` and `try_lock`, which guarantees that the data is only","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":9187,"byte_end":9266,"line_start":140,"line_end":140,"column_start":1,"column_end":80}},{"value":"/ ever accessed when the mutex is locked.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":9267,"byte_end":9310,"line_start":141,"line_end":141,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":9959,"byte_end":9962,"line_start":164,"line_end":164,"column_start":12,"column_end":15},"name":"new","qualname":"<Mutex<R, T>>::new","value":"pub fn new(T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new mutex in an unlocked state ready for use.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":9832,"byte_end":9891,"line_start":161,"line_end":161,"column_start":5,"column_end":64}},{"value":"cfg(not(has_const_fn_trait_bound))","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":9896,"byte_end":9933,"line_start":162,"line_end":162,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":9938,"byte_end":9947,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":10172,"byte_end":10182,"line_start":173,"line_end":173,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Mutex<R, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":10091,"byte_end":10146,"line_start":171,"line_end":171,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":10151,"byte_end":10160,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":10438,"byte_end":10447,"line_start":183,"line_end":183,"column_start":18,"column_end":27},"name":"const_new","qualname":"<Mutex<R, T>>::const_new","value":"pub const fn const_new(R, T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex based on a pre-existing raw mutex.","sig":null,"attributes":[{"value":"/ Creates a new mutex based on a pre-existing raw mutex.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":10265,"byte_end":10323,"line_start":179,"line_end":179,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":10328,"byte_end":10331,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ This allows creating a mutex in a constant context on stable Rust.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":10336,"byte_end":10406,"line_start":181,"line_end":181,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":10411,"byte_end":10420,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":11419,"byte_end":11423,"line_start":213,"line_end":213,"column_start":12,"column_end":16},"name":"lock","qualname":"<Mutex<R, T>>::lock","value":"pub fn lock(&Self) -> MutexGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutex, blocking the current thread until it is able to do so.","sig":null,"attributes":[{"value":"/ Acquires a mutex, blocking the current thread until it is able to do so.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":10881,"byte_end":10957,"line_start":203,"line_end":203,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":10962,"byte_end":10965,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ This function will block the local thread until it is available to acquire","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":10970,"byte_end":11048,"line_start":205,"line_end":205,"column_start":5,"column_end":83}},{"value":"/ the mutex. Upon returning, the thread is the only thread with the mutex","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":11053,"byte_end":11128,"line_start":206,"line_end":206,"column_start":5,"column_end":80}},{"value":"/ held. An RAII guard is returned to allow scoped unlock of the lock. When","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":11133,"byte_end":11209,"line_start":207,"line_end":207,"column_start":5,"column_end":81}},{"value":"/ the guard goes out of scope, the mutex will be unlocked.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":11214,"byte_end":11274,"line_start":208,"line_end":208,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":11279,"byte_end":11282,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ Attempts to lock a mutex in the thread which already holds the lock will","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":11287,"byte_end":11363,"line_start":210,"line_end":210,"column_start":5,"column_end":81}},{"value":"/ result in a deadlock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":11368,"byte_end":11393,"line_start":211,"line_end":211,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":11398,"byte_end":11407,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":11877,"byte_end":11885,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<R, T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":11575,"byte_end":11609,"line_start":219,"line_end":219,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":11614,"byte_end":11617,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":11622,"byte_end":11698,"line_start":221,"line_end":221,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":11703,"byte_end":11779,"line_start":222,"line_end":222,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":11784,"byte_end":11805,"line_start":223,"line_end":223,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":11810,"byte_end":11813,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":11818,"byte_end":11851,"line_start":225,"line_end":225,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":11856,"byte_end":11865,"line_start":226,"line_end":226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":12358,"byte_end":12365,"line_start":241,"line_end":241,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Mutex<R, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":12111,"byte_end":12166,"line_start":236,"line_end":236,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":12171,"byte_end":12174,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `Mutex` mutably, no actual locking needs to","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":12179,"byte_end":12254,"line_start":238,"line_end":238,"column_start":5,"column_end":80}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":12259,"byte_end":12332,"line_start":239,"line_end":239,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":12337,"byte_end":12346,"line_start":240,"line_end":240,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":12516,"byte_end":12525,"line_start":247,"line_end":247,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<Mutex<R, T>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":12441,"byte_end":12490,"line_start":245,"line_end":245,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":12495,"byte_end":12504,"line_start":246,"line_end":246,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":13091,"byte_end":13103,"line_start":263,"line_end":263,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<Mutex<R, T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":12583,"byte_end":12614,"line_start":251,"line_end":251,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":12619,"byte_end":12622,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":12627,"byte_end":12701,"line_start":253,"line_end":253,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":12706,"byte_end":12776,"line_start":254,"line_end":254,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":12781,"byte_end":12802,"line_start":255,"line_end":255,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":12807,"byte_end":12810,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":12815,"byte_end":12827,"line_start":257,"line_end":257,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":12832,"byte_end":12835,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":12840,"byte_end":12914,"line_start":259,"line_end":259,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":12919,"byte_end":12988,"line_start":260,"line_end":260,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":12993,"byte_end":13058,"line_start":261,"line_end":261,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":13063,"byte_end":13072,"line_start":262,"line_end":262,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":13540,"byte_end":13543,"line_start":277,"line_end":277,"column_start":19,"column_end":22},"name":"raw","qualname":"<Mutex<R, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":13151,"byte_end":13195,"line_start":267,"line_end":267,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":13200,"byte_end":13203,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":13208,"byte_end":13283,"line_start":269,"line_end":269,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":13288,"byte_end":13349,"line_start":270,"line_end":270,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":13354,"byte_end":13357,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":13362,"byte_end":13374,"line_start":272,"line_end":272,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":13379,"byte_end":13382,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":13387,"byte_end":13454,"line_start":274,"line_end":274,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `MutexGuard`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":13459,"byte_end":13507,"line_start":275,"line_end":275,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":13512,"byte_end":13521,"line_start":276,"line_end":276,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":14113,"byte_end":14121,"line_start":293,"line_end":293,"column_start":12,"column_end":20},"name":"data_ptr","qualname":"<Mutex<R, T>>::data_ptr","value":"pub fn data_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the underlying data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":13588,"byte_end":13637,"line_start":281,"line_end":281,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":13642,"byte_end":13645,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":13650,"byte_end":13724,"line_start":283,"line_end":283,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":13729,"byte_end":13799,"line_start":284,"line_end":284,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":13804,"byte_end":13825,"line_start":285,"line_end":285,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":13830,"byte_end":13833,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":13838,"byte_end":13850,"line_start":287,"line_end":287,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":13855,"byte_end":13858,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ You must ensure that there are no data races when dereferencing the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":13863,"byte_end":13934,"line_start":289,"line_end":289,"column_start":5,"column_end":76}},{"value":"/ returned pointer, for example if the current thread logically owns","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":13939,"byte_end":14009,"line_start":290,"line_end":290,"column_start":5,"column_end":75}},{"value":"/ a `MutexGuard` but that guard has been discarded using `mem::forget`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":14014,"byte_end":14087,"line_start":291,"line_end":291,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":14092,"byte_end":14101,"line_start":292,"line_end":292,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":16096,"byte_end":16113,"line_start":350,"line_end":350,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<Mutex<R, T>>::force_unlock_fair","value":"pub unsafe fn force_unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock procotol.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":15559,"byte_end":15619,"line_start":338,"line_end":338,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":15624,"byte_end":15627,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":15632,"byte_end":15706,"line_start":340,"line_end":340,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":15711,"byte_end":15781,"line_start":341,"line_end":341,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":15786,"byte_end":15807,"line_start":342,"line_end":342,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":15812,"byte_end":15815,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":15820,"byte_end":15832,"line_start":344,"line_end":344,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":15837,"byte_end":15840,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":15845,"byte_end":15919,"line_start":346,"line_end":346,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":15924,"byte_end":15993,"line_start":347,"line_end":347,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":15998,"byte_end":16063,"line_start":348,"line_end":348,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":16068,"byte_end":16077,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":16513,"byte_end":16525,"line_start":362,"line_end":362,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<Mutex<R, T>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":16216,"byte_end":16277,"line_start":356,"line_end":356,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":16282,"byte_end":16285,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":16290,"byte_end":16360,"line_start":358,"line_end":358,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":16365,"byte_end":16440,"line_start":359,"line_end":359,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":16445,"byte_end":16487,"line_start":360,"line_end":360,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":16492,"byte_end":16501,"line_start":361,"line_end":361,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":17081,"byte_end":17095,"line_start":377,"line_end":377,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<Mutex<R, T>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":16784,"byte_end":16845,"line_start":371,"line_end":371,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":16850,"byte_end":16853,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":16858,"byte_end":16928,"line_start":373,"line_end":373,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":16933,"byte_end":17008,"line_start":374,"line_end":374,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":17013,"byte_end":17055,"line_start":375,"line_end":375,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":17060,"byte_end":17069,"line_start":376,"line_end":376,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":20567,"byte_end":20577,"line_start":489,"line_end":489,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a mutex. When this structure is","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":20227,"byte_end":20307,"line_start":483,"line_end":483,"column_start":1,"column_end":81}},{"value":"/ dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":20308,"byte_end":20368,"line_start":484,"line_end":484,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":20369,"byte_end":20372,"line_start":485,"line_end":485,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":20373,"byte_end":20451,"line_start":486,"line_end":486,"column_start":1,"column_end":79}},{"value":"/ `Deref` and `DerefMut` implementations.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":20452,"byte_end":20495,"line_start":487,"line_end":487,"column_start":1,"column_end":44}},{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":20496,"byte_end":20555,"line_start":488,"line_end":488,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":20928,"byte_end":20933,"line_start":498,"line_end":498,"column_start":12,"column_end":17},"name":"mutex","qualname":"<MutexGuard>::mutex","value":"pub fn mutex(&Self) -> &'a Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `Mutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `Mutex` object.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":20861,"byte_end":20916,"line_start":497,"line_end":497,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":21398,"byte_end":21401,"line_start":511,"line_end":511,"column_start":12,"column_end":15},"name":"map","qualname":"<MutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedMutexGuard where F: FnOnce(&mut T)\n-> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":20992,"byte_end":21062,"line_start":502,"line_end":502,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":21067,"byte_end":21070,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":21075,"byte_end":21132,"line_start":504,"line_end":504,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":21137,"byte_end":21169,"line_start":505,"line_end":505,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":21174,"byte_end":21177,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":21182,"byte_end":21233,"line_start":507,"line_end":507,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":21238,"byte_end":21314,"line_start":508,"line_end":508,"column_start":5,"column_end":81}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":21319,"byte_end":21372,"line_start":509,"line_end":509,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":21377,"byte_end":21386,"line_start":510,"line_end":510,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":22236,"byte_end":22243,"line_start":535,"line_end":535,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedMutexGuard, Self> where\nF: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a new `MappedMutexGuard` for a component of the\n locked data. The original guard is returned if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make a new `MappedMutexGuard` for a component of the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":21745,"byte_end":21813,"line_start":525,"line_end":525,"column_start":5,"column_end":73}},{"value":"/ locked data. The original guard is returned if the closure returns `None`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":21818,"byte_end":21896,"line_start":526,"line_end":526,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":21901,"byte_end":21904,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":21909,"byte_end":21966,"line_start":528,"line_end":528,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":21971,"byte_end":22003,"line_start":529,"line_end":529,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":22008,"byte_end":22011,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":22016,"byte_end":22067,"line_start":531,"line_end":531,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::try_map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":22072,"byte_end":22152,"line_start":532,"line_end":532,"column_start":5,"column_end":85}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":22157,"byte_end":22210,"line_start":533,"line_end":533,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":22215,"byte_end":22224,"line_start":534,"line_end":534,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":22924,"byte_end":22932,"line_start":557,"line_end":557,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<MutexGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":22698,"byte_end":22762,"line_start":552,"line_end":552,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":22767,"byte_end":22770,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":22775,"byte_end":22843,"line_start":554,"line_end":554,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":22848,"byte_end":22898,"line_start":555,"line_end":555,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":22903,"byte_end":22912,"line_start":556,"line_end":556,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":23371,"byte_end":23375,"line_start":574,"line_end":574,"column_start":12,"column_end":16},"name":"leak","qualname":"<MutexGuard>::leak","value":"pub fn leak(Self) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":" Leaks the mutex guard and returns a mutable reference to the data\n protected by the mutex.","sig":null,"attributes":[{"value":"/ Leaks the mutex guard and returns a mutable reference to the data","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":23181,"byte_end":23250,"line_start":569,"line_end":569,"column_start":5,"column_end":74}},{"value":"/ protected by the mutex.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":23255,"byte_end":23282,"line_start":570,"line_end":570,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":23287,"byte_end":23290,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ This will leave the `Mutex` in a locked state.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":23295,"byte_end":23345,"line_start":572,"line_end":572,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":23350,"byte_end":23359,"line_start":573,"line_end":573,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":24351,"byte_end":24362,"line_start":595,"line_end":595,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":23570,"byte_end":23621,"line_start":582,"line_end":582,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":23626,"byte_end":23629,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":23634,"byte_end":23708,"line_start":584,"line_end":584,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":23713,"byte_end":23785,"line_start":585,"line_end":585,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":23790,"byte_end":23864,"line_start":586,"line_end":586,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":23869,"byte_end":23944,"line_start":587,"line_end":587,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":23949,"byte_end":24020,"line_start":588,"line_end":588,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":24025,"byte_end":24082,"line_start":589,"line_end":589,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":24087,"byte_end":24090,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":24095,"byte_end":24171,"line_start":591,"line_end":591,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":24176,"byte_end":24252,"line_start":592,"line_end":592,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":24257,"byte_end":24325,"line_start":593,"line_end":593,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":24330,"byte_end":24339,"line_start":594,"line_end":594,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":24824,"byte_end":24837,"line_start":610,"line_end":610,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<MutexGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":24530,"byte_end":24594,"line_start":603,"line_end":603,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":24599,"byte_end":24602,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked using a fair unlock protocol.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":24607,"byte_end":24662,"line_start":605,"line_end":605,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":24667,"byte_end":24670,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":24675,"byte_end":24743,"line_start":607,"line_end":607,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":24748,"byte_end":24798,"line_start":608,"line_end":608,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":24803,"byte_end":24812,"line_start":609,"line_end":609,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":25388,"byte_end":25392,"line_start":628,"line_end":628,"column_start":12,"column_end":16},"name":"bump","qualname":"<MutexGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":25091,"byte_end":25160,"line_start":622,"line_end":622,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":25165,"byte_end":25168,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":25173,"byte_end":25249,"line_start":624,"line_end":624,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":25254,"byte_end":25330,"line_start":625,"line_end":625,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":25335,"byte_end":25362,"line_start":626,"line_end":626,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":25367,"byte_end":25376,"line_start":627,"line_end":627,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":31035,"byte_end":31051,"line_start":817,"line_end":817,"column_start":12,"column_end":28},"name":"MappedMutexGuard","qualname":"::mutex::MappedMutexGuard","value":"MappedMutexGuard {  }","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169}],"decl_id":null,"docs":" An RAII mutex guard returned by `MutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `MutexGuard::map`, which can point to a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":30599,"byte_end":30674,"line_start":809,"line_end":809,"column_start":1,"column_end":76}},{"value":"/ subfield of the protected data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":30675,"byte_end":30710,"line_start":810,"line_end":810,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":30711,"byte_end":30714,"line_start":811,"line_end":811,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedMutexGuard` and `MutexGuard` is that the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":30715,"byte_end":30794,"line_start":812,"line_end":812,"column_start":1,"column_end":80}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":30795,"byte_end":30870,"line_start":813,"line_end":813,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":30871,"byte_end":30951,"line_start":814,"line_end":814,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":30952,"byte_end":30963,"line_start":815,"line_end":815,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":30964,"byte_end":31023,"line_start":816,"line_end":816,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":31886,"byte_end":31889,"line_start":842,"line_end":842,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedMutexGuard where F: FnOnce(&mut T)\n-> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":31468,"byte_end":31538,"line_start":833,"line_end":833,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":31543,"byte_end":31546,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":31551,"byte_end":31614,"line_start":835,"line_end":835,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":31619,"byte_end":31651,"line_start":836,"line_end":836,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":31656,"byte_end":31659,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":31664,"byte_end":31715,"line_start":838,"line_end":838,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":31720,"byte_end":31802,"line_start":839,"line_end":839,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":31807,"byte_end":31860,"line_start":840,"line_end":840,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":31865,"byte_end":31874,"line_start":841,"line_end":841,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":32717,"byte_end":32724,"line_start":866,"line_end":866,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedMutexGuard, Self> where\nF: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a new `MappedMutexGuard` for a component of the\n locked data. The original guard is returned if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make a new `MappedMutexGuard` for a component of the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":32214,"byte_end":32282,"line_start":856,"line_end":856,"column_start":5,"column_end":73}},{"value":"/ locked data. The original guard is returned if the closure returns `None`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":32287,"byte_end":32365,"line_start":857,"line_end":857,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":32370,"byte_end":32373,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":32378,"byte_end":32441,"line_start":859,"line_end":859,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":32446,"byte_end":32478,"line_start":860,"line_end":860,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":32483,"byte_end":32486,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":32491,"byte_end":32542,"line_start":862,"line_end":862,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::try_map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":32547,"byte_end":32633,"line_start":863,"line_end":863,"column_start":5,"column_end":91}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":32638,"byte_end":32691,"line_start":864,"line_end":864,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":32696,"byte_end":32705,"line_start":865,"line_end":865,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":34019,"byte_end":34030,"line_start":898,"line_end":898,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":33238,"byte_end":33289,"line_start":885,"line_end":885,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":33294,"byte_end":33297,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":33302,"byte_end":33376,"line_start":887,"line_end":887,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":33381,"byte_end":33453,"line_start":888,"line_end":888,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":33458,"byte_end":33532,"line_start":889,"line_end":889,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":33537,"byte_end":33612,"line_start":890,"line_end":890,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":33617,"byte_end":33688,"line_start":891,"line_end":891,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":33693,"byte_end":33750,"line_start":892,"line_end":892,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":33755,"byte_end":33758,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":33763,"byte_end":33839,"line_start":894,"line_end":894,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":33844,"byte_end":33920,"line_start":895,"line_end":895,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":33925,"byte_end":33993,"line_start":896,"line_end":896,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":33998,"byte_end":34007,"line_start":897,"line_end":897,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":36645,"byte_end":36656,"line_start":45,"line_end":45,"column_start":18,"column_end":29},"name":"GetThreadId","qualname":"::remutex::GetThreadId","value":"GetThreadId","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":267}],"decl_id":null,"docs":" Helper trait which returns a non-zero thread ID.","sig":null,"attributes":[{"value":"/ Helper trait which returns a non-zero thread ID.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":36244,"byte_end":36296,"line_start":35,"line_end":35,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":36297,"byte_end":36300,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ The simplest way to implement this trait is to return the address of a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":36301,"byte_end":36375,"line_start":37,"line_end":37,"column_start":1,"column_end":75}},{"value":"/ thread-local variable.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":36376,"byte_end":36402,"line_start":38,"line_end":38,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":36403,"byte_end":36406,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":36407,"byte_end":36419,"line_start":40,"line_end":40,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":36420,"byte_end":36423,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that no two active threads share","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":36424,"byte_end":36502,"line_start":42,"line_end":42,"column_start":1,"column_end":79}},{"value":"/ the same thread ID. However the ID of a thread that has exited can be","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":36503,"byte_end":36576,"line_start":43,"line_end":43,"column_start":1,"column_end":74}},{"value":"/ re-used since that thread is no longer active.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":36577,"byte_end":36627,"line_start":44,"line_end":44,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":266},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":36937,"byte_end":36941,"line_start":50,"line_end":50,"column_start":11,"column_end":15},"name":"INIT","qualname":"::remutex::GetThreadId::INIT","value":"Self","parent":{"krate":0,"index":265},"children":[],"decl_id":null,"docs":" Initial value.\n","sig":null,"attributes":[{"value":"/ Initial value.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":36663,"byte_end":36681,"line_start":46,"line_end":46,"column_start":5,"column_end":23}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":36878,"byte_end":36926,"line_start":49,"line_end":49,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":37052,"byte_end":37069,"line_start":54,"line_end":54,"column_start":8,"column_end":25},"name":"nonzero_thread_id","qualname":"::remutex::GetThreadId::nonzero_thread_id","value":"pub fn nonzero_thread_id(&Self) -> NonZeroUsize","parent":{"krate":0,"index":265},"children":[],"decl_id":null,"docs":" Returns a non-zero thread ID which identifies the current thread of\n execution.\n","sig":null,"attributes":[{"value":"/ Returns a non-zero thread ID which identifies the current thread of","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":36954,"byte_end":37025,"line_start":52,"line_end":52,"column_start":5,"column_end":76}},{"value":"/ execution.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":37030,"byte_end":37044,"line_start":53,"line_end":53,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":268},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":37637,"byte_end":37654,"line_start":67,"line_end":67,"column_start":12,"column_end":29},"name":"RawReentrantMutex","qualname":"::remutex::RawReentrantMutex","value":"RawReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274}],"decl_id":null,"docs":" A raw mutex type that wraps another raw mutex to provide reentrancy.","sig":null,"attributes":[{"value":"/ A raw mutex type that wraps another raw mutex to provide reentrancy.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":37097,"byte_end":37169,"line_start":57,"line_end":57,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":37170,"byte_end":37173,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ Although this has the same methods as the [`RawMutex`] trait, it does","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":37174,"byte_end":37247,"line_start":59,"line_end":59,"column_start":1,"column_end":74}},{"value":"/ not implement it, and should not be used in the same way, since this","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":37248,"byte_end":37320,"line_start":60,"line_end":60,"column_start":1,"column_end":73}},{"value":"/ mutex can successfully acquire a lock multiple times in the same thread.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":37321,"byte_end":37397,"line_start":61,"line_end":61,"column_start":1,"column_end":77}},{"value":"/ Only use this when you know you want a raw mutex that can be locked","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":37398,"byte_end":37469,"line_start":62,"line_end":62,"column_start":1,"column_end":72}},{"value":"/ reentrantly; you probably want [`ReentrantMutex`] instead.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":37470,"byte_end":37532,"line_start":63,"line_end":63,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":37533,"byte_end":37536,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ [`RawMutex`]: trait.RawMutex.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":37537,"byte_end":37574,"line_start":65,"line_end":65,"column_start":1,"column_end":38}},{"value":"/ [`ReentrantMutex`]: struct.ReentrantMutex.html","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":37575,"byte_end":37625,"line_start":66,"line_end":66,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":284},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":38110,"byte_end":38114,"line_start":80,"line_end":80,"column_start":15,"column_end":19},"name":"INIT","qualname":"::remutex::RawReentrantMutex::<R, G>::INIT","value":"Self","parent":{"krate":0,"index":281},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked mutex.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":38002,"byte_end":38042,"line_start":78,"line_end":78,"column_start":5,"column_end":45}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":38047,"byte_end":38095,"line_start":79,"line_end":79,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":39050,"byte_end":39054,"line_start":110,"line_end":110,"column_start":12,"column_end":16},"name":"lock","qualname":"<RawReentrantMutex<R, G>>::lock","value":"pub fn lock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking if it's held by another thread.\n","sig":null,"attributes":[{"value":"/ Acquires this mutex, blocking if it's held by another thread.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":38959,"byte_end":39024,"line_start":108,"line_end":108,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":39029,"byte_end":39038,"line_start":109,"line_end":109,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":39329,"byte_end":39337,"line_start":120,"line_end":120,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<RawReentrantMutex<R, G>>::try_lock","value":"pub fn try_lock(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking. Returns `true`\n if the lock was successfully acquired and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this mutex without blocking. Returns `true`","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":39167,"byte_end":39234,"line_start":117,"line_end":117,"column_start":5,"column_end":72}},{"value":"/ if the lock was successfully acquired and `false` otherwise.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":39239,"byte_end":39303,"line_start":118,"line_end":118,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":39308,"byte_end":39317,"line_start":119,"line_end":119,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":39696,"byte_end":39702,"line_start":131,"line_end":131,"column_start":19,"column_end":25},"name":"unlock","qualname":"<RawReentrantMutex<R, G>>::unlock","value":"pub unsafe fn unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks this mutex. The inner mutex may not be unlocked if\n this mutex was acquired previously in the current thread.","sig":null,"attributes":[{"value":"/ Unlocks this mutex. The inner mutex may not be unlocked if","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":39419,"byte_end":39481,"line_start":124,"line_end":124,"column_start":5,"column_end":67}},{"value":"/ this mutex was acquired previously in the current thread.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":39486,"byte_end":39547,"line_start":125,"line_end":125,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":39552,"byte_end":39555,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":39560,"byte_end":39572,"line_start":127,"line_end":127,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":39577,"byte_end":39580,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held by the current thread.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":39585,"byte_end":39663,"line_start":129,"line_end":129,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":39668,"byte_end":39677,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":40015,"byte_end":40024,"line_start":142,"line_end":142,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<RawReentrantMutex<R, G>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":39940,"byte_end":39989,"line_start":140,"line_end":140,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":39994,"byte_end":40003,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":40179,"byte_end":40205,"line_start":148,"line_end":148,"column_start":12,"column_end":38},"name":"is_owned_by_current_thread","qualname":"<RawReentrantMutex<R, G>>::is_owned_by_current_thread","value":"pub fn is_owned_by_current_thread(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently held by the current thread.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently held by the current thread.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":40084,"byte_end":40153,"line_start":146,"line_end":146,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":40158,"byte_end":40167,"line_start":147,"line_end":147,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":40726,"byte_end":40737,"line_start":163,"line_end":163,"column_start":19,"column_end":30},"name":"unlock_fair","qualname":"<RawReentrantMutex<R, G>>::unlock_fair","value":"pub unsafe fn unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol. The inner mutex\n may not be unlocked if this mutex was acquired previously in the\n current thread.","sig":null,"attributes":[{"value":"/ Unlocks this mutex using a fair unlock protocol. The inner mutex","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":40412,"byte_end":40480,"line_start":155,"line_end":155,"column_start":5,"column_end":73}},{"value":"/ may not be unlocked if this mutex was acquired previously in the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":40485,"byte_end":40553,"line_start":156,"line_end":156,"column_start":5,"column_end":73}},{"value":"/ current thread.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":40558,"byte_end":40577,"line_start":157,"line_end":157,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":40582,"byte_end":40585,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":40590,"byte_end":40602,"line_start":159,"line_end":159,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":40607,"byte_end":40610,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held by the current thread.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":40615,"byte_end":40693,"line_start":161,"line_end":161,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":40698,"byte_end":40707,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":41400,"byte_end":41404,"line_start":182,"line_end":182,"column_start":19,"column_end":23},"name":"bump","qualname":"<RawReentrantMutex<R, G>>::bump","value":"pub unsafe fn bump(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":40980,"byte_end":41049,"line_start":172,"line_end":172,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":41054,"byte_end":41057,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":41062,"byte_end":41138,"line_start":174,"line_end":174,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":41143,"byte_end":41219,"line_start":175,"line_end":175,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":41224,"byte_end":41251,"line_start":176,"line_end":176,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":41256,"byte_end":41259,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":41264,"byte_end":41276,"line_start":178,"line_end":178,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":41281,"byte_end":41284,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if the mutex is held by the current thread.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":41289,"byte_end":41367,"line_start":180,"line_end":180,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":41372,"byte_end":41381,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":41822,"byte_end":41836,"line_start":195,"line_end":195,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<RawReentrantMutex<R, G>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":41735,"byte_end":41796,"line_start":193,"line_end":193,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":41801,"byte_end":41810,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":42039,"byte_end":42051,"line_start":201,"line_end":201,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<RawReentrantMutex<R, G>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":41952,"byte_end":42013,"line_start":199,"line_end":199,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":42018,"byte_end":42027,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":306},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":42639,"byte_end":42653,"line_start":217,"line_end":217,"column_start":12,"column_end":26},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"ReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":311}],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[{"value":"/ A mutex which can be recursively locked by a single thread.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":42164,"byte_end":42227,"line_start":206,"line_end":206,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":42228,"byte_end":42231,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ This type is identical to `Mutex` except for the following points:","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":42232,"byte_end":42302,"line_start":208,"line_end":208,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":42303,"byte_end":42306,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ - Locking multiple times from the same thread will work correctly instead of","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":42307,"byte_end":42387,"line_start":210,"line_end":210,"column_start":1,"column_end":81}},{"value":"/   deadlocking.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":42388,"byte_end":42406,"line_start":211,"line_end":211,"column_start":1,"column_end":19}},{"value":"/ - `ReentrantMutexGuard` does not give mutable references to the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":42407,"byte_end":42487,"line_start":212,"line_end":212,"column_start":1,"column_end":81}},{"value":"/   Use a `RefCell` if you need this.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":42488,"byte_end":42527,"line_start":213,"line_end":213,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":42528,"byte_end":42531,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ See [`Mutex`](struct.Mutex.html) for more details about the underlying mutex","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":42532,"byte_end":42612,"line_start":215,"line_end":215,"column_start":1,"column_end":81}},{"value":"/ primitive.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":42613,"byte_end":42627,"line_start":216,"line_end":216,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":43643,"byte_end":43646,"line_start":250,"line_end":250,"column_start":12,"column_end":15},"name":"new","qualname":"<ReentrantMutex<R, G, T>>::new","value":"pub fn new(T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new reentrant mutex in an unlocked state ready for use.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":43506,"byte_end":43575,"line_start":247,"line_end":247,"column_start":5,"column_end":74}},{"value":"cfg(not(has_const_fn_trait_bound))","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":43580,"byte_end":43617,"line_start":248,"line_end":248,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":43622,"byte_end":43631,"line_start":249,"line_end":249,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":44061,"byte_end":44071,"line_start":264,"line_end":264,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ReentrantMutex<R, G, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":43980,"byte_end":44035,"line_start":262,"line_end":262,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":44040,"byte_end":44049,"line_start":263,"line_end":263,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":44412,"byte_end":44421,"line_start":276,"line_end":276,"column_start":18,"column_end":27},"name":"const_new","qualname":"<ReentrantMutex<R, G, T>>::const_new","value":"pub const fn const_new(R, G, T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex based on a pre-existing raw mutex and a\n helper to get the thread ID.","sig":null,"attributes":[{"value":"/ Creates a new reentrant mutex based on a pre-existing raw mutex and a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":44169,"byte_end":44242,"line_start":270,"line_end":270,"column_start":5,"column_end":78}},{"value":"/ helper to get the thread ID.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":44247,"byte_end":44279,"line_start":271,"line_end":271,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":44284,"byte_end":44287,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ This allows creating a reentrant mutex in a constant context on stable","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":44292,"byte_end":44366,"line_start":273,"line_end":273,"column_start":5,"column_end":79}},{"value":"/ Rust.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":44371,"byte_end":44380,"line_start":274,"line_end":274,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":44385,"byte_end":44394,"line_start":275,"line_end":275,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":45760,"byte_end":45764,"line_start":312,"line_end":312,"column_start":12,"column_end":16},"name":"lock","qualname":"<ReentrantMutex<R, G, T>>::lock","value":"pub fn lock(&Self) -> ReentrantMutexGuard<, R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reentrant mutex, blocking the current thread until it is able\n to do so.","sig":null,"attributes":[{"value":"/ Acquires a reentrant mutex, blocking the current thread until it is able","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":45121,"byte_end":45197,"line_start":301,"line_end":301,"column_start":5,"column_end":81}},{"value":"/ to do so.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":45202,"byte_end":45215,"line_start":302,"line_end":302,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":45220,"byte_end":45223,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ If the mutex is held by another thread then this function will block the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":45228,"byte_end":45304,"line_start":304,"line_end":304,"column_start":5,"column_end":81}},{"value":"/ local thread until it is available to acquire the mutex. If the mutex is","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":45309,"byte_end":45385,"line_start":305,"line_end":305,"column_start":5,"column_end":81}},{"value":"/ already held by the current thread then this function will increment the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":45390,"byte_end":45466,"line_start":306,"line_end":306,"column_start":5,"column_end":81}},{"value":"/ lock reference count and return immediately. Upon returning,","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":45471,"byte_end":45535,"line_start":307,"line_end":307,"column_start":5,"column_end":69}},{"value":"/ the thread is the only thread with the mutex held. An RAII guard is","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":45540,"byte_end":45611,"line_start":308,"line_end":308,"column_start":5,"column_end":76}},{"value":"/ returned to allow scoped unlock of the lock. When the guard goes out of","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":45616,"byte_end":45691,"line_start":309,"line_end":309,"column_start":5,"column_end":80}},{"value":"/ scope, the mutex will be unlocked.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":45696,"byte_end":45734,"line_start":310,"line_end":310,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":45739,"byte_end":45748,"line_start":311,"line_end":311,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":46230,"byte_end":46238,"line_start":326,"line_end":326,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<ReentrantMutex<R, G, T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":45928,"byte_end":45962,"line_start":318,"line_end":318,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":45967,"byte_end":45970,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":45975,"byte_end":46051,"line_start":320,"line_end":320,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":46056,"byte_end":46132,"line_start":321,"line_end":321,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":46137,"byte_end":46158,"line_start":322,"line_end":322,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":46163,"byte_end":46166,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":46171,"byte_end":46204,"line_start":324,"line_end":324,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":46209,"byte_end":46218,"line_start":325,"line_end":325,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":46732,"byte_end":46739,"line_start":340,"line_end":340,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ReentrantMutex<R, G, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":46476,"byte_end":46531,"line_start":335,"line_end":335,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":46536,"byte_end":46539,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `ReentrantMutex` mutably, no actual locking needs to","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":46544,"byte_end":46628,"line_start":337,"line_end":337,"column_start":5,"column_end":89}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":46633,"byte_end":46706,"line_start":338,"line_end":338,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":46711,"byte_end":46720,"line_start":339,"line_end":339,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":46890,"byte_end":46899,"line_start":346,"line_end":346,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<ReentrantMutex<R, G, T>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently locked.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently locked.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":46815,"byte_end":46864,"line_start":344,"line_end":344,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":46869,"byte_end":46878,"line_start":345,"line_end":345,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":47052,"byte_end":47078,"line_start":352,"line_end":352,"column_start":12,"column_end":38},"name":"is_owned_by_current_thread","qualname":"<ReentrantMutex<R, G, T>>::is_owned_by_current_thread","value":"pub fn is_owned_by_current_thread(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the mutex is currently held by the current thread.\n","sig":null,"attributes":[{"value":"/ Checks whether the mutex is currently held by the current thread.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":46957,"byte_end":47026,"line_start":350,"line_end":350,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":47031,"byte_end":47040,"line_start":351,"line_end":351,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":47679,"byte_end":47691,"line_start":368,"line_end":368,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<ReentrantMutex<R, G, T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":47153,"byte_end":47184,"line_start":356,"line_end":356,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":47189,"byte_end":47192,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":47197,"byte_end":47271,"line_start":358,"line_end":358,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":47276,"byte_end":47355,"line_start":359,"line_end":359,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":47360,"byte_end":47381,"line_start":360,"line_end":360,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":47386,"byte_end":47389,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":47394,"byte_end":47406,"line_start":362,"line_end":362,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":47411,"byte_end":47414,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":47419,"byte_end":47493,"line_start":364,"line_end":364,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":47498,"byte_end":47576,"line_start":365,"line_end":365,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":47581,"byte_end":47646,"line_start":366,"line_end":366,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":47651,"byte_end":47660,"line_start":367,"line_end":367,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":48137,"byte_end":48140,"line_start":382,"line_end":382,"column_start":19,"column_end":22},"name":"raw","qualname":"<ReentrantMutex<R, G, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":47739,"byte_end":47783,"line_start":372,"line_end":372,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":47788,"byte_end":47791,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":47796,"byte_end":47871,"line_start":374,"line_end":374,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":47876,"byte_end":47937,"line_start":375,"line_end":375,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":47942,"byte_end":47945,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":47950,"byte_end":47962,"line_start":377,"line_end":377,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":47967,"byte_end":47970,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":47975,"byte_end":48042,"line_start":379,"line_end":379,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `ReentrantMutexGuard`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":48047,"byte_end":48104,"line_start":380,"line_end":380,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":48109,"byte_end":48118,"line_start":381,"line_end":381,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":48742,"byte_end":48750,"line_start":399,"line_end":399,"column_start":12,"column_end":20},"name":"data_ptr","qualname":"<ReentrantMutex<R, G, T>>::data_ptr","value":"pub fn data_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the underlying data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":48191,"byte_end":48240,"line_start":386,"line_end":386,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":48245,"byte_end":48248,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":48253,"byte_end":48327,"line_start":388,"line_end":388,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":48332,"byte_end":48406,"line_start":389,"line_end":389,"column_start":5,"column_end":79}},{"value":"/ when dealing with FFI.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":48411,"byte_end":48437,"line_start":390,"line_end":390,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":48442,"byte_end":48445,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":48450,"byte_end":48462,"line_start":392,"line_end":392,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":48467,"byte_end":48470,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ You must ensure that there are no data races when dereferencing the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":48475,"byte_end":48546,"line_start":394,"line_end":394,"column_start":5,"column_end":76}},{"value":"/ returned pointer, for example if the current thread logically owns a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":48551,"byte_end":48623,"line_start":395,"line_end":395,"column_start":5,"column_end":77}},{"value":"/ `ReentrantMutexGuard` but that guard has been discarded using","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":48628,"byte_end":48693,"line_start":396,"line_end":396,"column_start":5,"column_end":70}},{"value":"/ `mem::forget`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":48698,"byte_end":48716,"line_start":397,"line_end":397,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":48721,"byte_end":48730,"line_start":398,"line_end":398,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":50829,"byte_end":50846,"line_start":456,"line_end":456,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<ReentrantMutex<R, G, T>>::force_unlock_fair","value":"pub unsafe fn force_unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock protocol.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":50274,"byte_end":50334,"line_start":444,"line_end":444,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":50339,"byte_end":50342,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":50347,"byte_end":50421,"line_start":446,"line_end":446,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":50426,"byte_end":50505,"line_start":447,"line_end":447,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":50510,"byte_end":50531,"line_start":448,"line_end":448,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":50536,"byte_end":50539,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":50544,"byte_end":50556,"line_start":450,"line_end":450,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":50561,"byte_end":50564,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":50569,"byte_end":50643,"line_start":452,"line_end":452,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":50648,"byte_end":50726,"line_start":453,"line_end":453,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":50731,"byte_end":50796,"line_start":454,"line_end":454,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":50801,"byte_end":50810,"line_start":455,"line_end":455,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":51274,"byte_end":51286,"line_start":468,"line_end":468,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<ReentrantMutex<R, G, T>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration)\n-> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":50977,"byte_end":51038,"line_start":462,"line_end":462,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":51043,"byte_end":51046,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":51051,"byte_end":51121,"line_start":464,"line_end":464,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":51126,"byte_end":51201,"line_start":465,"line_end":465,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":51206,"byte_end":51248,"line_start":466,"line_end":466,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":51253,"byte_end":51262,"line_start":467,"line_end":467,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":51854,"byte_end":51868,"line_start":483,"line_end":483,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<ReentrantMutex<R, G, T>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant)\n-> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":51557,"byte_end":51618,"line_start":477,"line_end":477,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":51623,"byte_end":51626,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":51631,"byte_end":51701,"line_start":479,"line_end":479,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":51706,"byte_end":51781,"line_start":480,"line_end":480,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":51786,"byte_end":51828,"line_start":481,"line_end":481,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":51833,"byte_end":51842,"line_start":482,"line_end":482,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":374},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":55696,"byte_end":55715,"line_start":603,"line_end":603,"column_start":12,"column_end":31},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"ReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":380}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":55353,"byte_end":55440,"line_start":597,"line_end":597,"column_start":1,"column_end":88}},{"value":"/ is dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":55441,"byte_end":55504,"line_start":598,"line_end":598,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":55505,"byte_end":55508,"line_start":599,"line_end":599,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":55509,"byte_end":55587,"line_start":600,"line_end":600,"column_start":1,"column_end":79}},{"value":"/ `Deref` implementation.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":55588,"byte_end":55615,"line_start":601,"line_end":601,"column_start":1,"column_end":28}},{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":55616,"byte_end":55684,"line_start":602,"line_end":602,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":56176,"byte_end":56183,"line_start":615,"line_end":615,"column_start":12,"column_end":19},"name":"remutex","qualname":"<ReentrantMutexGuard>::remutex","value":"pub fn remutex(&Self) -> &'a ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `ReentrantMutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `ReentrantMutex` object.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":56100,"byte_end":56164,"line_start":614,"line_end":614,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":56689,"byte_end":56692,"line_start":628,"line_end":628,"column_start":12,"column_end":15},"name":"map","qualname":"<ReentrantMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedReentrantMutexGuard where\nF: FnOnce(&T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":56256,"byte_end":56335,"line_start":619,"line_end":619,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":56340,"byte_end":56343,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":56348,"byte_end":56414,"line_start":621,"line_end":621,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":56419,"byte_end":56451,"line_start":622,"line_end":622,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":56456,"byte_end":56459,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":56464,"byte_end":56515,"line_start":624,"line_end":624,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":56520,"byte_end":56605,"line_start":625,"line_end":625,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":56610,"byte_end":56663,"line_start":626,"line_end":626,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":56668,"byte_end":56677,"line_start":627,"line_end":627,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":57566,"byte_end":57573,"line_start":652,"line_end":652,"column_start":12,"column_end":19},"name":"try_map","qualname":"<ReentrantMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F)\n-> Result<MappedReentrantMutexGuard, Self> where F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":57049,"byte_end":57127,"line_start":642,"line_end":642,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":57132,"byte_end":57208,"line_start":643,"line_end":643,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":57213,"byte_end":57216,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":57221,"byte_end":57287,"line_start":645,"line_end":645,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":57292,"byte_end":57324,"line_start":646,"line_end":646,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":57329,"byte_end":57332,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":57337,"byte_end":57388,"line_start":648,"line_end":648,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::try_map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":57393,"byte_end":57482,"line_start":649,"line_end":649,"column_start":5,"column_end":94}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":57487,"byte_end":57540,"line_start":650,"line_end":650,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":57545,"byte_end":57554,"line_start":651,"line_end":651,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":58290,"byte_end":58298,"line_start":677,"line_end":677,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<ReentrantMutexGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":58064,"byte_end":58128,"line_start":672,"line_end":672,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":58133,"byte_end":58136,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":58141,"byte_end":58209,"line_start":674,"line_end":674,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":58214,"byte_end":58264,"line_start":675,"line_end":675,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":58269,"byte_end":58278,"line_start":676,"line_end":676,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":59459,"byte_end":59470,"line_start":706,"line_end":706,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<ReentrantMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":58669,"byte_end":58720,"line_start":693,"line_end":693,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":58725,"byte_end":58728,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":58733,"byte_end":58807,"line_start":695,"line_end":695,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":58812,"byte_end":58884,"line_start":696,"line_end":696,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":58889,"byte_end":58963,"line_start":697,"line_end":697,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":58968,"byte_end":59043,"line_start":698,"line_end":698,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":59048,"byte_end":59119,"line_start":699,"line_end":699,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":59124,"byte_end":59181,"line_start":700,"line_end":700,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":59186,"byte_end":59189,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":59194,"byte_end":59270,"line_start":702,"line_end":702,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":59275,"byte_end":59351,"line_start":703,"line_end":703,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":59356,"byte_end":59433,"line_start":704,"line_end":704,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":59438,"byte_end":59447,"line_start":705,"line_end":705,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":59936,"byte_end":59949,"line_start":721,"line_end":721,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<ReentrantMutexGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":59648,"byte_end":59712,"line_start":714,"line_end":714,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":59717,"byte_end":59720,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked a fair unlock protocol.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":59725,"byte_end":59774,"line_start":716,"line_end":716,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":59779,"byte_end":59782,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":59787,"byte_end":59855,"line_start":718,"line_end":718,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":59860,"byte_end":59910,"line_start":719,"line_end":719,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":59915,"byte_end":59924,"line_start":720,"line_end":720,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":60512,"byte_end":60516,"line_start":739,"line_end":739,"column_start":12,"column_end":16},"name":"bump","qualname":"<ReentrantMutexGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":60215,"byte_end":60284,"line_start":733,"line_end":733,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":60289,"byte_end":60292,"line_start":734,"line_end":734,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":60297,"byte_end":60373,"line_start":735,"line_end":735,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":60378,"byte_end":60454,"line_start":736,"line_end":736,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":60459,"byte_end":60486,"line_start":737,"line_end":737,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":60491,"byte_end":60500,"line_start":738,"line_end":738,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":436},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":65643,"byte_end":65668,"line_start":901,"line_end":901,"column_start":12,"column_end":37},"name":"MappedReentrantMutexGuard","qualname":"::remutex::MappedReentrantMutexGuard","value":"MappedReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443}],"decl_id":null,"docs":" An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":65171,"byte_end":65255,"line_start":893,"line_end":893,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":65256,"byte_end":65291,"line_start":894,"line_end":894,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":65292,"byte_end":65295,"line_start":895,"line_end":895,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":65296,"byte_end":65393,"line_start":896,"line_end":896,"column_start":1,"column_end":98}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":65394,"byte_end":65469,"line_start":897,"line_end":897,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":65470,"byte_end":65550,"line_start":898,"line_end":898,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":65551,"byte_end":65562,"line_start":899,"line_end":899,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":65563,"byte_end":65631,"line_start":900,"line_end":900,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":66515,"byte_end":66518,"line_start":924,"line_end":924,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedReentrantMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedReentrantMutexGuard where\nF: FnOnce(&T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":66070,"byte_end":66149,"line_start":915,"line_end":915,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":66154,"byte_end":66157,"line_start":916,"line_end":916,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":66162,"byte_end":66234,"line_start":917,"line_end":917,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":66239,"byte_end":66271,"line_start":918,"line_end":918,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":66276,"byte_end":66279,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":66284,"byte_end":66335,"line_start":920,"line_end":920,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":66340,"byte_end":66431,"line_start":921,"line_end":921,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":66436,"byte_end":66489,"line_start":922,"line_end":922,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":66494,"byte_end":66503,"line_start":923,"line_end":923,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":67381,"byte_end":67388,"line_start":948,"line_end":948,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedReentrantMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F)\n-> Result<MappedReentrantMutexGuard, Self> where F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":66852,"byte_end":66930,"line_start":938,"line_end":938,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":66935,"byte_end":67011,"line_start":939,"line_end":939,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":67016,"byte_end":67019,"line_start":940,"line_end":940,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":67024,"byte_end":67096,"line_start":941,"line_end":941,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":67101,"byte_end":67133,"line_start":942,"line_end":942,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":67138,"byte_end":67141,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":67146,"byte_end":67197,"line_start":944,"line_end":944,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::try_map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":67202,"byte_end":67297,"line_start":945,"line_end":945,"column_start":5,"column_end":100}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":67302,"byte_end":67355,"line_start":946,"line_end":946,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":67360,"byte_end":67369,"line_start":947,"line_end":947,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":68761,"byte_end":68772,"line_start":985,"line_end":985,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedReentrantMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":67971,"byte_end":68022,"line_start":972,"line_end":972,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":68027,"byte_end":68030,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":68035,"byte_end":68109,"line_start":974,"line_end":974,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":68114,"byte_end":68186,"line_start":975,"line_end":975,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":68191,"byte_end":68265,"line_start":976,"line_end":976,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":68270,"byte_end":68345,"line_start":977,"line_end":977,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":68350,"byte_end":68421,"line_start":978,"line_end":978,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":68426,"byte_end":68483,"line_start":979,"line_end":979,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":68488,"byte_end":68491,"line_start":980,"line_end":980,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":68496,"byte_end":68572,"line_start":981,"line_end":981,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":68577,"byte_end":68653,"line_start":982,"line_end":982,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":68658,"byte_end":68735,"line_start":983,"line_end":983,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":68740,"byte_end":68749,"line_start":984,"line_end":984,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":71323,"byte_end":71332,"line_start":38,"line_end":38,"column_start":18,"column_end":27},"name":"RawRwLock","qualname":"::rwlock::RawRwLock","value":"RawRwLock","parent":null,"children":[{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522}],"decl_id":null,"docs":" Basic operations for a reader-writer lock.","sig":null,"attributes":[{"value":"/ Basic operations for a reader-writer lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":70876,"byte_end":70922,"line_start":27,"line_end":27,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":70923,"byte_end":70926,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `RwLock` to form a safe and","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":70927,"byte_end":71003,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ fully-functioning `RwLock` type.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":71004,"byte_end":71040,"line_start":30,"line_end":30,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":71041,"byte_end":71044,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":71045,"byte_end":71057,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":71058,"byte_end":71061,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the `RwLock` is actually","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":71062,"byte_end":71137,"line_start":34,"line_end":34,"column_start":1,"column_end":76}},{"value":"/ exclusive: an exclusive lock can't be acquired while an exclusive or shared","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":71138,"byte_end":71217,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ lock exists, and a shared lock can't be acquire while an exclusive lock","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":71218,"byte_end":71293,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/ exists.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":71294,"byte_end":71305,"line_start":37,"line_end":37,"column_start":1,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":513},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":71638,"byte_end":71642,"line_start":43,"line_end":43,"column_start":11,"column_end":15},"name":"INIT","qualname":"::rwlock::RawRwLock::INIT","value":"Self","parent":{"krate":0,"index":512},"children":[],"decl_id":null,"docs":" Initial value for an unlocked `RwLock`.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked `RwLock`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":71339,"byte_end":71382,"line_start":39,"line_end":39,"column_start":5,"column_end":48}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":71579,"byte_end":71627,"line_start":42,"line_end":42,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":514},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":71807,"byte_end":71818,"line_start":47,"line_end":47,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::rwlock::RawRwLock::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":512},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":71655,"byte_end":71730,"line_start":45,"line_end":45,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":71735,"byte_end":71797,"line_start":46,"line_end":46,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":71915,"byte_end":71926,"line_start":50,"line_end":50,"column_start":8,"column_end":19},"name":"lock_shared","qualname":"::rwlock::RawRwLock::lock_shared","value":"pub fn lock_shared(&Self)","parent":{"krate":0,"index":512},"children":[],"decl_id":null,"docs":" Acquires a shared lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock, blocking the current thread until it is able to do so.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":71825,"byte_end":71907,"line_start":49,"line_end":49,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":72003,"byte_end":72018,"line_start":53,"line_end":53,"column_start":8,"column_end":23},"name":"try_lock_shared","qualname":"::rwlock::RawRwLock::try_lock_shared","value":"pub fn try_lock_shared(&Self) -> bool","parent":{"krate":0,"index":512},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without blocking.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":71940,"byte_end":71995,"line_start":52,"line_end":52,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":72203,"byte_end":72216,"line_start":60,"line_end":60,"column_start":15,"column_end":28},"name":"unlock_shared","qualname":"::rwlock::RawRwLock::unlock_shared","value":"pub unsafe fn unlock_shared(&Self)","parent":{"krate":0,"index":512},"children":[],"decl_id":null,"docs":" Releases a shared lock.","sig":null,"attributes":[{"value":"/ Releases a shared lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":72040,"byte_end":72067,"line_start":55,"line_end":55,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":72072,"byte_end":72075,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":72080,"byte_end":72092,"line_start":57,"line_end":57,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":72097,"byte_end":72100,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if a shared lock is held in the current context.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":72105,"byte_end":72188,"line_start":59,"line_end":59,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":72324,"byte_end":72338,"line_start":63,"line_end":63,"column_start":8,"column_end":22},"name":"lock_exclusive","qualname":"::rwlock::RawRwLock::lock_exclusive","value":"pub fn lock_exclusive(&Self)","parent":{"krate":0,"index":512},"children":[],"decl_id":null,"docs":" Acquires an exclusive lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an exclusive lock, blocking the current thread until it is able to do so.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":72230,"byte_end":72316,"line_start":62,"line_end":62,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":72419,"byte_end":72437,"line_start":66,"line_end":66,"column_start":8,"column_end":26},"name":"try_lock_exclusive","qualname":"::rwlock::RawRwLock::try_lock_exclusive","value":"pub fn try_lock_exclusive(&Self) -> bool","parent":{"krate":0,"index":512},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock without blocking.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":72352,"byte_end":72411,"line_start":65,"line_end":65,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":72630,"byte_end":72646,"line_start":73,"line_end":73,"column_start":15,"column_end":31},"name":"unlock_exclusive","qualname":"::rwlock::RawRwLock::unlock_exclusive","value":"pub unsafe fn unlock_exclusive(&Self)","parent":{"krate":0,"index":512},"children":[],"decl_id":null,"docs":" Releases an exclusive lock.","sig":null,"attributes":[{"value":"/ Releases an exclusive lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":72459,"byte_end":72490,"line_start":68,"line_end":68,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":72495,"byte_end":72498,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":72503,"byte_end":72515,"line_start":70,"line_end":70,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":72520,"byte_end":72523,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":72528,"byte_end":72615,"line_start":72,"line_end":72,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":72741,"byte_end":72750,"line_start":77,"line_end":77,"column_start":8,"column_end":17},"name":"is_locked","qualname":"::rwlock::RawRwLock::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":{"krate":0,"index":512},"children":[],"decl_id":null,"docs":" Checks if this `RwLock` is currently locked in any way.\n","sig":null,"attributes":[{"value":"/ Checks if this `RwLock` is currently locked in any way.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":72660,"byte_end":72719,"line_start":75,"line_end":75,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":72724,"byte_end":72733,"line_start":76,"line_end":76,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":73100,"byte_end":73119,"line_start":89,"line_end":89,"column_start":8,"column_end":27},"name":"is_locked_exclusive","qualname":"::rwlock::RawRwLock::is_locked_exclusive","value":"pub fn is_locked_exclusive(&Self) -> bool","parent":{"krate":0,"index":512},"children":[],"decl_id":null,"docs":" Check if this `RwLock` is currently exclusively locked.\n","sig":null,"attributes":[{"value":"/ Check if this `RwLock` is currently exclusively locked.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":73033,"byte_end":73092,"line_start":88,"line_end":88,"column_start":5,"column_end":64}}]},{"kind":"Trait","id":{"krate":0,"index":523},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":73781,"byte_end":73794,"line_start":107,"line_end":107,"column_start":18,"column_end":31},"name":"RawRwLockFair","qualname":"::rwlock::RawRwLockFair","value":"RawRwLockFair: RawRwLock","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527}],"decl_id":null,"docs":" Additional methods for RwLocks which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support fair unlocking.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":73401,"byte_end":73465,"line_start":101,"line_end":101,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":73466,"byte_end":73469,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":73470,"byte_end":73550,"line_start":103,"line_end":103,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":73551,"byte_end":73626,"line_start":104,"line_end":104,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":73627,"byte_end":73701,"line_start":105,"line_end":105,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":73702,"byte_end":73763,"line_start":106,"line_end":106,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":74004,"byte_end":74022,"line_start":113,"line_end":113,"column_start":15,"column_end":33},"name":"unlock_shared_fair","qualname":"::rwlock::RawRwLockFair::unlock_shared_fair","value":"pub unsafe fn unlock_shared_fair(&Self)","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Releases a shared lock using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Releases a shared lock using a fair unlock protocol.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":73812,"byte_end":73868,"line_start":108,"line_end":108,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":73873,"byte_end":73876,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":73881,"byte_end":73893,"line_start":110,"line_end":110,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":73898,"byte_end":73901,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if a shared lock is held in the current context.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":73906,"byte_end":73989,"line_start":112,"line_end":112,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":74236,"byte_end":74257,"line_start":120,"line_end":120,"column_start":15,"column_end":36},"name":"unlock_exclusive_fair","qualname":"::rwlock::RawRwLockFair::unlock_exclusive_fair","value":"pub unsafe fn unlock_exclusive_fair(&Self)","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Releases an exclusive lock using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Releases an exclusive lock using a fair unlock protocol.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":74036,"byte_end":74096,"line_start":115,"line_end":115,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":74101,"byte_end":74104,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":74109,"byte_end":74121,"line_start":117,"line_end":117,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":74126,"byte_end":74129,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":74134,"byte_end":74221,"line_start":119,"line_end":119,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":74696,"byte_end":74707,"line_start":131,"line_end":131,"column_start":15,"column_end":26},"name":"bump_shared","qualname":"::rwlock::RawRwLockFair::bump_shared","value":"pub unsafe fn bump_shared(&Self)","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Temporarily yields a shared lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields a shared lock to a waiting thread if there is one.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":74271,"byte_end":74344,"line_start":122,"line_end":122,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":74349,"byte_end":74352,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_shared_fair` followed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":74357,"byte_end":74440,"line_start":124,"line_end":124,"column_start":5,"column_end":88}},{"value":"/ by `lock_shared`, however it can be much more efficient in the case where there","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":74445,"byte_end":74528,"line_start":125,"line_end":125,"column_start":5,"column_end":88}},{"value":"/ are no waiting threads.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":74533,"byte_end":74560,"line_start":126,"line_end":126,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":74565,"byte_end":74568,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":74573,"byte_end":74585,"line_start":128,"line_end":128,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":74590,"byte_end":74593,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if a shared lock is held in the current context.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":74598,"byte_end":74681,"line_start":130,"line_end":130,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":75230,"byte_end":75244,"line_start":145,"line_end":145,"column_start":15,"column_end":29},"name":"bump_exclusive","qualname":"::rwlock::RawRwLockFair::bump_exclusive","value":"pub unsafe fn bump_exclusive(&Self)","parent":{"krate":0,"index":523},"children":[],"decl_id":null,"docs":" Temporarily yields an exclusive lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an exclusive lock to a waiting thread if there is one.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":74791,"byte_end":74868,"line_start":136,"line_end":136,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":74873,"byte_end":74876,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_exclusive_fair` followed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":74881,"byte_end":74967,"line_start":138,"line_end":138,"column_start":5,"column_end":91}},{"value":"/ by `lock_exclusive`, however it can be much more efficient in the case where there","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":74972,"byte_end":75058,"line_start":139,"line_end":139,"column_start":5,"column_end":91}},{"value":"/ are no waiting threads.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":75063,"byte_end":75090,"line_start":140,"line_end":140,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":75095,"byte_end":75098,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":75103,"byte_end":75115,"line_start":142,"line_end":142,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":75120,"byte_end":75123,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":75128,"byte_end":75215,"line_start":144,"line_end":144,"column_start":5,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":528},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":75461,"byte_end":75479,"line_start":153,"line_end":153,"column_start":18,"column_end":36},"name":"RawRwLockDowngrade","qualname":"::rwlock::RawRwLockDowngrade","value":"RawRwLockDowngrade: RawRwLock","parent":null,"children":[{"krate":0,"index":529}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically downgrading an\n exclusive lock to a shared lock.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically downgrading an","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":75332,"byte_end":75406,"line_start":151,"line_end":151,"column_start":1,"column_end":75}},{"value":"/ exclusive lock to a shared lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":75407,"byte_end":75443,"line_start":152,"line_end":152,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":75778,"byte_end":75787,"line_start":160,"line_end":160,"column_start":15,"column_end":24},"name":"downgrade","qualname":"::rwlock::RawRwLockDowngrade::downgrade","value":"pub unsafe fn downgrade(&Self)","parent":{"krate":0,"index":528},"children":[],"decl_id":null,"docs":" Atomically downgrades an exclusive lock into a shared lock without\n allowing any thread to take an exclusive lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades an exclusive lock into a shared lock without","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":75497,"byte_end":75567,"line_start":154,"line_end":154,"column_start":5,"column_end":75}},{"value":"/ allowing any thread to take an exclusive lock in the meantime.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":75572,"byte_end":75638,"line_start":155,"line_end":155,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":75643,"byte_end":75646,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":75651,"byte_end":75663,"line_start":157,"line_end":157,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":75668,"byte_end":75671,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":75676,"byte_end":75763,"line_start":159,"line_end":159,"column_start":5,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":76029,"byte_end":76043,"line_start":167,"line_end":167,"column_start":18,"column_end":32},"name":"RawRwLockTimed","qualname":"::rwlock::RawRwLockTimed","value":"RawRwLockTimed: RawRwLock","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536}],"decl_id":null,"docs":" Additional methods for RwLocks which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support locking with timeouts.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":75799,"byte_end":75870,"line_start":163,"line_end":163,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":75871,"byte_end":75874,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":75875,"byte_end":75955,"line_start":165,"line_end":165,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":75956,"byte_end":76011,"line_start":166,"line_end":166,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":76113,"byte_end":76121,"line_start":169,"line_end":169,"column_start":10,"column_end":18},"name":"Duration","qualname":"::rwlock::RawRwLockTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":530},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":76061,"byte_end":76103,"line_start":168,"line_end":168,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":532},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":76181,"byte_end":76188,"line_start":172,"line_end":172,"column_start":10,"column_end":17},"name":"Instant","qualname":"::rwlock::RawRwLockTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":530},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":76128,"byte_end":76171,"line_start":171,"line_end":171,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":76268,"byte_end":76287,"line_start":175,"line_end":175,"column_start":8,"column_end":27},"name":"try_lock_shared_for","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_for","value":"pub fn try_lock_shared_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":530},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":76195,"byte_end":76260,"line_start":174,"line_end":174,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":76407,"byte_end":76428,"line_start":178,"line_end":178,"column_start":8,"column_end":29},"name":"try_lock_shared_until","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_until","value":"pub fn try_lock_shared_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":530},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":76334,"byte_end":76399,"line_start":177,"line_end":177,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":76551,"byte_end":76573,"line_start":181,"line_end":181,"column_start":8,"column_end":30},"name":"try_lock_exclusive_for","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_for","value":"pub fn try_lock_exclusive_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":530},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":76474,"byte_end":76543,"line_start":180,"line_end":180,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":76697,"byte_end":76721,"line_start":184,"line_end":184,"column_start":8,"column_end":32},"name":"try_lock_exclusive_until","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_until","value":"pub fn try_lock_exclusive_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":530},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":76620,"byte_end":76689,"line_start":183,"line_end":183,"column_start":5,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":537},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":77154,"byte_end":77172,"line_start":194,"line_end":194,"column_start":18,"column_end":36},"name":"RawRwLockRecursive","qualname":"::rwlock::RawRwLockRecursive","value":"RawRwLockRecursive: RawRwLock","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":539}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":76765,"byte_end":76835,"line_start":187,"line_end":187,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":76836,"byte_end":76839,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ These are guaranteed to succeed without blocking if","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":76840,"byte_end":76895,"line_start":189,"line_end":189,"column_start":1,"column_end":56}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":76896,"byte_end":76971,"line_start":190,"line_end":190,"column_start":1,"column_end":76}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":76972,"byte_end":77043,"line_start":191,"line_end":191,"column_start":1,"column_end":72}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":77044,"byte_end":77118,"line_start":192,"line_end":192,"column_start":1,"column_end":75}},{"value":"/ for the lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":77119,"byte_end":77136,"line_start":193,"line_end":193,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":77273,"byte_end":77294,"line_start":196,"line_end":196,"column_start":8,"column_end":29},"name":"lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::lock_shared_recursive","value":"pub fn lock_shared_recursive(&Self)","parent":{"krate":0,"index":537},"children":[],"decl_id":null,"docs":" Acquires a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":77190,"byte_end":77265,"line_start":195,"line_end":195,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":77402,"byte_end":77427,"line_start":199,"line_end":199,"column_start":8,"column_end":33},"name":"try_lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::try_lock_shared_recursive","value":"pub fn try_lock_shared_recursive(&Self) -> bool","parent":{"krate":0,"index":537},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":77308,"byte_end":77394,"line_start":198,"line_end":198,"column_start":5,"column_end":91}}]},{"kind":"Trait","id":{"krate":0,"index":540},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":77548,"byte_end":77571,"line_start":203,"line_end":203,"column_start":18,"column_end":41},"name":"RawRwLockRecursiveTimed","qualname":"::rwlock::RawRwLockRecursiveTimed","value":"RawRwLockRecursiveTimed: RawRwLockRecursive + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":541},{"krate":0,"index":542}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks and timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks and timeouts.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":77447,"byte_end":77530,"line_start":202,"line_end":202,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":77745,"byte_end":77774,"line_start":206,"line_end":206,"column_start":8,"column_end":37},"name":"try_lock_shared_recursive_for","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_for","value":"pub fn try_lock_shared_recursive_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":540},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":77615,"byte_end":77688,"line_start":204,"line_end":204,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":77693,"byte_end":77737,"line_start":205,"line_end":205,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":77951,"byte_end":77982,"line_start":210,"line_end":210,"column_start":8,"column_end":39},"name":"try_lock_shared_recursive_until","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_until","value":"pub fn try_lock_shared_recursive_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":540},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":77821,"byte_end":77894,"line_start":208,"line_end":208,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":77899,"byte_end":77943,"line_start":209,"line_end":209,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":543},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":78358,"byte_end":78374,"line_start":219,"line_end":219,"column_start":18,"column_end":34},"name":"RawRwLockUpgrade","qualname":"::rwlock::RawRwLockUpgrade","value":"RawRwLockUpgrade: RawRwLock","parent":null,"children":[{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically upgrading a shared\n lock to an exclusive lock.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically upgrading a shared","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":78026,"byte_end":78104,"line_start":213,"line_end":213,"column_start":1,"column_end":79}},{"value":"/ lock to an exclusive lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":78105,"byte_end":78135,"line_start":214,"line_end":214,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":78136,"byte_end":78139,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ This requires acquiring a special \"upgradable read lock\" instead of a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":78140,"byte_end":78213,"line_start":216,"line_end":216,"column_start":1,"column_end":74}},{"value":"/ normal shared lock. There may only be one upgradable lock at any time,","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":78214,"byte_end":78288,"line_start":217,"line_end":217,"column_start":1,"column_end":75}},{"value":"/ otherwise deadlocks could occur when upgrading.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":78289,"byte_end":78340,"line_start":218,"line_end":218,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":78487,"byte_end":78502,"line_start":221,"line_end":221,"column_start":8,"column_end":23},"name":"lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::lock_upgradable","value":"pub fn lock_upgradable(&Self)","parent":{"krate":0,"index":543},"children":[],"decl_id":null,"docs":" Acquires an upgradable lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an upgradable lock, blocking the current thread until it is able to do so.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":78392,"byte_end":78479,"line_start":220,"line_end":220,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":78584,"byte_end":78603,"line_start":224,"line_end":224,"column_start":8,"column_end":27},"name":"try_lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::try_lock_upgradable","value":"pub fn try_lock_upgradable(&Self) -> bool","parent":{"krate":0,"index":543},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock without blocking.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":78516,"byte_end":78576,"line_start":223,"line_end":223,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":78798,"byte_end":78815,"line_start":231,"line_end":231,"column_start":15,"column_end":32},"name":"unlock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::unlock_upgradable","value":"pub unsafe fn unlock_upgradable(&Self)","parent":{"krate":0,"index":543},"children":[],"decl_id":null,"docs":" Releases an upgradable lock.","sig":null,"attributes":[{"value":"/ Releases an upgradable lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":78625,"byte_end":78657,"line_start":226,"line_end":226,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":78662,"byte_end":78665,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":78670,"byte_end":78682,"line_start":228,"line_end":228,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":78687,"byte_end":78690,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":78695,"byte_end":78783,"line_start":230,"line_end":230,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79023,"byte_end":79030,"line_start":238,"line_end":238,"column_start":15,"column_end":22},"name":"upgrade","qualname":"::rwlock::RawRwLockUpgrade::upgrade","value":"pub unsafe fn upgrade(&Self)","parent":{"krate":0,"index":543},"children":[],"decl_id":null,"docs":" Upgrades an upgradable lock to an exclusive lock.","sig":null,"attributes":[{"value":"/ Upgrades an upgradable lock to an exclusive lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":78829,"byte_end":78882,"line_start":233,"line_end":233,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":78887,"byte_end":78890,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":78895,"byte_end":78907,"line_start":235,"line_end":235,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":78912,"byte_end":78915,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":78920,"byte_end":79008,"line_start":237,"line_end":237,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79274,"byte_end":79285,"line_start":246,"line_end":246,"column_start":15,"column_end":26},"name":"try_upgrade","qualname":"::rwlock::RawRwLockUpgrade::try_upgrade","value":"pub unsafe fn try_upgrade(&Self) -> bool","parent":{"krate":0,"index":543},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock without\n blocking.","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock without","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79044,"byte_end":79115,"line_start":240,"line_end":240,"column_start":5,"column_end":76}},{"value":"/ blocking.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79120,"byte_end":79133,"line_start":241,"line_end":241,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79138,"byte_end":79141,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79146,"byte_end":79158,"line_start":243,"line_end":243,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79163,"byte_end":79166,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79171,"byte_end":79259,"line_start":245,"line_end":245,"column_start":5,"column_end":93}}]},{"kind":"Trait","id":{"krate":0,"index":549},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79412,"byte_end":79432,"line_start":251,"line_end":251,"column_start":18,"column_end":38},"name":"RawRwLockUpgradeFair","qualname":"::rwlock::RawRwLockUpgradeFair","value":"RawRwLockUpgradeFair: RawRwLockUpgrade + RawRwLockFair","parent":null,"children":[{"krate":0,"index":550},{"krate":0,"index":551}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and fair\n unlocking.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and fair","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79305,"byte_end":79379,"line_start":249,"line_end":249,"column_start":1,"column_end":75}},{"value":"/ unlocking.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79380,"byte_end":79394,"line_start":250,"line_end":250,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79675,"byte_end":79697,"line_start":257,"line_end":257,"column_start":15,"column_end":37},"name":"unlock_upgradable_fair","qualname":"::rwlock::RawRwLockUpgradeFair::unlock_upgradable_fair","value":"pub unsafe fn unlock_upgradable_fair(&Self)","parent":{"krate":0,"index":549},"children":[],"decl_id":null,"docs":" Releases an upgradable lock using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Releases an upgradable lock using a fair unlock protocol.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79473,"byte_end":79534,"line_start":252,"line_end":252,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79539,"byte_end":79542,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79547,"byte_end":79559,"line_start":254,"line_end":254,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79564,"byte_end":79567,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79572,"byte_end":79660,"line_start":256,"line_end":256,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80154,"byte_end":80169,"line_start":268,"line_end":268,"column_start":15,"column_end":30},"name":"bump_upgradable","qualname":"::rwlock::RawRwLockUpgradeFair::bump_upgradable","value":"pub unsafe fn bump_upgradable(&Self)","parent":{"krate":0,"index":549},"children":[],"decl_id":null,"docs":" Temporarily yields an upgradable lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an upgradable lock to a waiting thread if there is one.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79711,"byte_end":79789,"line_start":259,"line_end":259,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79794,"byte_end":79797,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_upgradable_fair` followed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79802,"byte_end":79889,"line_start":261,"line_end":261,"column_start":5,"column_end":92}},{"value":"/ by `lock_upgradable`, however it can be much more efficient in the case where there","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79894,"byte_end":79981,"line_start":262,"line_end":262,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79986,"byte_end":80013,"line_start":263,"line_end":263,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80018,"byte_end":80021,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80026,"byte_end":80038,"line_start":265,"line_end":265,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80043,"byte_end":80046,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80051,"byte_end":80139,"line_start":267,"line_end":267,"column_start":5,"column_end":93}}]},{"kind":"Trait","id":{"krate":0,"index":552},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80368,"byte_end":80393,"line_start":276,"line_end":276,"column_start":18,"column_end":43},"name":"RawRwLockUpgradeDowngrade","qualname":"::rwlock::RawRwLockUpgradeDowngrade","value":"RawRwLockUpgradeDowngrade: RawRwLockUpgrade + RawRwLockDowngrade","parent":null,"children":[{"krate":0,"index":553},{"krate":0,"index":554}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and lock\n downgrading.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and lock","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80259,"byte_end":80333,"line_start":274,"line_end":274,"column_start":1,"column_end":75}},{"value":"/ downgrading.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80334,"byte_end":80350,"line_start":275,"line_end":275,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80631,"byte_end":80651,"line_start":282,"line_end":282,"column_start":15,"column_end":35},"name":"downgrade_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_upgradable","value":"pub unsafe fn downgrade_upgradable(&Self)","parent":{"krate":0,"index":552},"children":[],"decl_id":null,"docs":" Downgrades an upgradable lock to a shared lock.","sig":null,"attributes":[{"value":"/ Downgrades an upgradable lock to a shared lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80439,"byte_end":80490,"line_start":277,"line_end":277,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80495,"byte_end":80498,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80503,"byte_end":80515,"line_start":279,"line_end":279,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80520,"byte_end":80523,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80528,"byte_end":80616,"line_start":281,"line_end":281,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80860,"byte_end":80883,"line_start":289,"line_end":289,"column_start":15,"column_end":38},"name":"downgrade_to_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_to_upgradable","value":"pub unsafe fn downgrade_to_upgradable(&Self)","parent":{"krate":0,"index":552},"children":[],"decl_id":null,"docs":" Downgrades an exclusive lock to an upgradable lock.","sig":null,"attributes":[{"value":"/ Downgrades an exclusive lock to an upgradable lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80665,"byte_end":80720,"line_start":284,"line_end":284,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80725,"byte_end":80728,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80733,"byte_end":80745,"line_start":286,"line_end":286,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80750,"byte_end":80753,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an exclusive lock is held in the current context.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80758,"byte_end":80845,"line_start":288,"line_end":288,"column_start":5,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":555},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":81009,"byte_end":81030,"line_start":294,"line_end":294,"column_start":18,"column_end":39},"name":"RawRwLockUpgradeTimed","qualname":"::rwlock::RawRwLockUpgradeTimed","value":"RawRwLockUpgradeTimed: RawRwLockUpgrade + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and locking\n with timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and locking","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80895,"byte_end":80972,"line_start":292,"line_end":292,"column_start":1,"column_end":78}},{"value":"/ with timeouts.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80973,"byte_end":80991,"line_start":293,"line_end":293,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":81150,"byte_end":81173,"line_start":296,"line_end":296,"column_start":8,"column_end":31},"name":"try_lock_upgradable_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_for","value":"pub fn try_lock_upgradable_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":555},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":81072,"byte_end":81142,"line_start":295,"line_end":295,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":81298,"byte_end":81323,"line_start":299,"line_end":299,"column_start":8,"column_end":33},"name":"try_lock_upgradable_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_until","value":"pub fn try_lock_upgradable_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":555},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":81220,"byte_end":81290,"line_start":298,"line_end":298,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":81609,"byte_end":81624,"line_start":307,"line_end":307,"column_start":15,"column_end":30},"name":"try_upgrade_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_for","value":"pub unsafe fn try_upgrade_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":555},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":81369,"byte_end":81440,"line_start":301,"line_end":301,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":81445,"byte_end":81468,"line_start":302,"line_end":302,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":81473,"byte_end":81476,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":81481,"byte_end":81493,"line_start":304,"line_end":304,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":81498,"byte_end":81501,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":81506,"byte_end":81594,"line_start":306,"line_end":306,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":81911,"byte_end":81928,"line_start":315,"line_end":315,"column_start":15,"column_end":32},"name":"try_upgrade_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_until","value":"pub unsafe fn try_upgrade_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":555},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":81671,"byte_end":81742,"line_start":309,"line_end":309,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":81747,"byte_end":81770,"line_start":310,"line_end":310,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":81775,"byte_end":81778,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":81783,"byte_end":81795,"line_start":312,"line_end":312,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":81800,"byte_end":81803,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ This method may only be called if an upgradable lock is held in the current context.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":81808,"byte_end":81896,"line_start":314,"line_end":314,"column_start":5,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":560},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":82680,"byte_end":82686,"line_start":330,"line_end":330,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rwlock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":563},{"krate":0,"index":564}],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[{"value":"/ A reader-writer lock","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":81972,"byte_end":81996,"line_start":318,"line_end":318,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":81997,"byte_end":82000,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":82001,"byte_end":82078,"line_start":320,"line_end":320,"column_start":1,"column_end":78}},{"value":"/ point in time. The write portion of this lock typically allows modification","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":82079,"byte_end":82158,"line_start":321,"line_end":321,"column_start":1,"column_end":80}},{"value":"/ of the underlying data (exclusive access) and the read portion of this lock","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":82159,"byte_end":82238,"line_start":322,"line_end":322,"column_start":1,"column_end":80}},{"value":"/ typically allows for read-only access (shared access).","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":82239,"byte_end":82297,"line_start":323,"line_end":323,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":82298,"byte_end":82301,"line_start":324,"line_end":324,"column_start":1,"column_end":4}},{"value":"/ The type parameter `T` represents the data that this lock protects. It is","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":82302,"byte_end":82379,"line_start":325,"line_end":325,"column_start":1,"column_end":78}},{"value":"/ required that `T` satisfies `Send` to be shared across threads and `Sync` to","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":82380,"byte_end":82460,"line_start":326,"line_end":326,"column_start":1,"column_end":81}},{"value":"/ allow concurrent access through readers. The RAII guards returned from the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":82461,"byte_end":82539,"line_start":327,"line_end":327,"column_start":1,"column_end":79}},{"value":"/ locking methods implement `Deref` (and `DerefMut` for the `write` methods)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":82540,"byte_end":82618,"line_start":328,"line_end":328,"column_start":1,"column_end":79}},{"value":"/ to allow access to the contained of the lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":82619,"byte_end":82668,"line_start":329,"line_end":329,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":83971,"byte_end":83974,"line_start":381,"line_end":381,"column_start":12,"column_end":15},"name":"new","qualname":"<RwLock<R, T>>::new","value":"pub fn new(T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an `RwLock<T>` which is unlocked.\n","sig":null,"attributes":[{"value":"/ Creates a new instance of an `RwLock<T>` which is unlocked.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":83840,"byte_end":83903,"line_start":378,"line_end":378,"column_start":5,"column_end":68}},{"value":"cfg(not(has_const_fn_trait_bound))","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":83908,"byte_end":83945,"line_start":379,"line_end":379,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":83950,"byte_end":83959,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":84217,"byte_end":84227,"line_start":391,"line_end":391,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<R, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `RwLock`, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this `RwLock`, returning the underlying data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":84105,"byte_end":84163,"line_start":388,"line_end":388,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":84168,"byte_end":84177,"line_start":389,"line_end":389,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":84182,"byte_end":84205,"line_start":390,"line_end":390,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":84547,"byte_end":84556,"line_start":403,"line_end":403,"column_start":18,"column_end":27},"name":"const_new","qualname":"<RwLock<R, T>>::const_new","value":"pub const fn const_new(R, T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new new instance of an `RwLock<T>` based on a pre-existing\n `RawRwLock<T>`.","sig":null,"attributes":[{"value":"/ Creates a new new instance of an `RwLock<T>` based on a pre-existing","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":84322,"byte_end":84394,"line_start":397,"line_end":397,"column_start":5,"column_end":77}},{"value":"/ `RawRwLock<T>`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":84399,"byte_end":84418,"line_start":398,"line_end":398,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":84423,"byte_end":84426,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ This allows creating a `RwLock<T>` in a constant context on stable","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":84431,"byte_end":84501,"line_start":400,"line_end":400,"column_start":5,"column_end":75}},{"value":"/ Rust.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":84506,"byte_end":84515,"line_start":401,"line_end":401,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":84520,"byte_end":84529,"line_start":402,"line_end":402,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":85883,"byte_end":85887,"line_start":447,"line_end":447,"column_start":12,"column_end":16},"name":"read","qualname":"<RwLock<R, T>>::read","value":"pub fn read(&Self) -> RwLockReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":85275,"byte_end":85351,"line_start":434,"line_end":434,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":85356,"byte_end":85385,"line_start":435,"line_end":435,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":85390,"byte_end":85393,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":85398,"byte_end":85474,"line_start":437,"line_end":437,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":85479,"byte_end":85555,"line_start":438,"line_end":438,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":85560,"byte_end":85584,"line_start":439,"line_end":439,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":85589,"byte_end":85592,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ Note that attempts to recursively acquire a read lock on a `RwLock` when","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":85597,"byte_end":85673,"line_start":441,"line_end":441,"column_start":5,"column_end":81}},{"value":"/ the current thread already holds one may result in a deadlock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":85678,"byte_end":85744,"line_start":442,"line_end":442,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":85749,"byte_end":85752,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":85757,"byte_end":85829,"line_start":444,"line_end":444,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":85834,"byte_end":85857,"line_start":445,"line_end":445,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":85862,"byte_end":85871,"line_start":446,"line_end":446,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":86390,"byte_end":86398,"line_start":461,"line_end":461,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<R, T>>::try_read","value":"pub fn try_read(&Self) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":86056,"byte_end":86118,"line_start":453,"line_end":453,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":86123,"byte_end":86126,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":86131,"byte_end":86208,"line_start":455,"line_end":455,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":86213,"byte_end":86290,"line_start":456,"line_end":456,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":86295,"byte_end":86318,"line_start":457,"line_end":457,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":86323,"byte_end":86326,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":86331,"byte_end":86364,"line_start":459,"line_end":459,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":86369,"byte_end":86378,"line_start":460,"line_end":460,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":87017,"byte_end":87022,"line_start":479,"line_end":479,"column_start":12,"column_end":17},"name":"write","qualname":"<RwLock<R, T>>::write","value":"pub fn write(&Self) -> RwLockWriteGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with exclusive write access, blocking the current\n thread until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with exclusive write access, blocking the current","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":86641,"byte_end":86714,"line_start":470,"line_end":470,"column_start":5,"column_end":78}},{"value":"/ thread until it can be acquired.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":86719,"byte_end":86755,"line_start":471,"line_end":471,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":86760,"byte_end":86763,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ This function will not return while other writers or other readers","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":86768,"byte_end":86838,"line_start":473,"line_end":473,"column_start":5,"column_end":75}},{"value":"/ currently have access to the lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":86843,"byte_end":86881,"line_start":474,"line_end":474,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":86886,"byte_end":86889,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will drop the write access of this `RwLock`","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":86894,"byte_end":86969,"line_start":476,"line_end":476,"column_start":5,"column_end":80}},{"value":"/ when dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":86974,"byte_end":86991,"line_start":477,"line_end":477,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":86996,"byte_end":87005,"line_start":478,"line_end":478,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":87521,"byte_end":87530,"line_start":493,"line_end":493,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<R, T>>::try_write","value":"pub fn try_write(&Self) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to lock this `RwLock` with exclusive write access.","sig":null,"attributes":[{"value":"/ Attempts to lock this `RwLock` with exclusive write access.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":87196,"byte_end":87259,"line_start":485,"line_end":485,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":87264,"byte_end":87267,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":87272,"byte_end":87348,"line_start":487,"line_end":487,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned which will release the lock when","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":87353,"byte_end":87426,"line_start":488,"line_end":488,"column_start":5,"column_end":78}},{"value":"/ it is dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":87431,"byte_end":87449,"line_start":489,"line_end":489,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":87454,"byte_end":87457,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":87462,"byte_end":87495,"line_start":491,"line_end":491,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":87500,"byte_end":87509,"line_start":492,"line_end":492,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":88026,"byte_end":88033,"line_start":507,"line_end":507,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<R, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":87778,"byte_end":87833,"line_start":502,"line_end":502,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":87838,"byte_end":87841,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `RwLock` mutably, no actual locking needs to","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":87846,"byte_end":87922,"line_start":504,"line_end":504,"column_start":5,"column_end":81}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":87927,"byte_end":88000,"line_start":505,"line_end":505,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":88005,"byte_end":88014,"line_start":506,"line_end":506,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":88199,"byte_end":88208,"line_start":513,"line_end":513,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<RwLock<R, T>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether this `RwLock` is currently locked in any way.\n","sig":null,"attributes":[{"value":"/ Checks whether this `RwLock` is currently locked in any way.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":88109,"byte_end":88173,"line_start":511,"line_end":511,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":88178,"byte_end":88187,"line_start":512,"line_end":512,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":88351,"byte_end":88370,"line_start":519,"line_end":519,"column_start":12,"column_end":31},"name":"is_locked_exclusive","qualname":"<RwLock<R, T>>::is_locked_exclusive","value":"pub fn is_locked_exclusive(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if this `RwLock` is currently exclusively locked.\n","sig":null,"attributes":[{"value":"/ Check if this `RwLock` is currently exclusively locked.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":88266,"byte_end":88325,"line_start":517,"line_end":517,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":88330,"byte_end":88339,"line_start":518,"line_end":518,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":88969,"byte_end":88986,"line_start":535,"line_end":535,"column_start":19,"column_end":36},"name":"force_unlock_read","qualname":"<RwLock<R, T>>::force_unlock_read","value":"pub unsafe fn force_unlock_read(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":88438,"byte_end":88471,"line_start":523,"line_end":523,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":88476,"byte_end":88479,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":88484,"byte_end":88558,"line_start":525,"line_end":525,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":88563,"byte_end":88638,"line_start":526,"line_end":526,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":88643,"byte_end":88664,"line_start":527,"line_end":527,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":88669,"byte_end":88672,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":88677,"byte_end":88689,"line_start":529,"line_end":529,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":88694,"byte_end":88697,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":88702,"byte_end":88776,"line_start":531,"line_end":531,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":88781,"byte_end":88855,"line_start":532,"line_end":532,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":88860,"byte_end":88936,"line_start":533,"line_end":533,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":88941,"byte_end":88950,"line_start":534,"line_end":534,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":89577,"byte_end":89595,"line_start":551,"line_end":551,"column_start":19,"column_end":37},"name":"force_unlock_write","qualname":"<RwLock<R, T>>::force_unlock_write","value":"pub unsafe fn force_unlock_write(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":89041,"byte_end":89075,"line_start":539,"line_end":539,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":89080,"byte_end":89083,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":89088,"byte_end":89162,"line_start":541,"line_end":541,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":89167,"byte_end":89243,"line_start":542,"line_end":542,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":89248,"byte_end":89269,"line_start":543,"line_end":543,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":89274,"byte_end":89277,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":89282,"byte_end":89294,"line_start":545,"line_end":545,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":89299,"byte_end":89302,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":89307,"byte_end":89381,"line_start":547,"line_end":547,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":89386,"byte_end":89461,"line_start":548,"line_end":548,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":89466,"byte_end":89544,"line_start":549,"line_end":549,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":89549,"byte_end":89558,"line_start":550,"line_end":550,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":90061,"byte_end":90064,"line_start":565,"line_end":565,"column_start":19,"column_end":22},"name":"raw","qualname":"<RwLock<R, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw reader-writer lock object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw reader-writer lock object.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":89653,"byte_end":89710,"line_start":555,"line_end":555,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":89715,"byte_end":89718,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawRwLock` trait from","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":89723,"byte_end":89799,"line_start":557,"line_end":557,"column_start":5,"column_end":81}},{"value":"/ `lock_api` to be able to call functions on the raw","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":89804,"byte_end":89858,"line_start":558,"line_end":558,"column_start":5,"column_end":59}},{"value":"/ reader-writer lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":89863,"byte_end":89886,"line_start":559,"line_end":559,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":89891,"byte_end":89894,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":89899,"byte_end":89911,"line_start":561,"line_end":561,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":89916,"byte_end":89919,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":89924,"byte_end":89991,"line_start":563,"line_end":563,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a lock guard.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":89996,"byte_end":90042,"line_start":564,"line_end":564,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":90696,"byte_end":90704,"line_start":582,"line_end":582,"column_start":12,"column_end":20},"name":"data_ptr","qualname":"<RwLock<R, T>>::data_ptr","value":"pub fn data_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the underlying data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":90109,"byte_end":90158,"line_start":569,"line_end":569,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":90163,"byte_end":90166,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":90171,"byte_end":90245,"line_start":571,"line_end":571,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` or `RwLockWriteGuard` object","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":90250,"byte_end":90323,"line_start":572,"line_end":572,"column_start":5,"column_end":78}},{"value":"/ alive, for example when dealing with FFI.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":90328,"byte_end":90373,"line_start":573,"line_end":573,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":90378,"byte_end":90381,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":90386,"byte_end":90398,"line_start":575,"line_end":575,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":90403,"byte_end":90406,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ You must ensure that there are no data races when dereferencing the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":90411,"byte_end":90482,"line_start":577,"line_end":577,"column_start":5,"column_end":76}},{"value":"/ returned pointer, for example if the current thread logically owns a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":90487,"byte_end":90559,"line_start":578,"line_end":578,"column_start":5,"column_end":77}},{"value":"/ `RwLockReadGuard` or `RwLockWriteGuard` but that guard has been discarded","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":90564,"byte_end":90641,"line_start":579,"line_end":579,"column_start":5,"column_end":82}},{"value":"/ using `mem::forget`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":90646,"byte_end":90670,"line_start":580,"line_end":580,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":90675,"byte_end":90684,"line_start":581,"line_end":581,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":94184,"byte_end":94206,"line_start":678,"line_end":678,"column_start":19,"column_end":41},"name":"force_unlock_read_fair","qualname":"<RwLock<R, T>>::force_unlock_read_fair","value":"pub unsafe fn force_unlock_read_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock using a fair unlock procotol.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":93624,"byte_end":93686,"line_start":666,"line_end":666,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":93691,"byte_end":93694,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":93699,"byte_end":93773,"line_start":668,"line_end":668,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":93778,"byte_end":93853,"line_start":669,"line_end":669,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":93858,"byte_end":93879,"line_start":670,"line_end":670,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":93884,"byte_end":93887,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":93892,"byte_end":93904,"line_start":672,"line_end":672,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":93909,"byte_end":93912,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":93917,"byte_end":93991,"line_start":674,"line_end":674,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":93996,"byte_end":94070,"line_start":675,"line_end":675,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":94075,"byte_end":94151,"line_start":676,"line_end":676,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":94156,"byte_end":94165,"line_start":677,"line_end":677,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":94831,"byte_end":94854,"line_start":694,"line_end":694,"column_start":19,"column_end":42},"name":"force_unlock_write_fair","qualname":"<RwLock<R, T>>::force_unlock_write_fair","value":"pub unsafe fn force_unlock_write_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock using a fair unlock procotol.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":94266,"byte_end":94329,"line_start":682,"line_end":682,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":94334,"byte_end":94337,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":94342,"byte_end":94416,"line_start":684,"line_end":684,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":94421,"byte_end":94497,"line_start":685,"line_end":685,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":94502,"byte_end":94523,"line_start":686,"line_end":686,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":94528,"byte_end":94531,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":94536,"byte_end":94548,"line_start":688,"line_end":688,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":94553,"byte_end":94556,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":94561,"byte_end":94635,"line_start":690,"line_end":690,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":94640,"byte_end":94715,"line_start":691,"line_end":691,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":94720,"byte_end":94798,"line_start":692,"line_end":692,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":94803,"byte_end":94812,"line_start":693,"line_end":693,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":95306,"byte_end":95318,"line_start":707,"line_end":707,"column_start":12,"column_end":24},"name":"try_read_for","qualname":"<RwLock<R, T>>::try_read_for","value":"pub fn try_read_for(&Self, R::Duration) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":94969,"byte_end":95046,"line_start":700,"line_end":700,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":95051,"byte_end":95066,"line_start":701,"line_end":701,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":95071,"byte_end":95074,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":95079,"byte_end":95150,"line_start":703,"line_end":703,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":95155,"byte_end":95226,"line_start":704,"line_end":704,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":95231,"byte_end":95280,"line_start":705,"line_end":705,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":95285,"byte_end":95294,"line_start":706,"line_end":706,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":95931,"byte_end":95945,"line_start":723,"line_end":723,"column_start":12,"column_end":26},"name":"try_read_until","qualname":"<RwLock<R, T>>::try_read_until","value":"pub fn try_read_until(&Self, R::Instant) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":95594,"byte_end":95671,"line_start":716,"line_end":716,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":95676,"byte_end":95691,"line_start":717,"line_end":717,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":95696,"byte_end":95699,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":95704,"byte_end":95775,"line_start":719,"line_end":719,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":95780,"byte_end":95851,"line_start":720,"line_end":720,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":95856,"byte_end":95905,"line_start":721,"line_end":721,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":95910,"byte_end":95919,"line_start":722,"line_end":722,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":96566,"byte_end":96579,"line_start":739,"line_end":739,"column_start":12,"column_end":25},"name":"try_write_for","qualname":"<RwLock<R, T>>::try_write_for","value":"pub fn try_write_for(&Self, R::Duration) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":96222,"byte_end":96295,"line_start":732,"line_end":732,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":96300,"byte_end":96323,"line_start":733,"line_end":733,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":96328,"byte_end":96331,"line_start":734,"line_end":734,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":96336,"byte_end":96407,"line_start":735,"line_end":735,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":96412,"byte_end":96483,"line_start":736,"line_end":736,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":96488,"byte_end":96540,"line_start":737,"line_end":737,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":96545,"byte_end":96554,"line_start":738,"line_end":738,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":97204,"byte_end":97219,"line_start":755,"line_end":755,"column_start":12,"column_end":27},"name":"try_write_until","qualname":"<RwLock<R, T>>::try_write_until","value":"pub fn try_write_until(&Self, R::Instant) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":96860,"byte_end":96933,"line_start":748,"line_end":748,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":96938,"byte_end":96961,"line_start":749,"line_end":749,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":96966,"byte_end":96969,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":96974,"byte_end":97045,"line_start":751,"line_end":751,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":97050,"byte_end":97121,"line_start":752,"line_end":752,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":97126,"byte_end":97178,"line_start":753,"line_end":753,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":97183,"byte_end":97192,"line_start":754,"line_end":754,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":101096,"byte_end":101110,"line_start":854,"line_end":854,"column_start":12,"column_end":26},"name":"read_recursive","qualname":"<RwLock<R, T>>::read_recursive","value":"pub fn read_recursive(&Self) -> RwLockReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":100303,"byte_end":100379,"line_start":838,"line_end":838,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":100384,"byte_end":100413,"line_start":839,"line_end":839,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":100418,"byte_end":100421,"line_start":840,"line_end":840,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":100426,"byte_end":100502,"line_start":841,"line_end":841,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":100507,"byte_end":100583,"line_start":842,"line_end":842,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":100588,"byte_end":100612,"line_start":843,"line_end":843,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":100617,"byte_end":100620,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ Unlike `read`, this method is guaranteed to succeed without blocking if","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":100625,"byte_end":100700,"line_start":845,"line_end":845,"column_start":5,"column_end":80}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":100705,"byte_end":100780,"line_start":846,"line_end":846,"column_start":5,"column_end":80}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":100785,"byte_end":100856,"line_start":847,"line_end":847,"column_start":5,"column_end":76}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":100861,"byte_end":100935,"line_start":848,"line_end":848,"column_start":5,"column_end":79}},{"value":"/ for the lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":100940,"byte_end":100957,"line_start":849,"line_end":849,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":100962,"byte_end":100965,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":100970,"byte_end":101042,"line_start":851,"line_end":851,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":101047,"byte_end":101070,"line_start":852,"line_end":852,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":101075,"byte_end":101084,"line_start":853,"line_end":853,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":101794,"byte_end":101812,"line_start":871,"line_end":871,"column_start":12,"column_end":30},"name":"try_read_recursive","qualname":"<RwLock<R, T>>::try_read_recursive","value":"pub fn try_read_recursive(&Self) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":101289,"byte_end":101351,"line_start":860,"line_end":860,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":101356,"byte_end":101359,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":101364,"byte_end":101441,"line_start":862,"line_end":862,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":101446,"byte_end":101523,"line_start":863,"line_end":863,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":101528,"byte_end":101551,"line_start":864,"line_end":864,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":101556,"byte_end":101559,"line_start":865,"line_end":865,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed if another read lock is held at the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":101564,"byte_end":101640,"line_start":866,"line_end":866,"column_start":5,"column_end":81}},{"value":"/ time of the call. See the documentation for `read_recursive` for details.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":101645,"byte_end":101722,"line_start":867,"line_end":867,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":101727,"byte_end":101730,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":101735,"byte_end":101768,"line_start":869,"line_end":869,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":101773,"byte_end":101782,"line_start":870,"line_end":870,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":103812,"byte_end":103834,"line_start":920,"line_end":920,"column_start":12,"column_end":34},"name":"try_read_recursive_for","qualname":"<RwLock<R, T>>::try_read_recursive_for","value":"pub fn try_read_recursive_for(&Self, R::Duration)\n-> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":103279,"byte_end":103356,"line_start":909,"line_end":909,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":103361,"byte_end":103376,"line_start":910,"line_end":910,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":103381,"byte_end":103384,"line_start":911,"line_end":911,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":103389,"byte_end":103460,"line_start":912,"line_end":912,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":103465,"byte_end":103536,"line_start":913,"line_end":913,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":103541,"byte_end":103590,"line_start":914,"line_end":914,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":103595,"byte_end":103598,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed without blocking if another read","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":103603,"byte_end":103676,"line_start":916,"line_end":916,"column_start":5,"column_end":78}},{"value":"/ lock is held at the time of the call. See the documentation for","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":103681,"byte_end":103748,"line_start":917,"line_end":917,"column_start":5,"column_end":72}},{"value":"/ `read_recursive` for details.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":103753,"byte_end":103786,"line_start":918,"line_end":918,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":103791,"byte_end":103800,"line_start":919,"line_end":919,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":104480,"byte_end":104504,"line_start":939,"line_end":939,"column_start":12,"column_end":36},"name":"try_read_recursive_until","qualname":"<RwLock<R, T>>::try_read_recursive_until","value":"pub fn try_read_recursive_until(&Self, R::Instant)\n-> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":104143,"byte_end":104220,"line_start":932,"line_end":932,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":104225,"byte_end":104240,"line_start":933,"line_end":933,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":104245,"byte_end":104248,"line_start":934,"line_end":934,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":104253,"byte_end":104324,"line_start":935,"line_end":935,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":104329,"byte_end":104400,"line_start":936,"line_end":936,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":104405,"byte_end":104454,"line_start":937,"line_end":937,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":104459,"byte_end":104468,"line_start":938,"line_end":938,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":107051,"byte_end":107066,"line_start":1010,"line_end":1010,"column_start":12,"column_end":27},"name":"upgradable_read","qualname":"<RwLock<R, T>>::upgradable_read","value":"pub fn upgradable_read(&Self) -> RwLockUpgradableReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with upgradable read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with upgradable read access, blocking the current thread","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":106573,"byte_end":106653,"line_start":1000,"line_end":1000,"column_start":5,"column_end":85}},{"value":"/ until it can be acquired.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":106658,"byte_end":106687,"line_start":1001,"line_end":1001,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":106692,"byte_end":106695,"line_start":1002,"line_end":1002,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers or other","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":106700,"byte_end":106779,"line_start":1003,"line_end":1003,"column_start":5,"column_end":84}},{"value":"/ upgradable reads which hold the lock. There may be other readers currently","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":106784,"byte_end":106862,"line_start":1004,"line_end":1004,"column_start":5,"column_end":83}},{"value":"/ inside the lock when this method returns.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":106867,"byte_end":106912,"line_start":1005,"line_end":1005,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":106917,"byte_end":106920,"line_start":1006,"line_end":1006,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":106925,"byte_end":106997,"line_start":1007,"line_end":1007,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":107002,"byte_end":107025,"line_start":1008,"line_end":1008,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":107030,"byte_end":107039,"line_start":1009,"line_end":1009,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":107593,"byte_end":107612,"line_start":1024,"line_end":1024,"column_start":12,"column_end":31},"name":"try_upgradable_read","qualname":"<RwLock<R, T>>::try_upgradable_read","value":"pub fn try_upgradable_read(&Self) -> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":107255,"byte_end":107321,"line_start":1016,"line_end":1016,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":107326,"byte_end":107329,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":107334,"byte_end":107411,"line_start":1018,"line_end":1018,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":107416,"byte_end":107493,"line_start":1019,"line_end":1019,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":107498,"byte_end":107521,"line_start":1020,"line_end":1020,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":107526,"byte_end":107529,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":107534,"byte_end":107567,"line_start":1022,"line_end":1022,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":107572,"byte_end":107581,"line_start":1023,"line_end":1023,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":109804,"byte_end":109827,"line_start":1081,"line_end":1081,"column_start":12,"column_end":35},"name":"try_upgradable_read_for","qualname":"<RwLock<R, T>>::try_upgradable_read_for","value":"pub fn try_upgradable_read_for(&Self, R::Duration)\n-> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":109463,"byte_end":109544,"line_start":1074,"line_end":1074,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":109549,"byte_end":109564,"line_start":1075,"line_end":1075,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":109569,"byte_end":109572,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":109577,"byte_end":109648,"line_start":1077,"line_end":1077,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":109653,"byte_end":109724,"line_start":1078,"line_end":1078,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":109729,"byte_end":109778,"line_start":1079,"line_end":1079,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":109783,"byte_end":109792,"line_start":1080,"line_end":1080,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":110487,"byte_end":110512,"line_start":1100,"line_end":1100,"column_start":12,"column_end":37},"name":"try_upgradable_read_until","qualname":"<RwLock<R, T>>::try_upgradable_read_until","value":"pub fn try_upgradable_read_until(&Self, R::Instant)\n-> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":110146,"byte_end":110227,"line_start":1093,"line_end":1093,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":110232,"byte_end":110247,"line_start":1094,"line_end":1094,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":110252,"byte_end":110255,"line_start":1095,"line_end":1095,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":110260,"byte_end":110331,"line_start":1096,"line_end":1096,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":110336,"byte_end":110407,"line_start":1097,"line_end":1097,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":110412,"byte_end":110461,"line_start":1098,"line_end":1098,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":110466,"byte_end":110475,"line_start":1099,"line_end":1099,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":645},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":113440,"byte_end":113455,"line_start":1186,"line_end":1186,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":649},{"krate":0,"index":650}],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the shared read access of a lock when","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":113282,"byte_end":113354,"line_start":1183,"line_end":1183,"column_start":1,"column_end":73}},{"value":"/ dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":113355,"byte_end":113367,"line_start":1184,"line_end":1184,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":113368,"byte_end":113428,"line_start":1185,"line_end":1185,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":113724,"byte_end":113730,"line_start":1193,"line_end":1193,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockReadGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":113646,"byte_end":113712,"line_start":1192,"line_end":1192,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":114210,"byte_end":114213,"line_start":1206,"line_end":1206,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockReadGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockReadGuard where F: FnOnce(&T)\n-> &U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":113791,"byte_end":113865,"line_start":1197,"line_end":1197,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":113870,"byte_end":113873,"line_start":1198,"line_end":1198,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":113878,"byte_end":113940,"line_start":1199,"line_end":1199,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":113945,"byte_end":113976,"line_start":1200,"line_end":1200,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":113981,"byte_end":113984,"line_start":1201,"line_end":1201,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":113989,"byte_end":114040,"line_start":1202,"line_end":1202,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":114045,"byte_end":114126,"line_start":1203,"line_end":1203,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":114131,"byte_end":114184,"line_start":1204,"line_end":1204,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":114189,"byte_end":114198,"line_start":1205,"line_end":1205,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":115059,"byte_end":115066,"line_start":1230,"line_end":1230,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockReadGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockReadGuard, Self>\nwhere F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. Returns the original guard if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":114557,"byte_end":114631,"line_start":1220,"line_end":1220,"column_start":5,"column_end":79}},{"value":"/ locked data. Returns the original guard if the closure returns `None`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":114636,"byte_end":114710,"line_start":1221,"line_end":1221,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":114715,"byte_end":114718,"line_start":1222,"line_end":1222,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":114723,"byte_end":114785,"line_start":1223,"line_end":1223,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":114790,"byte_end":114821,"line_start":1224,"line_end":1224,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":114826,"byte_end":114829,"line_start":1225,"line_end":1225,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":114834,"byte_end":114885,"line_start":1226,"line_end":1226,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::try_map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":114890,"byte_end":114975,"line_start":1227,"line_end":1227,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":114980,"byte_end":115033,"line_start":1228,"line_end":1228,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":115038,"byte_end":115047,"line_start":1229,"line_end":1229,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":115818,"byte_end":115826,"line_start":1254,"line_end":1254,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockReadGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":115521,"byte_end":115588,"line_start":1247,"line_end":1247,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":115593,"byte_end":115596,"line_start":1248,"line_end":1248,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":115601,"byte_end":115653,"line_start":1249,"line_end":1249,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":115658,"byte_end":115661,"line_start":1250,"line_end":1250,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":115666,"byte_end":115734,"line_start":1251,"line_end":1251,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":115739,"byte_end":115792,"line_start":1252,"line_end":1252,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":115797,"byte_end":115806,"line_start":1253,"line_end":1253,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":116981,"byte_end":116992,"line_start":1281,"line_end":1281,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":116180,"byte_end":116234,"line_start":1268,"line_end":1268,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":116239,"byte_end":116242,"line_start":1269,"line_end":1269,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":116247,"byte_end":116321,"line_start":1270,"line_end":1270,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":116326,"byte_end":116401,"line_start":1271,"line_end":1271,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":116406,"byte_end":116479,"line_start":1272,"line_end":1272,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":116484,"byte_end":116553,"line_start":1273,"line_end":1273,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":116558,"byte_end":116635,"line_start":1274,"line_end":1274,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":116640,"byte_end":116707,"line_start":1275,"line_end":1275,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":116712,"byte_end":116715,"line_start":1276,"line_end":1276,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":116720,"byte_end":116796,"line_start":1277,"line_end":1277,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":116801,"byte_end":116877,"line_start":1278,"line_end":1278,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockReadGuard` normally.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":116882,"byte_end":116955,"line_start":1279,"line_end":1279,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":116960,"byte_end":116969,"line_start":1280,"line_end":1280,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":117476,"byte_end":117489,"line_start":1296,"line_end":1296,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockReadGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":117179,"byte_end":117246,"line_start":1289,"line_end":1289,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":117251,"byte_end":117254,"line_start":1290,"line_end":1290,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":117259,"byte_end":117311,"line_start":1291,"line_end":1291,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":117316,"byte_end":117319,"line_start":1292,"line_end":1292,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":117324,"byte_end":117392,"line_start":1293,"line_end":1293,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":117397,"byte_end":117450,"line_start":1294,"line_end":1294,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":117455,"byte_end":117464,"line_start":1295,"line_end":1295,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":118070,"byte_end":118074,"line_start":1314,"line_end":1314,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockReadGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":117770,"byte_end":117842,"line_start":1308,"line_end":1308,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":117847,"byte_end":117850,"line_start":1309,"line_end":1309,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":117855,"byte_end":117931,"line_start":1310,"line_end":1310,"column_start":5,"column_end":81}},{"value":"/ by `read`, however it can be much more efficient in the case where there","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":117936,"byte_end":118012,"line_start":1311,"line_end":1311,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":118017,"byte_end":118044,"line_start":1312,"line_end":1312,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":118049,"byte_end":118058,"line_start":1313,"line_end":1313,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":695},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":123008,"byte_end":123024,"line_start":1474,"line_end":1474,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":699},{"krate":0,"index":700}],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the exclusive write access of a lock when","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":122846,"byte_end":122922,"line_start":1471,"line_end":1471,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":122923,"byte_end":122935,"line_start":1472,"line_end":1472,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":122936,"byte_end":122996,"line_start":1473,"line_end":1473,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":123298,"byte_end":123304,"line_start":1481,"line_end":1481,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockWriteGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":123220,"byte_end":123286,"line_start":1480,"line_end":1480,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":123787,"byte_end":123790,"line_start":1494,"line_end":1494,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockWriteGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockWriteGuard where\nF: FnOnce(&mut T) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":123365,"byte_end":123440,"line_start":1485,"line_end":1485,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":123445,"byte_end":123448,"line_start":1486,"line_end":1486,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":123453,"byte_end":123516,"line_start":1487,"line_end":1487,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":123521,"byte_end":123552,"line_start":1488,"line_end":1488,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":123557,"byte_end":123560,"line_start":1489,"line_end":1489,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":123565,"byte_end":123616,"line_start":1490,"line_end":1490,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":123621,"byte_end":123703,"line_start":1491,"line_end":1491,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":123708,"byte_end":123761,"line_start":1492,"line_end":1492,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":123766,"byte_end":123775,"line_start":1493,"line_end":1493,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":124655,"byte_end":124662,"line_start":1518,"line_end":1518,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockWriteGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockWriteGuard, Self>\nwhere F: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":124148,"byte_end":124223,"line_start":1508,"line_end":1508,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":124228,"byte_end":124304,"line_start":1509,"line_end":1509,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":124309,"byte_end":124312,"line_start":1510,"line_end":1510,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":124317,"byte_end":124380,"line_start":1511,"line_end":1511,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":124385,"byte_end":124416,"line_start":1512,"line_end":1512,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":124421,"byte_end":124424,"line_start":1513,"line_end":1513,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":124429,"byte_end":124480,"line_start":1514,"line_end":1514,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::try_map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":124485,"byte_end":124571,"line_start":1515,"line_end":1515,"column_start":5,"column_end":91}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":124576,"byte_end":124629,"line_start":1516,"line_end":1516,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":124634,"byte_end":124643,"line_start":1517,"line_end":1517,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":125363,"byte_end":125371,"line_start":1540,"line_end":1540,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockWriteGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":125131,"byte_end":125198,"line_start":1535,"line_end":1535,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":125203,"byte_end":125206,"line_start":1536,"line_end":1536,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":125211,"byte_end":125279,"line_start":1537,"line_end":1537,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":125284,"byte_end":125337,"line_start":1538,"line_end":1538,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":125342,"byte_end":125351,"line_start":1539,"line_end":1539,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":126079,"byte_end":126088,"line_start":1560,"line_end":1560,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockWriteGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into a read lock without allowing any","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":125737,"byte_end":125813,"line_start":1554,"line_end":1554,"column_start":5,"column_end":81}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":125818,"byte_end":125883,"line_start":1555,"line_end":1555,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":125888,"byte_end":125891,"line_start":1556,"line_end":1556,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":125896,"byte_end":125969,"line_start":1557,"line_end":1557,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":125974,"byte_end":126047,"line_start":1558,"line_end":1558,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":126052,"byte_end":126067,"line_start":1559,"line_end":1559,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":126865,"byte_end":126888,"line_start":1581,"line_end":1581,"column_start":12,"column_end":35},"name":"downgrade_to_upgradable","qualname":"<RwLockWriteGuard>::downgrade_to_upgradable","value":"pub fn downgrade_to_upgradable(Self) -> RwLockUpgradableReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into an upgradable read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into an upgradable read lock without allowing any","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":126511,"byte_end":126599,"line_start":1575,"line_end":1575,"column_start":5,"column_end":93}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":126604,"byte_end":126669,"line_start":1576,"line_end":1576,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":126674,"byte_end":126677,"line_start":1577,"line_end":1577,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":126682,"byte_end":126755,"line_start":1578,"line_end":1578,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":126760,"byte_end":126833,"line_start":1579,"line_end":1579,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":126838,"byte_end":126853,"line_start":1580,"line_end":1580,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":128135,"byte_end":128146,"line_start":1609,"line_end":1609,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockWriteGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":127333,"byte_end":127387,"line_start":1596,"line_end":1596,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":127392,"byte_end":127395,"line_start":1597,"line_end":1597,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":127400,"byte_end":127474,"line_start":1598,"line_end":1598,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":127479,"byte_end":127554,"line_start":1599,"line_end":1599,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":127559,"byte_end":127632,"line_start":1600,"line_end":1600,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":127637,"byte_end":127706,"line_start":1601,"line_end":1601,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":127711,"byte_end":127788,"line_start":1602,"line_end":1602,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":127793,"byte_end":127860,"line_start":1603,"line_end":1603,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":127865,"byte_end":127868,"line_start":1604,"line_end":1604,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":127873,"byte_end":127949,"line_start":1605,"line_end":1605,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":127954,"byte_end":128030,"line_start":1606,"line_end":1606,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockWriteGuard` normally.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":128035,"byte_end":128109,"line_start":1607,"line_end":1607,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":128114,"byte_end":128123,"line_start":1608,"line_end":1608,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":128638,"byte_end":128651,"line_start":1624,"line_end":1624,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockWriteGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":128341,"byte_end":128408,"line_start":1617,"line_end":1617,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":128413,"byte_end":128416,"line_start":1618,"line_end":1618,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":128421,"byte_end":128473,"line_start":1619,"line_end":1619,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":128478,"byte_end":128481,"line_start":1620,"line_end":1620,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":128486,"byte_end":128554,"line_start":1621,"line_end":1621,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":128559,"byte_end":128612,"line_start":1622,"line_end":1622,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":128617,"byte_end":128626,"line_start":1623,"line_end":1623,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":129244,"byte_end":129248,"line_start":1642,"line_end":1642,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockWriteGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":128943,"byte_end":129015,"line_start":1636,"line_end":1636,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":129020,"byte_end":129023,"line_start":1637,"line_end":1637,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":129028,"byte_end":129104,"line_start":1638,"line_end":1638,"column_start":5,"column_end":81}},{"value":"/ by `write`, however it can be much more efficient in the case where there","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":129109,"byte_end":129186,"line_start":1639,"line_end":1639,"column_start":5,"column_end":82}},{"value":"/ are no waiting threads.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":129191,"byte_end":129218,"line_start":1640,"line_end":1640,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":129223,"byte_end":129232,"line_start":1641,"line_end":1641,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":760},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":136344,"byte_end":136369,"line_start":1862,"line_end":1862,"column_start":12,"column_end":37},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"RwLockUpgradableReadGuard {  }","parent":null,"children":[{"krate":0,"index":764},{"krate":0,"index":765}],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the upgradable read access of a lock when","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":136182,"byte_end":136258,"line_start":1859,"line_end":1859,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":136259,"byte_end":136271,"line_start":1860,"line_end":1860,"column_start":1,"column_end":13}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":136272,"byte_end":136332,"line_start":1861,"line_end":1861,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":136781,"byte_end":136787,"line_start":1874,"line_end":1874,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockUpgradableReadGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":136703,"byte_end":136769,"line_start":1873,"line_end":1873,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":137080,"byte_end":137088,"line_start":1883,"line_end":1883,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockUpgradableReadGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":136848,"byte_end":136915,"line_start":1878,"line_end":1878,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":136920,"byte_end":136923,"line_start":1879,"line_end":1879,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":136928,"byte_end":136996,"line_start":1880,"line_end":1880,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":137001,"byte_end":137054,"line_start":1881,"line_end":1881,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":137059,"byte_end":137068,"line_start":1882,"line_end":1882,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":137542,"byte_end":137549,"line_start":1897,"line_end":1897,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<RwLockUpgradableReadGuard>::upgrade","value":"pub fn upgrade(Self) -> RwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically upgrades an upgradable read lock lock into a exclusive write lock,\n blocking the current thread until it can be acquired.\n","sig":null,"attributes":[{"value":"/ Atomically upgrades an upgradable read lock lock into a exclusive write lock,","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":137387,"byte_end":137468,"line_start":1895,"line_end":1895,"column_start":5,"column_end":86}},{"value":"/ blocking the current thread until it can be acquired.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":137473,"byte_end":137530,"line_start":1896,"line_end":1896,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":779},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":138088,"byte_end":138099,"line_start":1913,"line_end":1913,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<RwLockUpgradableReadGuard>::try_upgrade","value":"pub fn try_upgrade(Self) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":137891,"byte_end":137975,"line_start":1910,"line_end":1910,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":137980,"byte_end":137983,"line_start":1911,"line_end":1911,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then the current guard is returned.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":137988,"byte_end":138076,"line_start":1912,"line_end":1912,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":139423,"byte_end":139434,"line_start":1942,"line_end":1942,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockUpgradableReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":138612,"byte_end":138666,"line_start":1929,"line_end":1929,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":138671,"byte_end":138674,"line_start":1930,"line_end":1930,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":138679,"byte_end":138753,"line_start":1931,"line_end":1931,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":138758,"byte_end":138833,"line_start":1932,"line_end":1932,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":138838,"byte_end":138911,"line_start":1933,"line_end":1933,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":138916,"byte_end":138985,"line_start":1934,"line_end":1934,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":138990,"byte_end":139067,"line_start":1935,"line_end":1935,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":139072,"byte_end":139139,"line_start":1936,"line_end":1936,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":139144,"byte_end":139147,"line_start":1937,"line_end":1937,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":139152,"byte_end":139228,"line_start":1938,"line_end":1938,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":139233,"byte_end":139309,"line_start":1939,"line_end":1939,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockUpgradableReadGuard` normally.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":139314,"byte_end":139397,"line_start":1940,"line_end":1940,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":139402,"byte_end":139411,"line_start":1941,"line_end":1941,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":139937,"byte_end":139950,"line_start":1957,"line_end":1957,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockUpgradableReadGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":139640,"byte_end":139707,"line_start":1950,"line_end":1950,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":139712,"byte_end":139715,"line_start":1951,"line_end":1951,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":139720,"byte_end":139772,"line_start":1952,"line_end":1952,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":139777,"byte_end":139780,"line_start":1953,"line_end":1953,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":139785,"byte_end":139853,"line_start":1954,"line_end":1954,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":139858,"byte_end":139911,"line_start":1955,"line_end":1955,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":139916,"byte_end":139925,"line_start":1956,"line_end":1956,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":140565,"byte_end":140569,"line_start":1975,"line_end":1975,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockUpgradableReadGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":140254,"byte_end":140326,"line_start":1969,"line_end":1969,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":140331,"byte_end":140334,"line_start":1970,"line_end":1970,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":140339,"byte_end":140415,"line_start":1971,"line_end":1971,"column_start":5,"column_end":81}},{"value":"/ by `upgradable_read`, however it can be much more efficient in the case where there","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":140420,"byte_end":140507,"line_start":1972,"line_end":1972,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":140512,"byte_end":140539,"line_start":1973,"line_end":1973,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":140544,"byte_end":140553,"line_start":1974,"line_end":1974,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":793},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":141222,"byte_end":141231,"line_start":1991,"line_end":1991,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockUpgradableReadGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades an upgradable read lock lock into a shared read lock\n without allowing any writers to take exclusive access of the lock in the\n meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades an upgradable read lock lock into a shared read lock","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":140849,"byte_end":140927,"line_start":1984,"line_end":1984,"column_start":5,"column_end":83}},{"value":"/ without allowing any writers to take exclusive access of the lock in the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":140932,"byte_end":141008,"line_start":1985,"line_end":1985,"column_start":5,"column_end":81}},{"value":"/ meantime.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":141013,"byte_end":141026,"line_start":1986,"line_end":1986,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":141031,"byte_end":141034,"line_start":1987,"line_end":1987,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":141039,"byte_end":141112,"line_start":1988,"line_end":1988,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":141117,"byte_end":141190,"line_start":1989,"line_end":1989,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":141195,"byte_end":141210,"line_start":1990,"line_end":1990,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":141935,"byte_end":141950,"line_start":2011,"line_end":2011,"column_start":12,"column_end":27},"name":"try_upgrade_for","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_for","value":"pub fn try_upgrade_for(Self, R::Duration) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":141680,"byte_end":141752,"line_start":2006,"line_end":2006,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":141757,"byte_end":141800,"line_start":2007,"line_end":2007,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":141805,"byte_end":141808,"line_start":2008,"line_end":2008,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":141813,"byte_end":141884,"line_start":2009,"line_end":2009,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":141889,"byte_end":141923,"line_start":2010,"line_end":2010,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":799},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":142693,"byte_end":142710,"line_start":2034,"line_end":2034,"column_start":12,"column_end":29},"name":"try_upgrade_until","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_until","value":"pub fn try_upgrade_until(Self, R::Instant) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":142424,"byte_end":142496,"line_start":2028,"line_end":2028,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":142501,"byte_end":142544,"line_start":2029,"line_end":2029,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":142549,"byte_end":142552,"line_start":2030,"line_end":2030,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":142557,"byte_end":142628,"line_start":2031,"line_end":2031,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":142633,"byte_end":142667,"line_start":2032,"line_end":2032,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":142672,"byte_end":142681,"line_start":2033,"line_end":2033,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":821},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":152799,"byte_end":152820,"line_start":2334,"line_end":2334,"column_start":12,"column_end":33},"name":"MappedRwLockReadGuard","qualname":"::rwlock::MappedRwLockReadGuard","value":"MappedRwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827}],"decl_id":null,"docs":" An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":152343,"byte_end":152427,"line_start":2326,"line_end":2326,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":152428,"byte_end":152463,"line_start":2327,"line_end":2327,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":152464,"byte_end":152467,"line_start":2328,"line_end":2328,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":152468,"byte_end":152557,"line_start":2329,"line_end":2329,"column_start":1,"column_end":90}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":152558,"byte_end":152633,"line_start":2330,"line_end":2330,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":152634,"byte_end":152714,"line_start":2331,"line_end":2331,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":152715,"byte_end":152726,"line_start":2332,"line_end":2332,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":152727,"byte_end":152787,"line_start":2333,"line_end":2333,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":153673,"byte_end":153676,"line_start":2356,"line_end":2356,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockReadGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockReadGuard where F: FnOnce(&T)\n-> &U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":153242,"byte_end":153316,"line_start":2347,"line_end":2347,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":153321,"byte_end":153324,"line_start":2348,"line_end":2348,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":153329,"byte_end":153397,"line_start":2349,"line_end":2349,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":153402,"byte_end":153433,"line_start":2350,"line_end":2350,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":153438,"byte_end":153441,"line_start":2351,"line_end":2351,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":153446,"byte_end":153497,"line_start":2352,"line_end":2352,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":153502,"byte_end":153589,"line_start":2353,"line_end":2353,"column_start":5,"column_end":92}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":153594,"byte_end":153647,"line_start":2354,"line_end":2354,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":153652,"byte_end":153661,"line_start":2355,"line_end":2355,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":154515,"byte_end":154522,"line_start":2380,"line_end":2380,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockReadGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockReadGuard, Self>\nwhere F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":153999,"byte_end":154073,"line_start":2370,"line_end":2370,"column_start":5,"column_end":79}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":154078,"byte_end":154154,"line_start":2371,"line_end":2371,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":154159,"byte_end":154162,"line_start":2372,"line_end":2372,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":154167,"byte_end":154235,"line_start":2373,"line_end":2373,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":154240,"byte_end":154271,"line_start":2374,"line_end":2374,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":154276,"byte_end":154279,"line_start":2375,"line_end":2375,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":154284,"byte_end":154335,"line_start":2376,"line_end":2376,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::try_map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":154340,"byte_end":154431,"line_start":2377,"line_end":2377,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":154436,"byte_end":154489,"line_start":2378,"line_end":2378,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":154494,"byte_end":154503,"line_start":2379,"line_end":2379,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":155847,"byte_end":155858,"line_start":2412,"line_end":2412,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":155040,"byte_end":155094,"line_start":2399,"line_end":2399,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":155099,"byte_end":155102,"line_start":2400,"line_end":2400,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":155107,"byte_end":155181,"line_start":2401,"line_end":2401,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":155186,"byte_end":155261,"line_start":2402,"line_end":2402,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":155266,"byte_end":155339,"line_start":2403,"line_end":2403,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":155344,"byte_end":155413,"line_start":2404,"line_end":2404,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":155418,"byte_end":155495,"line_start":2405,"line_end":2405,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":155500,"byte_end":155567,"line_start":2406,"line_end":2406,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":155572,"byte_end":155575,"line_start":2407,"line_end":2407,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":155580,"byte_end":155656,"line_start":2408,"line_end":2408,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":155661,"byte_end":155737,"line_start":2409,"line_end":2409,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockReadGuard` normally.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":155742,"byte_end":155821,"line_start":2410,"line_end":2410,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":155826,"byte_end":155835,"line_start":2411,"line_end":2411,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":872},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":157532,"byte_end":157554,"line_start":2469,"line_end":2469,"column_start":12,"column_end":34},"name":"MappedRwLockWriteGuard","qualname":"::rwlock::MappedRwLockWriteGuard","value":"MappedRwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":878}],"decl_id":null,"docs":" An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":157072,"byte_end":157158,"line_start":2461,"line_end":2461,"column_start":1,"column_end":87}},{"value":"/ subfield of the protected data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":157159,"byte_end":157194,"line_start":2462,"line_end":2462,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":157195,"byte_end":157198,"line_start":2463,"line_end":2463,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":157199,"byte_end":157290,"line_start":2464,"line_end":2464,"column_start":1,"column_end":92}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":157291,"byte_end":157366,"line_start":2465,"line_end":2465,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":157367,"byte_end":157447,"line_start":2466,"line_end":2466,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":157448,"byte_end":157459,"line_start":2467,"line_end":2467,"column_start":1,"column_end":12}},{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":157460,"byte_end":157520,"line_start":2468,"line_end":2468,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":158420,"byte_end":158423,"line_start":2494,"line_end":2494,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockWriteGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockWriteGuard where\nF: FnOnce(&mut T) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":157986,"byte_end":158061,"line_start":2485,"line_end":2485,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":158066,"byte_end":158069,"line_start":2486,"line_end":2486,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":158074,"byte_end":158143,"line_start":2487,"line_end":2487,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":158148,"byte_end":158179,"line_start":2488,"line_end":2488,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":158184,"byte_end":158187,"line_start":2489,"line_end":2489,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":158192,"byte_end":158243,"line_start":2490,"line_end":2490,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":158248,"byte_end":158336,"line_start":2491,"line_end":2491,"column_start":5,"column_end":93}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":158341,"byte_end":158394,"line_start":2492,"line_end":2492,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":158399,"byte_end":158408,"line_start":2493,"line_end":2493,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":159279,"byte_end":159286,"line_start":2518,"line_end":2518,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockWriteGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockWriteGuard, Self>\nwhere F: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":158760,"byte_end":158835,"line_start":2508,"line_end":2508,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":158840,"byte_end":158916,"line_start":2509,"line_end":2509,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":158921,"byte_end":158924,"line_start":2510,"line_end":2510,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":158929,"byte_end":158998,"line_start":2511,"line_end":2511,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":159003,"byte_end":159034,"line_start":2512,"line_end":2512,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":159039,"byte_end":159042,"line_start":2513,"line_end":2513,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":159047,"byte_end":159098,"line_start":2514,"line_end":2514,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::try_map(...)`. A method would interfere with methods of","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":159103,"byte_end":159195,"line_start":2515,"line_end":2515,"column_start":5,"column_end":97}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":159200,"byte_end":159253,"line_start":2516,"line_end":2516,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":159258,"byte_end":159267,"line_start":2517,"line_end":2517,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":901},"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":160627,"byte_end":160638,"line_start":2550,"line_end":2550,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockWriteGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":159819,"byte_end":159873,"line_start":2537,"line_end":2537,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":159878,"byte_end":159881,"line_start":2538,"line_end":2538,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":159886,"byte_end":159960,"line_start":2539,"line_end":2539,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":159965,"byte_end":160040,"line_start":2540,"line_end":2540,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":160045,"byte_end":160118,"line_start":2541,"line_end":2541,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":160123,"byte_end":160192,"line_start":2542,"line_end":2542,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":160197,"byte_end":160274,"line_start":2543,"line_end":2543,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":160279,"byte_end":160346,"line_start":2544,"line_end":2544,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":160351,"byte_end":160354,"line_start":2545,"line_end":2545,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":160359,"byte_end":160435,"line_start":2546,"line_end":2546,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":160440,"byte_end":160516,"line_start":2547,"line_end":2547,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockWriteGuard` normally.","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":160521,"byte_end":160601,"line_start":2548,"line_end":2548,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":160606,"byte_end":160615,"line_start":2549,"line_end":2549,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":3968,"byte_end":3979,"line_start":104,"line_end":104,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":9443,"byte_end":9448,"line_start":147,"line_end":147,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":9517,"byte_end":9522,"line_start":148,"line_end":148,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":9554,"byte_end":9559,"line_start":150,"line_end":150,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":10247,"byte_end":10252,"line_start":178,"line_end":178,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":10619,"byte_end":10624,"line_start":191,"line_end":191,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":15541,"byte_end":15546,"line_start":337,"line_end":337,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":16198,"byte_end":16203,"line_start":355,"line_end":355,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":18668,"byte_end":18673,"line_start":420,"line_end":420,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":18811,"byte_end":18816,"line_start":427,"line_end":427,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":18962,"byte_end":18967,"line_start":434,"line_end":434,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":19256,"byte_end":19273,"line_start":440,"line_end":440,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":20766,"byte_end":20776,"line_start":494,"line_end":494,"column_start":74,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":20834,"byte_end":20844,"line_start":496,"line_end":496,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":23543,"byte_end":23553,"line_start":581,"line_end":581,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":25585,"byte_end":25595,"line_start":636,"line_end":636,"column_start":54,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":25779,"byte_end":25789,"line_start":644,"line_end":644,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":25964,"byte_end":25974,"line_start":651,"line_end":651,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":26225,"byte_end":26235,"line_start":661,"line_end":661,"column_start":72,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":26431,"byte_end":26441,"line_start":667,"line_end":667,"column_start":76,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":31232,"byte_end":31248,"line_start":824,"line_end":824,"column_start":9,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":31329,"byte_end":31345,"line_start":827,"line_end":827,"column_start":67,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":31435,"byte_end":31451,"line_start":832,"line_end":832,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":33205,"byte_end":33221,"line_start":884,"line_end":884,"column_start":48,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":34243,"byte_end":34259,"line_start":907,"line_end":907,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":34431,"byte_end":34447,"line_start":915,"line_end":915,"column_start":57,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":34610,"byte_end":34626,"line_start":922,"line_end":922,"column_start":53,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":34877,"byte_end":34893,"line_start":932,"line_end":932,"column_start":72,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":35093,"byte_end":35109,"line_start":939,"line_end":939,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":37819,"byte_end":37836,"line_start":74,"line_end":74,"column_start":65,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":37910,"byte_end":37927,"line_start":75,"line_end":75,"column_start":65,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":37972,"byte_end":37989,"line_start":77,"line_end":77,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":287},{"krate":0,"index":289},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":40382,"byte_end":40399,"line_start":154,"line_end":154,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":41705,"byte_end":41722,"line_start":192,"line_end":192,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":302},{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":42821,"byte_end":42835,"line_start":223,"line_end":223,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":42935,"byte_end":42949,"line_start":227,"line_end":227,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":43001,"byte_end":43015,"line_start":231,"line_end":231,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":44139,"byte_end":44153,"line_start":269,"line_end":269,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":44823,"byte_end":44837,"line_start":289,"line_end":289,"column_start":46,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":50244,"byte_end":50258,"line_start":443,"line_end":443,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":50947,"byte_end":50961,"line_start":461,"line_end":461,"column_start":51,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":53536,"byte_end":53550,"line_start":529,"line_end":529,"column_start":68,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":53728,"byte_end":53742,"line_start":536,"line_end":536,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":53928,"byte_end":53942,"line_start":543,"line_end":543,"column_start":74,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":54294,"byte_end":54311,"line_start":552,"line_end":552,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":55959,"byte_end":55978,"line_start":609,"line_end":609,"column_start":9,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":56061,"byte_end":56080,"line_start":613,"line_end":613,"column_start":65,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":395},{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":58630,"byte_end":58649,"line_start":691,"line_end":691,"column_start":5,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":60744,"byte_end":60763,"line_start":748,"line_end":748,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":416},{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":60973,"byte_end":60992,"line_start":758,"line_end":758,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":61282,"byte_end":61301,"line_start":770,"line_end":770,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":429}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":61525,"byte_end":61544,"line_start":778,"line_end":778,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":435}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":65913,"byte_end":65938,"line_start":908,"line_end":908,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":66025,"byte_end":66050,"line_start":913,"line_end":913,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":67926,"byte_end":67951,"line_start":970,"line_end":970,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":69024,"byte_end":69049,"line_start":995,"line_end":995,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":471},{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":69245,"byte_end":69270,"line_start":1005,"line_end":1005,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":69558,"byte_end":69583,"line_start":1017,"line_end":1017,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":69807,"byte_end":69832,"line_start":1025,"line_end":1025,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":83433,"byte_end":83439,"line_start":364,"line_end":364,"column_start":61,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":83516,"byte_end":83522,"line_start":365,"line_end":365,"column_start":68,"column_end":74},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":83555,"byte_end":83561,"line_start":367,"line_end":367,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":574},{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":84303,"byte_end":84309,"line_start":396,"line_end":396,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":579}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":84733,"byte_end":84739,"line_start":411,"line_end":411,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":93605,"byte_end":93611,"line_start":665,"line_end":665,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":599},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":94950,"byte_end":94956,"line_start":699,"line_end":699,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":100284,"byte_end":100290,"line_start":837,"line_end":837,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":611},{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":103260,"byte_end":103266,"line_start":908,"line_end":908,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":616},{"krate":0,"index":617}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":106268,"byte_end":106274,"line_start":988,"line_end":988,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":109444,"byte_end":109450,"line_start":1073,"line_end":1073,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":112337,"byte_end":112343,"line_start":1149,"line_end":1149,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":112484,"byte_end":112490,"line_start":1156,"line_end":1156,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":112639,"byte_end":112645,"line_start":1163,"line_end":1163,"column_start":59,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":112935,"byte_end":112952,"line_start":1169,"line_end":1169,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":113614,"byte_end":113629,"line_start":1191,"line_end":1191,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":659},{"krate":0,"index":662}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":116148,"byte_end":116163,"line_start":1267,"line_end":1267,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":673}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":118287,"byte_end":118302,"line_start":1322,"line_end":1322,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":678},{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":118484,"byte_end":118499,"line_start":1330,"line_end":1330,"column_start":54,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":118770,"byte_end":118785,"line_start":1340,"line_end":1340,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":689}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":118986,"byte_end":119001,"line_start":1347,"line_end":1347,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":694}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":123187,"byte_end":123203,"line_start":1479,"line_end":1479,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":709},{"krate":0,"index":712}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":125704,"byte_end":125720,"line_start":1553,"line_end":1553,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":719}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":126478,"byte_end":126494,"line_start":1574,"line_end":1574,"column_start":61,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":724}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":127300,"byte_end":127316,"line_start":1595,"line_end":1595,"column_start":49,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":733}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":129469,"byte_end":129485,"line_start":1650,"line_end":1650,"column_start":55,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":738},{"krate":0,"index":739}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":129671,"byte_end":129687,"line_start":1658,"line_end":1658,"column_start":58,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":744}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":129864,"byte_end":129880,"line_start":1665,"line_end":1665,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":749}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":130159,"byte_end":130175,"line_start":1675,"line_end":1675,"column_start":73,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":130376,"byte_end":130392,"line_start":1682,"line_end":1682,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":759}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":136569,"byte_end":136594,"line_start":1868,"line_end":1868,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":136661,"byte_end":136686,"line_start":1872,"line_end":1872,"column_start":52,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":778},{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":138570,"byte_end":138595,"line_start":1928,"line_end":1928,"column_start":56,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":140807,"byte_end":140832,"line_start":1983,"line_end":1983,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":793}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":141638,"byte_end":141663,"line_start":2005,"line_end":2005,"column_start":57,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":798},{"krate":0,"index":799}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":143244,"byte_end":143269,"line_start":2052,"line_end":2052,"column_start":62,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":804},{"krate":0,"index":805}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":143458,"byte_end":143483,"line_start":2060,"line_end":2060,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":810}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":143784,"byte_end":143809,"line_start":2071,"line_end":2071,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":144017,"byte_end":144042,"line_start":2079,"line_end":2079,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":820}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":152990,"byte_end":153011,"line_start":2340,"line_end":2340,"column_start":68,"column_end":89},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":153092,"byte_end":153113,"line_start":2341,"line_end":2341,"column_start":68,"column_end":89},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":153204,"byte_end":153225,"line_start":2346,"line_end":2346,"column_start":45,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":840},{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":155002,"byte_end":155023,"line_start":2398,"line_end":2398,"column_start":49,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":156095,"byte_end":156116,"line_start":2421,"line_end":2421,"column_start":55,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":855},{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":156285,"byte_end":156306,"line_start":2429,"line_end":2429,"column_start":54,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":156579,"byte_end":156600,"line_start":2440,"line_end":2440,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":156801,"byte_end":156822,"line_start":2448,"line_end":2448,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":157730,"byte_end":157752,"line_start":2476,"line_end":2476,"column_start":9,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":157834,"byte_end":157856,"line_start":2479,"line_end":2479,"column_start":68,"column_end":90},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":157947,"byte_end":157969,"line_start":2484,"line_end":2484,"column_start":45,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":891},{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":159780,"byte_end":159802,"line_start":2536,"line_end":2536,"column_start":49,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":901}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":160883,"byte_end":160905,"line_start":2559,"line_end":2559,"column_start":55,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":906},{"krate":0,"index":907}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":161078,"byte_end":161100,"line_start":2567,"line_end":2567,"column_start":58,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":912}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":161264,"byte_end":161286,"line_start":2574,"line_end":2574,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":917}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":161567,"byte_end":161589,"line_start":2585,"line_end":2585,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":922}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":161790,"byte_end":161812,"line_start":2593,"line_end":2593,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":927}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\lib.rs","byte_start":3968,"byte_end":3979,"line_start":104,"line_end":104,"column_start":22,"column_end":33},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":8},"to":{"krate":1,"index":3028}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":7246,"byte_end":7254,"line_start":87,"line_end":87,"column_start":32,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":32},"to":{"krate":0,"index":39}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":8408,"byte_end":8416,"line_start":120,"line_end":120,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":32},"to":{"krate":0,"index":42}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":9443,"byte_end":9448,"line_start":147,"line_end":147,"column_start":60,"column_end":65},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":47},"to":{"krate":1,"index":3016}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":9517,"byte_end":9522,"line_start":148,"line_end":148,"column_start":60,"column_end":65},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":47},"to":{"krate":1,"index":3028}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":9554,"byte_end":9559,"line_start":150,"line_end":150,"column_start":22,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":10247,"byte_end":10252,"line_start":178,"line_end":178,"column_start":12,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":10619,"byte_end":10624,"line_start":191,"line_end":191,"column_start":30,"column_end":35},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":15541,"byte_end":15546,"line_start":337,"line_end":337,"column_start":34,"column_end":39},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":16198,"byte_end":16203,"line_start":355,"line_end":355,"column_start":35,"column_end":40},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":18668,"byte_end":18673,"line_start":420,"line_end":420,"column_start":52,"column_end":57},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":47},"to":{"krate":1,"index":2994}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":18811,"byte_end":18816,"line_start":427,"line_end":427,"column_start":34,"column_end":39},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":47},"to":{"krate":1,"index":2922}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":18962,"byte_end":18967,"line_start":434,"line_end":434,"column_start":58,"column_end":63},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":47},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":19256,"byte_end":19273,"line_start":440,"line_end":440,"column_start":37,"column_end":54},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":99},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":20766,"byte_end":20776,"line_start":494,"line_end":494,"column_start":74,"column_end":84},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":3028}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":20834,"byte_end":20844,"line_start":496,"line_end":496,"column_start":44,"column_end":54},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":23543,"byte_end":23553,"line_start":581,"line_end":581,"column_start":48,"column_end":58},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":25585,"byte_end":25595,"line_start":636,"line_end":636,"column_start":54,"column_end":64},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":3227}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":25779,"byte_end":25789,"line_start":644,"line_end":644,"column_start":57,"column_end":67},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":3240}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":25964,"byte_end":25974,"line_start":651,"line_end":651,"column_start":53,"column_end":63},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":3251}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":26225,"byte_end":26235,"line_start":661,"line_end":661,"column_start":72,"column_end":82},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":26431,"byte_end":26441,"line_start":667,"line_end":667,"column_start":76,"column_end":86},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":9408}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":31232,"byte_end":31248,"line_start":824,"line_end":824,"column_start":9,"column_end":25},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":163},"to":{"krate":1,"index":3028}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":31329,"byte_end":31345,"line_start":827,"line_end":827,"column_start":67,"column_end":83},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":163},"to":{"krate":1,"index":3016}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":31435,"byte_end":31451,"line_start":832,"line_end":832,"column_start":44,"column_end":60},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":163},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":33205,"byte_end":33221,"line_start":884,"line_end":884,"column_start":48,"column_end":64},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":163},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":34243,"byte_end":34259,"line_start":907,"line_end":907,"column_start":54,"column_end":70},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":163},"to":{"krate":1,"index":3227}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":34431,"byte_end":34447,"line_start":915,"line_end":915,"column_start":57,"column_end":73},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":163},"to":{"krate":1,"index":3240}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":34610,"byte_end":34626,"line_start":922,"line_end":922,"column_start":53,"column_end":69},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":163},"to":{"krate":1,"index":3251}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":34877,"byte_end":34893,"line_start":932,"line_end":932,"column_start":72,"column_end":88},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":163},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\mutex.rs","byte_start":35093,"byte_end":35109,"line_start":939,"line_end":939,"column_start":9,"column_end":25},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":163},"to":{"krate":1,"index":9408}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":37819,"byte_end":37836,"line_start":74,"line_end":74,"column_start":65,"column_end":82},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":268},"to":{"krate":1,"index":3016}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":37910,"byte_end":37927,"line_start":75,"line_end":75,"column_start":65,"column_end":82},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":268},"to":{"krate":1,"index":3028}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":37972,"byte_end":37989,"line_start":77,"line_end":77,"column_start":35,"column_end":52},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":268},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":40382,"byte_end":40399,"line_start":154,"line_end":154,"column_start":39,"column_end":56},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":268},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":41705,"byte_end":41722,"line_start":192,"line_end":192,"column_start":40,"column_end":57},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":268},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":42821,"byte_end":42835,"line_start":223,"line_end":223,"column_start":9,"column_end":23},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":306},"to":{"krate":1,"index":3016}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":42935,"byte_end":42949,"line_start":227,"line_end":227,"column_start":9,"column_end":23},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":306},"to":{"krate":1,"index":3028}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":43001,"byte_end":43015,"line_start":231,"line_end":231,"column_start":38,"column_end":52},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":44139,"byte_end":44153,"line_start":269,"line_end":269,"column_start":15,"column_end":29},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":44823,"byte_end":44837,"line_start":289,"line_end":289,"column_start":46,"column_end":60},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":50244,"byte_end":50258,"line_start":443,"line_end":443,"column_start":50,"column_end":64},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":50947,"byte_end":50961,"line_start":461,"line_end":461,"column_start":51,"column_end":65},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":53536,"byte_end":53550,"line_start":529,"line_end":529,"column_start":68,"column_end":82},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":306},"to":{"krate":1,"index":2994}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":53728,"byte_end":53742,"line_start":536,"line_end":536,"column_start":50,"column_end":64},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":306},"to":{"krate":1,"index":2922}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":53928,"byte_end":53942,"line_start":543,"line_end":543,"column_start":74,"column_end":88},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":306},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":54294,"byte_end":54311,"line_start":552,"line_end":552,"column_start":37,"column_end":54},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":370},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":55959,"byte_end":55978,"line_start":609,"line_end":609,"column_start":9,"column_end":28},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":374},"to":{"krate":1,"index":3028}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":56061,"byte_end":56080,"line_start":613,"line_end":613,"column_start":65,"column_end":84},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":374},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":58630,"byte_end":58649,"line_start":691,"line_end":691,"column_start":5,"column_end":24},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":374},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":60744,"byte_end":60763,"line_start":748,"line_end":748,"column_start":9,"column_end":28},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":374},"to":{"krate":1,"index":3227}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":60973,"byte_end":60992,"line_start":758,"line_end":758,"column_start":9,"column_end":28},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":374},"to":{"krate":1,"index":3251}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":61282,"byte_end":61301,"line_start":770,"line_end":770,"column_start":9,"column_end":28},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":374},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":61525,"byte_end":61544,"line_start":778,"line_end":778,"column_start":9,"column_end":28},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":374},"to":{"krate":1,"index":9408}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":65913,"byte_end":65938,"line_start":908,"line_end":908,"column_start":9,"column_end":34},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":436},"to":{"krate":1,"index":3028}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":66025,"byte_end":66050,"line_start":913,"line_end":913,"column_start":5,"column_end":30},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":436},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":67926,"byte_end":67951,"line_start":970,"line_end":970,"column_start":5,"column_end":30},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":436},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":69024,"byte_end":69049,"line_start":995,"line_end":995,"column_start":9,"column_end":34},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":436},"to":{"krate":1,"index":3227}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":69245,"byte_end":69270,"line_start":1005,"line_end":1005,"column_start":9,"column_end":34},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":436},"to":{"krate":1,"index":3251}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":69558,"byte_end":69583,"line_start":1017,"line_end":1017,"column_start":9,"column_end":34},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":436},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\remutex.rs","byte_start":69807,"byte_end":69832,"line_start":1025,"line_end":1025,"column_start":9,"column_end":34},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":436},"to":{"krate":1,"index":9408}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":73796,"byte_end":73805,"line_start":107,"line_end":107,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":512},"to":{"krate":0,"index":523}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":75481,"byte_end":75490,"line_start":153,"line_end":153,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":512},"to":{"krate":0,"index":528}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":76045,"byte_end":76054,"line_start":167,"line_end":167,"column_start":34,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":512},"to":{"krate":0,"index":530}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":77174,"byte_end":77183,"line_start":194,"line_end":194,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":512},"to":{"krate":0,"index":537}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":77573,"byte_end":77591,"line_start":203,"line_end":203,"column_start":43,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":537},"to":{"krate":0,"index":540}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":77594,"byte_end":77608,"line_start":203,"line_end":203,"column_start":64,"column_end":78},"kind":"SuperTrait","from":{"krate":0,"index":530},"to":{"krate":0,"index":540}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":78376,"byte_end":78385,"line_start":219,"line_end":219,"column_start":36,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":512},"to":{"krate":0,"index":543}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79434,"byte_end":79450,"line_start":251,"line_end":251,"column_start":40,"column_end":56},"kind":"SuperTrait","from":{"krate":0,"index":543},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":79453,"byte_end":79466,"line_start":251,"line_end":251,"column_start":59,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":523},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80395,"byte_end":80411,"line_start":276,"line_end":276,"column_start":45,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":543},"to":{"krate":0,"index":552}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":80414,"byte_end":80432,"line_start":276,"line_end":276,"column_start":64,"column_end":82},"kind":"SuperTrait","from":{"krate":0,"index":528},"to":{"krate":0,"index":552}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":81032,"byte_end":81048,"line_start":294,"line_end":294,"column_start":41,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":543},"to":{"krate":0,"index":555}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":81051,"byte_end":81065,"line_start":294,"line_end":294,"column_start":60,"column_end":74},"kind":"SuperTrait","from":{"krate":0,"index":530},"to":{"krate":0,"index":555}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":83433,"byte_end":83439,"line_start":364,"line_end":364,"column_start":61,"column_end":67},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":3016}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":83516,"byte_end":83522,"line_start":365,"line_end":365,"column_start":68,"column_end":74},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":3028}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":83555,"byte_end":83561,"line_start":367,"line_end":367,"column_start":23,"column_end":29},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":84303,"byte_end":84309,"line_start":396,"line_end":396,"column_start":12,"column_end":18},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":84733,"byte_end":84739,"line_start":411,"line_end":411,"column_start":31,"column_end":37},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":93605,"byte_end":93611,"line_start":665,"line_end":665,"column_start":35,"column_end":41},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":94950,"byte_end":94956,"line_start":699,"line_end":699,"column_start":36,"column_end":42},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":100284,"byte_end":100290,"line_start":837,"line_end":837,"column_start":40,"column_end":46},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":103260,"byte_end":103266,"line_start":908,"line_end":908,"column_start":45,"column_end":51},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":106268,"byte_end":106274,"line_start":988,"line_end":988,"column_start":38,"column_end":44},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":109444,"byte_end":109450,"line_start":1073,"line_end":1073,"column_start":43,"column_end":49},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":112337,"byte_end":112343,"line_start":1149,"line_end":1149,"column_start":53,"column_end":59},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":2994}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":112484,"byte_end":112490,"line_start":1156,"line_end":1156,"column_start":35,"column_end":41},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":2922}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":112639,"byte_end":112645,"line_start":1163,"line_end":1163,"column_start":59,"column_end":65},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":112935,"byte_end":112952,"line_start":1169,"line_end":1169,"column_start":37,"column_end":54},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":641},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":113614,"byte_end":113629,"line_start":1191,"line_end":1191,"column_start":45,"column_end":60},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":645},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":116148,"byte_end":116163,"line_start":1267,"line_end":1267,"column_start":49,"column_end":64},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":645},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":118287,"byte_end":118302,"line_start":1322,"line_end":1322,"column_start":55,"column_end":70},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":645},"to":{"krate":1,"index":3227}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":118484,"byte_end":118499,"line_start":1330,"line_end":1330,"column_start":54,"column_end":69},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":645},"to":{"krate":1,"index":3251}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":118770,"byte_end":118785,"line_start":1340,"line_end":1340,"column_start":73,"column_end":88},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":645},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":118986,"byte_end":119001,"line_start":1347,"line_end":1347,"column_start":9,"column_end":24},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":645},"to":{"krate":1,"index":9408}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":123187,"byte_end":123203,"line_start":1479,"line_end":1479,"column_start":45,"column_end":61},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":695},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":125704,"byte_end":125720,"line_start":1553,"line_end":1553,"column_start":54,"column_end":70},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":695},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":126478,"byte_end":126494,"line_start":1574,"line_end":1574,"column_start":61,"column_end":77},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":695},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":127300,"byte_end":127316,"line_start":1595,"line_end":1595,"column_start":49,"column_end":65},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":695},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":129469,"byte_end":129485,"line_start":1650,"line_end":1650,"column_start":55,"column_end":71},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":695},"to":{"krate":1,"index":3227}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":129671,"byte_end":129687,"line_start":1658,"line_end":1658,"column_start":58,"column_end":74},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":695},"to":{"krate":1,"index":3240}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":129864,"byte_end":129880,"line_start":1665,"line_end":1665,"column_start":54,"column_end":70},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":695},"to":{"krate":1,"index":3251}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":130159,"byte_end":130175,"line_start":1675,"line_end":1675,"column_start":73,"column_end":89},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":695},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":130376,"byte_end":130392,"line_start":1682,"line_end":1682,"column_start":9,"column_end":25},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":695},"to":{"krate":1,"index":9408}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":136569,"byte_end":136594,"line_start":1868,"line_end":1868,"column_start":9,"column_end":34},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":760},"to":{"krate":1,"index":3028}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":136661,"byte_end":136686,"line_start":1872,"line_end":1872,"column_start":52,"column_end":77},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":138570,"byte_end":138595,"line_start":1928,"line_end":1928,"column_start":56,"column_end":81},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":140807,"byte_end":140832,"line_start":1983,"line_end":1983,"column_start":61,"column_end":86},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":141638,"byte_end":141663,"line_start":2005,"line_end":2005,"column_start":57,"column_end":82},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":143244,"byte_end":143269,"line_start":2052,"line_end":2052,"column_start":62,"column_end":87},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":760},"to":{"krate":1,"index":3227}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":143458,"byte_end":143483,"line_start":2060,"line_end":2060,"column_start":61,"column_end":86},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":760},"to":{"krate":1,"index":3251}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":143784,"byte_end":143809,"line_start":2071,"line_end":2071,"column_start":9,"column_end":34},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":760},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":144017,"byte_end":144042,"line_start":2079,"line_end":2079,"column_start":9,"column_end":34},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":760},"to":{"krate":1,"index":9408}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":152990,"byte_end":153011,"line_start":2340,"line_end":2340,"column_start":68,"column_end":89},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":821},"to":{"krate":1,"index":3028}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":153092,"byte_end":153113,"line_start":2341,"line_end":2341,"column_start":68,"column_end":89},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":821},"to":{"krate":1,"index":3016}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":153204,"byte_end":153225,"line_start":2346,"line_end":2346,"column_start":45,"column_end":66},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":821},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":155002,"byte_end":155023,"line_start":2398,"line_end":2398,"column_start":49,"column_end":70},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":821},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":156095,"byte_end":156116,"line_start":2421,"line_end":2421,"column_start":55,"column_end":76},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":821},"to":{"krate":1,"index":3227}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":156285,"byte_end":156306,"line_start":2429,"line_end":2429,"column_start":54,"column_end":75},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":821},"to":{"krate":1,"index":3251}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":156579,"byte_end":156600,"line_start":2440,"line_end":2440,"column_start":9,"column_end":30},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":821},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":156801,"byte_end":156822,"line_start":2448,"line_end":2448,"column_start":9,"column_end":30},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":821},"to":{"krate":1,"index":9408}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":157730,"byte_end":157752,"line_start":2476,"line_end":2476,"column_start":9,"column_end":31},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":872},"to":{"krate":1,"index":3028}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":157834,"byte_end":157856,"line_start":2479,"line_end":2479,"column_start":68,"column_end":90},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":872},"to":{"krate":1,"index":3016}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":157947,"byte_end":157969,"line_start":2484,"line_end":2484,"column_start":45,"column_end":67},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":872},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":159780,"byte_end":159802,"line_start":2536,"line_end":2536,"column_start":49,"column_end":71},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":872},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":160883,"byte_end":160905,"line_start":2559,"line_end":2559,"column_start":55,"column_end":77},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":872},"to":{"krate":1,"index":3227}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":161078,"byte_end":161100,"line_start":2567,"line_end":2567,"column_start":58,"column_end":80},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":872},"to":{"krate":1,"index":3240}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":161264,"byte_end":161286,"line_start":2574,"line_end":2574,"column_start":54,"column_end":76},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":872},"to":{"krate":1,"index":3251}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":161567,"byte_end":161589,"line_start":2585,"line_end":2585,"column_start":9,"column_end":31},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":872},"to":{"krate":1,"index":9401}},{"span":{"file_name":"C:\\Users\\user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lock_api-0.4.9\\src\\rwlock.rs","byte_start":161790,"byte_end":161812,"line_start":2593,"line_end":2593,"column_start":9,"column_end":31},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":872},"to":{"krate":1,"index":9408}}]}